[title sub="Written by Chris Graham, ocProducts"]ocPortal Tutorial: The ocPortal repository[/title]

The ocPortal repository is a shadow representation of ocPortal's data.

In most cases, ocPortal data is stored in the database, which is not a particular user-friendly form, given databases are generally designed with a special set of rules that lead to data being split up across multiple tables. Sometimes data is also stored on the filesystem (i.e. the disk); for example, file uploads.

The ocPortal repository represents the data into a form that feels far more naturally and integrates with many kinds of tools you may want to use on it.

Through WebDAV (needed for most of the use cases below) you can access the repository as a folder on your own computer.

Specifically, the following use-cases are served by the repository:
 - Making ocPortal [b]opaque[/b] -- dive right into ocPortal's content/resource data and get an immediate sense of what is there and how it is structured
 - Making ocPortal [b]tactile[/b] -- easily manipulate data via normal drag & drop operations without a clunky and slow web interface; for example, mass move entries from one category to another
 - Making [b]transferring data[/b] between sites (e.g. from a staging site to a live site) easier -- copy & paste from one site to another and ocPortal will magically import everything, reassign ID numbers as required, auto-match named categories where possible, and create empty-shells for missing dependencies as required
 - Integration with normal [b]desktop applications[/b] -- use your favourite text editors or file-search tools to achieve things such as mass search & replace
 - [b]Configuration management[/b] -- track what options have been changed, and transfer them between sites
 - [b]Backups[/b] -- copy portions of the repository to another location for backup; for example, if you are about to make major changes to the catalogue structure, take a backup of the catalogues
 - [b]Revision control[/b] (advanced) -- hook up git to the repository directory, either locally, on your server, or both, to backup content as it is modified
 - Creating an abstract [b]content API[/b] (for programmers) -- by having a content model that is abstract (i.e. it's a single model that can be used for manipulating any kind of content/resource), programmers can come up with some clever functionality; Aggregate Content Types is an example of ocPortal functionality that is built on top of the repository

And the following work-in-progress use-cases:
 - Making content [b]import and export[/b] very easy -- we are able to code up import/export support into the repository by coding in additional views of the same data; for example, we would be able to allow automatic import of images into galleries via just copying in JPEG files
See the [url="tracker"]http://ocportal.com/tracker/[/url] for where we'd like to take this functionality.

[contents]decimal,lower-alpha[/contents]

[title="2"]The filesystem[/title]

The repository is actually implemented within ocPortal as the OcCLE-fs filesystem. OcCLE-fs and the repository are one and the same. You therefore must have OcCLE installed for it to be available.

The repository consists of a number of meta-filesystems, each tied into the filesystem at a particular mount point, with the mount points inspired by UNIX filesystem design.

The default meta-filesystems are as follows, and are all mounted as subdirectories of the root directory:
 - [tt]bin[/tt]: A place to store all your OcCLE scripts
 - [tt]database[/tt]: Access to the raw relational database; level 1: tables, level 2: rows (identified by ID)
 - [tt]etc[/tt]: Access to ocPortal configuration options
 - [tt]home[/tt]: Access to the filedump (aka the File/Media Library)
 - [tt]members[/tt]: A listing of every member registered on the system, with their account/profile settings and usergroups
 - [tt]raw[/tt]: A raw listing of the actual ocPortal installation directory
 - [tt]root[/tt]: A listing of the ocPortal installation directory, taking source code overrides into account (featuring automatically overriding when files are edited)
 - [tt]var[/tt]: Structured website content, separated by content type on level 1, with category structure as further folders (generally-speaking), and entries as files

The [tt]var[/tt] meta-filesystem is perhaps the most interesting because if Webdav is installed, you can use this to import/export/copy content into and between websites using your normal desktop file manager. This is extremely useful. In actuality, [tt]var[/tt] is not actually a meta-filesystem in it's own right, each directory underneath it is actually implemented as a separate meta-filesystem.

[title="2"]WebDAV[/title]

WebDAV is a web-based-filesystem protocol that most operating systems support. This lets you access the repository as a normal folder on your computer. ocPortal uses a PHP WebDAV-library called SabreDAV to bind OccleFS to WebDAV. To get this, you'll need to install the WebDAV non-bundled addon.

Be aware that some operating systems do not support WebDAV very well. The SabreDAV team have excellent documentation illustrating issues that are outside our control:
 - On Mac, you may need to use Cyberduck to mount WebDAV, as [url="Finder has issues"]https://code.google.com/p/sabredav/wiki/Finder[/url]
 - [url="On Windows"]https://code.google.com/p/sabredav/wiki/Windows[/url], you may want to tune your environment

[title="2"]The [tt]var[/tt] meta-filesystems[/title]

Each meta-filesystem under [tt]var[/tt] is structured using filenames and (sometimes) folders. There is an assumption that everything under one of these meta-filesystems is of a particular set of resource types.

The filenames are not based upon ID numbers usually used for addressing in ocPortal, and relationships between them are not either. There are two reasons for this:
1) Friendly naming, for the human browsing the filesystem
2) So dependencies can be encoded knowing that IDs may not match up, or conflict, between sites

Every file or folder in a filesystem is an ocPortal "resource". In most cases, every file or folder is a content item. Things like multi-moderations or post-templates are resources, but not content, which is why we hold the distinction.

[title="3"]Addressing, in detail[/title]

Each resource has a number of addressing methods:
 - content-type and content-ID combination
 - label
 - moniker
 - filename
 - GUID

Within normal ocPortal code, content is addressed by the content-type and content-ID combination. For example, [tt]download[/tt] and [tt]4[/tt]. Sometimes the content-type is not needed, when the code involved implicitly knows what content-type it is working with (e.g. if you're working within the [tt]downloads[/tt] module, it clearly knows IDs refer to downloads).
The content-types are defined by the PHP files in the [tt]sources/hooks/systems/content_meta_aware[/tt] directory.
The repository internally has a sense of content-type and content-ID combination for looking up data, but all communication actually works via one of the other methods. This is so that we can transfer data between different sites without having the sequential ID numbers failing to match up correctly.

Each kind of resource has a label, and the meaning of this differs from resource to resource. Generally though, it is the human-readable title of it.
The repository has an internal API for adding and referencing content by title, which is used by some ocPortal code.
However, the title is too free-form to be used for file names, so we actually convert it automatically into a 'moniker'. This is similar to ocPortal's 'URL monikers' system, but actually the repository uses its own set of monikers. A moniker is guaranteed to be generated as unique across the whole filesystem, while of course a label may not be (we could imagine two entries in a category with the same title for example).
Once we have a moniker, this essentially then is combined with the file extension (if applicable -- not for folders), to form the filename. Usually the file extension is [tt].xml[/tt], as the meta-filesystems use XML for encoding data. Because monikers are unique, filenames are actually unique and we know we will never get conflicting names.

Because entries are usually represented as files within folders (categories), we can therefore think of content as being identified via a full file path, which is essentially a combination of monikers and slashes ([tt]/[/tt] on Mac/Linux, [tt]\[/tt] on Windows).
Obviously an entry's category is the same as the folder it is within, so the filesystem automatically carries many data relationships this way.

For the remaining cases where we have relationships between resources that are not carried by directory structure, we encode it using multiple addressing schemes stored within the [tt].xml[/tt] files, in precedence order:
1) GUID
2) filename
3) label
GUIDs are long codes, with dashes in, designed to be globally unique. This ensures that when they are generated on different sites, they won't conflict. Each resource is assigned a GUID, and when that resource is copied between sites, the GUID is preserved -- which allows us to match things up, even though ID numbers will not match up.
If we copy something from one site to another, and can't get a GUID match, we try and get a filename match. This would automatically match members on different sites by having the same username, for example.
If we still cannot get a match, the label is used to create a new resource, and we'll associate with that. Any resource in the filesystems can be created by label alone, and the other fields are set as default as a result.

ocPortal maintains a database table that ties all the different addressing schemes together.

[title="2"]Use care[/title]

It would be a mistake to just try and backup everything in the repository, and think you can copy it all back to a site to restore it. You should have full regular database backups for your first go-to backup technique.

In most cases you should work just under [tt]var[/tt] for this kind of thing, and you should think in terms of copying over folders and files that you know about, not everything at once. This will greatly reduce the chance of you unexpected behaviours. The system is complex and doing a lot of magic underneath the hood to make things match up -- don't take it too much for granted.

Of particular note is that there may be overlap with different parts of the repository. In particular, stuff under [tt]database[/tt] will overlap with stuff under [tt]var[/tt]. Never think about copying stuff from directly under [tt]database[/tt] from one site to another as it has no sense for how to port associated content over and almost certainly will lead to corruption.

Don't do things like run [tt]rsync[/tt] or git over the repository as a whole -- although you may have good results if you carefully focus such things on specific parts of the repository.

[title="2"]Incorrect reporting[/title]

You may see some files quoted with a file size of zero. This happens in situations where calculating the virtual file size for everything in a directory listing would be inefficient.

You may also see a file modification time of 1970. This happens when no file modification time is known.

[title="2"]Known omissions[/title]

 - If you add content via the repository, no syndication will be performed for it. E.g. if you add a news article, it won't be syndicated to Facebook if you've configured such syndication. This is normal within ocPortal, as syndication is an automated assistant built into the CMS modules, not the underlying framework. You can always syndicate things manually if required.

[title="2"]See also[/title]

 - [page="_SEARCH:tut_occle"]OcCLE[/page]
 - [page="_SEARCH:tut_aggregate_types"]Aggregate Content Types[/page]
 - [page="_SEARCH:tut_structure"]ocPortal site structure[/page]
