[title sub="Written by Chris Graham, ocProducts"]ocPortal Tutorial: Installing on Google App Engine[/title]

ocPortal can run on Google App Engine (GAE). GAE is a cloud hosting service designed for high scalability. Unlike almost all other cloud services, it does not require significant preparation and ongoing maintenance in order to scale (you do not need to set up Virtual Machine images, or manually start/stop server instances).
Most people don't realise how much work the normal "cloud" services are to properly utilise, as the marketing can be really very misleading, and successful customers are development teams rather than webmasters.
The easy ocPortal scalability with App Engine is possible because it is a locked-down environment. Essentially the ocPortal developers have done up-front work to ensure ocPortal meets certain restraints that allow Google to automatically copy things across different servers without it being noticeable.

All the above said, hosting a large scale cloud deployment is still not simple. Some restraints will affect you, and you will need to be comfortable working on the command line, and staging your changes on a local development machine. We'll save you having to have a programming/IT team to get ocPortal running, or the need to fork ocPortal, but it still requires some level of expertise.
However, if you're at the level of needing this kind of scaling rather than typical hosting or a dedicated server (or virtual machine, such as on Amazon Cloud via Bitnami) then you should be successful enough to invest in some expert set up.

This tutorial explains how the ocPortal GAE support works.

[contents]decimal,lower-alpha[/contents]

[title="2"]Limitations[/title]

The following are known limitations with GAE:
 - Individual non-bundled ocPortal addons, or third party frameworks, may or may not work. The ocPortal development tools can scan for most issues but generally most programmers will not be developing with App Engine's constraints in mind. ocProducts can bring non-bundled addons up to scratch in most cases, under our development services. If possible/ideally we might try and contribute improvements back into "upstream" to the actual project, but sometimes we may feel it better to just fork our own version of the project.
 - The comments above extend to other applications you may wish to integrate. You need to be comfortable of their compatibility, or that you will get them updated, or that you will run them on another server.
 - LDAP will not work (LDAP would typically be used on a local corporate network anyway).
 - There is a 32MB upload limit, which means uploading large files is not realistic. This could be worked around, [url="with investment"]http://ocportal.com/tracker/view.php?id=1426[/url].
 - FFMPEG will not run. You would need to use a third-party transcoding service, or syndicate to YouTube (note: that addon is not currently tested on GAE). Most users, however, will be fine with ocPortal's support for integrating videos that were separately uploaded to Youtube.
 - Outgoing web requests cannot exceed 10MB, which limits some external transcoding and syndication options.
 - There is a 32MB response size limit. This should not generally be a problem for most users, but worth noting.
 - You will need to maintain a local development site, and won't be able to do things such as themeing or addon management directly on the live site.
 - You won't be able to have the [i]full[/i] set of ocPortal addons installed, due to size constraints. This should generally not be a problem, and we provide advice on it in this tutorial.
 - While we are making sure ocPortal runs well on GAE (i.e. stably, without special patches), initial set up, and some maintenance tasks, are inherently very complex. If you are not a programmer, you will need one to perform some things for you.
 - You may not use a third-party forum with ocPortal: you must use OCF. You must also not be using a shared forum database.
 - If you have unusually large amounts of data (as a rough example, over 50,000 catalogue entries), it is possible some actions could time-out, such as deleting a catalogue with those entries in. Such high-volume use-cases may need custom solutions for individual sites (requiring custom programming), such as shifting certain actions into background maintenance tasks. This kind of problem would affect any hosting, but particularly GAE has hard-limits on how much a web request can do (which is a good thing).
 - The feature to e-mail in support tickets is not supported, although [url="it could be added via an alternative mechanism"]http://ocportal.com/tracker/view.php?id=1429[/url].

The following ocPortal bundled addons will not work:
 - (All the addons mentioned for uninstallation in the Setup Wizard, further down in this tutorial)

[title="2"]Costs[/title]

GAE is charged based on usage. Google provide documents that explain what is chargeable, and by how much.

It is hard to compare GAE costs to those of shared hosting. Typically a shared host will assume you won't max out your resource allocation fully (and if you tried, they'd ban you, often regardless of their advertised terms). Therefore you would need to compare averaged typical resource usage on shared hosting, to the costs on GAE.
Anecdotally, we have heard the costs are similar, but we have not tested this. It will of course vary greatly on a case-by-case basis.

In a sense it is a mute comparison, because shared hosting cannot scale and hence you have no real choice other than to use a cloud solution (where pricing is also complex) or your own/rented hardware.

From a cost-origin point of view, shared hosting pricing benefits from its relative simplicity (no high R&D costs, relatively unskilled support personnel) and the relatively low usage the average customer has (hence subsidisation is happening) -- while cloud hosting benefits from its low-service nature and economies of scale. Both the shared hosting and cloud hosting markets are extremely competitive.

You should obviously keep track of your costs. And, obviously the ocPortal developers cannot put any guarantee on how much things might cost. Be advised: even if there is a bug that uses run-away resources, the ocPortal developers cannot be held liable for those costs. Google have [url="options to put a ceiling on resource usage"]https://developers.google.com/appengine/docs/quotas[/url], blocking requests that go above this.

[title="2"]Basic set up[/title]

You will need to have a local development machine, in addition to your live application. Your initial site setup will be done locally, and then you will deploy it live. This "development to live" process will be your core workflow.

You will need to install the [url="GAE PHP SDK"]https://developers.google.com/appengine/docs/php/gettingstarted/installing[/url] on your local development machine. You must do this before ocPortal installation.

You will also need to install MySQL, as this doesn't come with the SDK. MySQL is equivalent to Google Cloud SQL (used by the live application).

[title="2"]ocPortal installation[/title]

Extract the ocPortal manual installation package to a directory on your development machine.

Start up the GAE launcher.

(the exact tool/process may depend on what platform you are using -- i.e. Windows/Linux/Mac. These instructions have been tested on a Mac).

[media width="150" description="The application launcher, after the application has been created" float="right"]data_custom/images/docs/appengine_launcher.png[/media]
Add the in the launcher. Simple add the directory you extracted ocPortal to, and it should automatically configure it from that.

Select your application row in the list of applications, and click "Run".

In your web browser, go to [tt]http://localhost:8080/install.php[/tt] (it's running on port 8080 by default, which means you can also have Apache installed on the machine if you so wish).

[media width="150" description="Creating a Google App Engine application" float="right"]data_custom/images/docs/appengine_create.png[/media]
[media width="150" description="Creating a Google Cloud SQL database" float="right"]data_custom/images/docs/cloud_sql.png[/media]
The installer will ask for various GAE-specific details. It will provide links that take you directly to where you can set these up, or to the official Google instruction pages.
To summarise, the following live application details are needed:
 - App Engine application ID -- The identifier for the live GAE application
 - Google Cloud Storage bucket name -- The identifier for the live Google Cloud Storage (this is basically the live filesystem, which is stored separately to the application itself)
 - Database hostname -- This includes the identifier for the Google Cloud SQL database's Google Cloud Platform project and the identifier for the Google Cloud SQL instance
 - Database name -- The name of the Google Cloud SQL database, which you must create manually
The default settings assume all the different identifier's are the same, but they don't have to be. These are separate services that are linked together for your live application to run.

[media width="150" description="Creating a Google Cloud SQL database" float="right"]data_custom/images/docs/cloud_sql_database.png[/media]
The actual Google Cloud SQL database needs creating manually with an SQL command:
[code]
CREATE DATABASE <application>;
[/code]
Do this in the SQL prompt under the Google Cloud SQL section of the Google APIs site.

[title="2"]Structural configuration[/title]

Continue through to the ocPortal Setup Wizard. Go through it as normal, but you will need to make some particular choices.

[title="3"]Setup Wizard: Step 4[/title]

The following addons are not supported/useful on GAE and should be uninstalled:
 - Installer (serves no purpose on any ocPortal site, once install has finished)
 - Code Editor (not supported)
 - Config Editor (not supported)
 - Devguide (generally not useful)
 - Backup (not supported/relevant, use the GAE database backup tools)
 - Uninstaller (not supported)
 - LDAP (not supported)
 - Themewizard (themeing on a live site is ill-advised, especially on the scale of the theme-wizard)
 - Setupwizard (not supported)
 - Stats (not supported due to the resource-usage-pattern, use Google Analytics)
 - Import (not supported)

Note that the purpose of recommending uninstallation is actually primarily because App Engine has some limits. We push up against these limits and hence need to get rid of redundant code to stay under them.

Even after removing these addons, you will still need to clear a bit more out to make sure you have fewer than 1000 files in the [tt]themes/default/templates[/tt] directory.
Remove one or two of the following addons (your choice which):
 - Calendar
 - Chat
 - eCommerce
 - Shopping
 - Galleries
 - Pointstore
If you only removed one of the above, also remove one of the following:
 - Authors
 - Banners
 - Downloads
 - Newsletter
 - Polls
 - Quizzes
 - Tickets
 - wiki
(Of course, you may remove more if you wish, or other addons)

If you find it annoying that you cannot have every ocPortal addon when using GAE, you should consider that good sites are streamlined; very few (if any) websites should contain every ocPortal feature.

[title="2"]Staging configuration[/title]

You should do certain tasks on your local development machine:
 - Themeing
 - Addon management (installing/uninstalling)
 - Debranding
 - Adding/renaming/deleting zones
These tasks need doing locally because you cannot manipulate the filesystem on the live application. Once it is live, the main-structure/code of the website is expected to not change outside a deployment. It's a good habit to maintain generally for a large-scale site, as it enforces discipline.

You may also wish to consider doing the following locally, for reasons of performance:
 - Edit Comcode pages
 - Language editing
(remote ocPortal custom files will go through Cloud Storage, which may have increased latency than if stored directly in the deployed application)

Things like menu editing, or adding content, would primarily be done on the live site directly. With investment we would/will continue to improve ocPortal's staging tools (see the [page="_SEARCH:tut_repository"]Repository tutorial[/page]), but at this time we cannot necessarily confirm they will work with GAE or fit into a smooth staging to live publishing process. Our primary aim has been getting the challenge of basic support working so that we can then work on smoothing over daily usage as we find useful.
You could consider regularly copying the live Cloud Database back to your staging site and testing new content locally, before recreating your actions manually onto the live site. This isn't as bad as it sounds for most kinds of content, as the actual clicks are minimal compared to the time actually producing content.

[title="2"]Deployment[/title]

We will assume that you have already set up your live application/storage/database, as those details were put into the installer. This section covers how to copy your application and data, from local to live, in the following order:
 - Copying your initial database
 - Copying your storage
 - Copying your application

To copy your initial database to live, you need to follow a rather complex procedure of exporting, copying to live storage, then importing from live storage. See [url="Google's documentation on Importing data"]https://developers.google.com/cloud-sql/docs/import_export[/url].

You may want to copy your initial custom files to live. To do this you will need to [url="use gsutil"]https://developers.google.com/storage/docs/gsutil[/url] with the files in [tt]data_custom/modules/google_appengine[/tt] (that is your custom filesystem, which ocPortal has kept separated from your application files).
Alternatively, you can include your custom files as a part of the application. You do this by merging the [tt]data_custom/modules/google_appengine[/tt] folder back down into your main ocPortal folder. Note that this does not work for the [tt]uploads[/tt] directory though, as uploads are always considered custom and ocPortal will not search the application directory when locating them.

See the Google documentation on [url="how to upload your live application"]https://developers.google.com/appengine/docs/php/gettingstarted/uploading[/url].

Note that the ocPortal scheduler will have been automatically set up, along with a particular PHP configuration (no [tt].htaccess[/tt] file setup needed).

[title="2"]Late structural changes[/title]

If you forget to do something before you deploy, or if new development has happened, you can always re-deploy later.

If you are going to uninstall/install an addon, you should generally go through this process:
 - Close the live site temporarily
 - Download the live Cloud Database and load it into your development machine
 - Perform the action on your development machine
 - Do a code deploy
 - Copy the Cloud database back to live
 - Re-open the live site
This process is admittedly cumbersome and time-consuming, but not wholly unreasonable: if you are working at a multi-server scale this kind of thing should be a part of your development process anyway.

That said, down-time is bad. It may not strictly be always necessary. You can uninstall modules and blocks on the live site, then deploy the code after doing a full uninstall locally. Generally this will work, but it requires a programmers insight in terms of knowing exactly what uninstall code is being triggered. You'd still have to close the live site for a time, to stop the modules/blocks automatically reinstalling.

The process of automatic module/block installation/upgrading is actually key to the deployment process. You should not generally have to think about manually making Cloud Database changes because you can put migration code into blocks/modules. This is essentially the same thing as the ocPortal developers do between ocPortal versions (at no point [generally] does anyone need to manually go into their database to change it).

[title="3"]ocPortal major upgrades[/title]

Doing a full ocPortal upgrade is a little bit more thorny than being a developer and deploying some code enhancements.

Note that we would generally not expect non-programmers to be doing this kind of thing. Therefore please consult outside help if you are not one.

You could do an upgrade two ways...

[title="4"]Fully local upgrade (simplest, longest)[/title]

Go through this process:
 - Close the live site temporarily
 - Download the live Cloud Database and load it into your development machine
 - Perform the upgrade on your development machine
 - Do a code deploy
 - Copy the Cloud database back to live
 - Re-open the live site

[title="4"]Split upgrade[/title]

Go through this process:
 - Perform the upgrade on your development machine
 - Close the live site temporarily
 - Do a code deploy
 - Go into the upgrader on live, and perform all the steps except the file transfer one (as you have just done that when you re-deployed)
 - Re-open the live site

[title="2"]Configuration considerations[/title]

[title="3"]Domain name[/title]

Initially you will be set up on an [tt]appspot.com[/tt] subdomain. You [url="may use your own domain"]https://developers.google.com/appengine/docs/domain[/url]. ocPortal is set up to automatically detect your base URL from the access URL, so you do not need to worry about any configuration within ocPortal. Make sure though that you stop using the [tt]appspot.com[/tt] URL fully after switching to your custom domain name.

If using SSL with your own custom domain, ocPortal's default configuration in [tt]_config.php[/tt] will assume that you want to serve uploaded data via that domain. To do that you need to setup [tt]storage.<domainname>[/tt] as per [url="Google's documentation on setting a CNAME record"]https://developers.google.com/storage/docs/reference-uris[/url].

[title="3"]Error pages[/title]

To enable a custom page for 404 errors, in [tt]app.yaml[/tt] uncomment (i.e. remove the [tt]#[/tt]s):
[code]
#- url: .*
#  script: 404.htm
[/code]
And then create [tt]404.htm[/tt] by saving out the result of [tt]/index.php?page=404[/tt]

This rule works because it's the last rule, run after no dynamic page has been found.

You could create a [tt]404.php[/tt] if you need it to be dynamic, but it's probably not a good idea. It is possible you could get a lot of 404 hits from old broken URLs, or bots, so you should make it a fast static page.

[title="2"]Notes to programmers / architects[/title]

The GAE API installs a version of PHP, but it does not have the limitations of the live version of PHP. Therefore be careful that you apply all the coding standards. In particular, ensure any custom files are written to using ocPortal's [tt]get_custom_file_base[/tt] function (which will be mapped to Google Cloud Storage).

If you are developing and don't have OcCLE working yet, the [url="PHP-minishell"]http://php-minishell.appspot.com/[/url] is quite useful.

Be aware that filesystem latency may be considerably higher on GAE, as Cloud Storage may not be in the same machine as the actual running application. One hopes that the machine will be at least in the same data centre, with a fast non-congested link, but be mindful that there are reports of ~10ms latency. The same issue applies to Google Cloud SQL. Try and keep the number of filesystem and database queries you do down.
It is also advisable to minimise the number of filesystem and database writes you make, as these have to replicate across each copy of your filesystem/database.

Be advised that Google cannot provide automated "sharding" of data. This means that if you have a huge volume of data (many 100s of GB), you may come across limits. For smaller quantities of data, you may still find that scaling isn't as fast as one would like, while the data is cloned out. The moral of this isn't that there is a problem hosting regular sites on GAE, but that if you are successful in creating a huge new web property, don't expect data to automatically scale without having a proper development team to re-architect your data model into shards. At a huge scale you will probably also want to move away from Google Cloud SQL.

[concepts
 1_key="Google App Engine"         1_value="Google's auto-scaling application-hosting service"
 2_key="Application Instance"      2_value="Your ocPortal-based application running on GAE"
 3_key="Google Cloud Storage"      3_value="Google's cloud filesystem service (actually, it is for non-structured data, but can simulate a filesystem)"
 4_key="Bucket"                    4_value="A configured cloud filesystem on Google Cloud Storage"
 5_key="Google Cloud SQL"          5_value="Google's cloud version of MySQL, automatically set up to replicate across multiple machines, for redundancy/performance"
 5_key="Google Cloud SQL instance" 5_value="A particular instance on Google Cloud SQL; within this instance you have one or more databases"
 6_key="GAE"                       6_value="Abbreviation of Google App Engine"
]Concepts[/concepts]

[title="2"]See also[/title]

 - [page="_SEARCH:tut_optimisation"]Optimising[/page]
 - [page="_SEARCH:tut_repository"]The Repository[/page]
