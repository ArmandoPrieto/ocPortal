<?php /*

 ocPortal
 Copyright (c) ocProducts, 2004-2012

 See text/EN/licence.txt for full licencing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/*

API interfaces with...
 Feedback system (calls 'render_as_comment_topic' method which knows about content types and content IDs)
  Or can be called standalone using topic IDs
 Forum driver system (which knows about topic_identifier's [a derivative of content types and content IDs] and plain topic IDs)

This API does not handle posting, although it can render a posting form. The feedback system and the ocf_forum addon handle posting separately.


The chat rooms and activity feeds are NOT topics, and not handled through this system.
The non-threaded ocf_forum view has its own rendering.

*/

class OCP_Topic
{
	var $all_posts_ordered=NULL;
	var $total_posts=NULL;
	var $is_threaded=NULL;
	var $topic_id=NULL;
	var $error=false;
	var $review_titles=array();

	/**
	 * Constructor.
	 */
	function OCP_Topic()
	{
		$this->set_review_titles(array(''));
	}

	/**
	 * Render a comment topic.
	 *
	 * @param  ID_TEXT		Content type to show topic for
	 * @param  ID_TEXT		Content ID of content type to show topic for
	 * @param  boolean		Whether this resource allows comments (if not, this function does nothing - but it's nice to move out this common logic into the shared function)
	 * @param  boolean		Whether the comment box will be invisible if there are not yet any comments (and you're not staff)
	 * @param  ?string		The name of the forum to use (NULL: default comment forum)
	 * @param  ?string		The default post to use (NULL: standard courtesy warning)
	 * @param  ?mixed			The raw comment array (NULL: lookup). This is useful if we want to pass it through a filter
	 * @param  boolean		Whether to skip permission checks
	 * @param  boolean		Whether to reverse the posts
	 * @param  ?MEMBER		User to highlight the posts of (NULL: none)
	 * @param  boolean		Whether to allow ratings along with the comment (like reviews)
	 * @return tempcode		The tempcode for the comment topic
	 */
	function render_as_comment_topic($content_type,$content_id,$allow_comments,$invisible_if_no_comments,$forum_name,$post_warning,$preloaded_comments,$explicit_allow,$reverse,$highlight_by_user,$allow_reviews)
	{
		$topic_id=$GLOBALS['FORUM_DRIVER']->find_topic_id_for_topic_identifier($forum_name,$content_type.'_'.$content_id);

		// Settings we need
		$max_thread_depth=get_param_integer('max_thread_depth',intval(get_option('max_thread_depth')));
		$num_to_show_limit=get_param_integer('max_comments',intval(get_option('comments_to_show_in_thread')));
		$start=get_param_integer('start_comments',0);

		// Load up posts from DB
		if (is_null($preloaded_comments))
		{
			if (!$this->load_from_topic($topic_id,$num_to_show_limit,$start,$reverse))
				attach_message(do_lang_tempcode('MISSING_FORUM',escape_html($forum_name)),'warn');
		} else
		{
			$this->_inject_posts_for_scoring_algorithm($preloaded_comments);
		}

		if (!$this->error)
		{
			if ((count($this->all_posts_ordered)==0) && ($invisible_if_no_comments))
				return new ocp_tempcode();

			require_javascript('javascript_ajax');
			require_javascript('javascript_more');
			require_javascript('javascript_thumbnails');

			// Prepare review titles
			$this->set_review_titles(array(''));

			// Load up reviews
			if ((get_forum_type()=='ocf') && ($allow_reviews))
			{
				$all_individual_review_ratings=$GLOBALS['SITE_DB']->query_select('review_supplement',array('*'),array('r_topic_id'=>$topic_id));
			} else
			{
				$all_individual_review_ratings=array();
			}

			$forum_id=$GLOBALS['FORUM_DRIVER']->forum_id_from_name($forum_name);

			// Posts
			$posts=$this->render_posts($num_to_show_limit,$max_thread_depth,$highlight_by_user,$all_individual_review_ratings,$forum_id);

			// Pagination
			$results_browser=NULL;
			if ((!$this->is_threaded) && (is_null($preloaded_comments)))
			{
				if ($this->total_posts>$num_to_show_limit)
				{
					require_code('templates_results_browser');
					$results_browser=results_browser(do_lang_tempcode('COMMENTS'),NULL,$start,'start_comments',$num_to_show_limit,'max_comments',$this->total_posts,NULL,NULL,true);
				}
			}

			// Environment meta data
			$this->inject_rss_url($forum_name,$content_type,$content_id);
			$this->inject_meta_data();

			// Make-a-comment form
			if (has_specific_permission(get_member(),'comment',get_page_name()))
			{
				$post_url=get_self_url();
				$form=$this->get_posting_form($content_type,$content_id,$allow_reviews,$post_url,$post_warning);
			} else
			{
				$form=new ocp_tempcode();
			}
			
			// Existing review ratings
			$review_titles=array();
			if ((get_forum_type()=='ocf') && ($allow_reviews))
			{
				foreach ($this->review_titles as $review_title)
				{
					$_rating=$GLOBALS['SITE_DB']->query_value('review_supplement','AVG(r_rating)',array('r_rating_type'=>$review_title,'r_topic_id'=>$topic_id));
					$rating=mixed();
					$rating=is_null($_rating)?NULL:$_rating;
					$review_titles[]=array('REVIEW_TITLE'=>$review_title,'REVIEW_RATING'=>make_string_tempcode(is_null($rating)?'':float_format($rating)));
					if (!is_null($rating))
					{
						$GLOBALS['META_DATA']+=array(
							'rating'=>float_to_raw_string($rating),
						);
					}
				}
			}

			// Direct links to forum
			$forum_url=$GLOBALS['FORUM_DRIVER']->topic_url($topic_id,$forum_name);
			if (($GLOBALS['FORUM_DRIVER']->is_staff(get_member())) || ($forum_name==get_option('comments_forum_name')))
			{
				$authorised_forum_url=$forum_url;
			} else
			{
				$authorised_forum_url='';
			}

			if (is_null($preloaded_comments))
			{
				$serialized_options=serialize(array($content_type,$content_id,$allow_comments,$invisible_if_no_comments,$forum_name,$post_warning,$explicit_allow,$reverse,$highlight_by_user,$allow_reviews));
				$hash=md5($serialized_options);
			} else
			{
				$serialized_options=mixed();
				$hash=mixed();
			}

			// Show it all
			return do_template('COMMENTS_WRAPPER',array(
				'_GUID'=>'a89cacb546157d34vv0994ef91b2e707',
				'RESULTS_BROWSER'=>$results_browser,
				'TYPE'=>$content_type,
				'ID'=>$content_id,
				'REVIEW_TITLES'=>$review_titles,
				'FORUM_LINK'=>$forum_url,
				'AUTHORISED_FORUM_LINK'=>$authorised_forum_url,
				'FORM'=>$form,
				'COMMENTS'=>$posts,
				'HASH'=>$hash,
				'SERIALIZED_OPTIONS'=>$serialized_options,
			));
		}
	}

	/**
	 * Render posts from a comment topic (usually tied into AJAX, to get iterative results).
	 *
	 * @param  ID_TEXT		Content type to show topic for
	 * @param  ID_TEXT		Content ID of content type to show topic for
	 * @param  boolean		Whether this resource allows comments (if not, this function does nothing - but it's nice to move out this common logic into the shared function)
	 * @param  boolean		Whether the comment box will be invisible if there are not yet any comments (and you're not staff)
	 * @param  ?string		The name of the forum to use (NULL: default comment forum)
	 * @param  ?string		The default post to use (NULL: standard courtesy warning)
	 * @param  ?mixed			The raw comment array (NULL: lookup). This is useful if we want to pass it through a filter
	 * @param  boolean		Whether to skip permission checks
	 * @param  boolean		Whether to reverse the posts
	 * @param  ?MEMBER		User to highlight the posts of (NULL: none)
	 * @param  boolean		Whether to allow ratings along with the comment (like reviews)
	 * @param  array			List of post IDs to load
	 * @param  AUTO_LINK		Parent node being loaded to
	 * @return tempcode		The tempcode for the comment topic
	 */
	function render_posts_from_comment_topic($content_type,$content_id,$allow_comments,$invisible_if_no_comments,$forum_name,$post_warning,$preloaded_comments,$explicit_allow,$reverse,$highlight_by_user,$allow_reviews,$posts,$parent_id)
	{
		$topic_id=$GLOBALS['FORUM_DRIVER']->find_topic_id_for_topic_identifier($forum_name,$content_type.'_'.$content_id);

		// Settings we need
		$max_thread_depth=intval(get_option('max_thread_depth'));
		$num_to_show_limit=NULL;
		$start=0;

		// Load up posts from DB
		if (!$this->load_from_topic($topic_id,$num_to_show_limit,$start,$reverse,$posts))
			attach_message(do_lang_tempcode('MISSING_FORUM',escape_html($forum_name)),'warn');

		if (!$this->error)
		{
			if ((count($this->all_posts_ordered)==0) && ($invisible_if_no_comments))
				return new ocp_tempcode();

			// Prepare review titles
			$this->set_review_titles(array(''));

			// Load up reviews
			if ((get_forum_type()=='ocf') && ($allow_reviews))
			{
				$all_individual_review_ratings=$GLOBALS['SITE_DB']->query_select('review_supplement',array('*'),array('r_topic_id'=>$topic_id));
			} else
			{
				$all_individual_review_ratings=array();
			}

			$forum_id=$GLOBALS['FORUM_DRIVER']->forum_id_from_name($forum_name);

			// Posts
			return $this->render_posts($num_to_show_limit,$max_thread_depth,$highlight_by_user,$all_individual_review_ratings,$forum_id,$parent_id,true);
		}
		
		return new ocp_tempcode();
	}

	/**
	 * Load from a given topic ID.
	 *
	 * @param  AUTO_LINK		Topic ID
	 * @param  integer		Maximum to load if non-threaded
	 * @param  integer		Pagination start if non-threaded
	 * @param  boolean		Whether to show in reverse date order
	 * @param  ?array			List of post IDs to load (NULL: no filter)
	 * @return boolean		Success status
	 */
	function load_from_topic($topic_id,$num_to_show_limit,$start=0,$reverse=false,$posts=NULL)
	{
		$this->topic_id=$topic_id;

		$this->is_threaded=$GLOBALS['FORUM_DRIVER']->topic_is_threaded($topic_id);

		$all_posts_ordered=array();

		$posts=$GLOBALS['FORUM_DRIVER']->get_forum_topic_posts(
			$topic_id,
			$this->total_posts,
			$this->is_threaded?5000:$num_to_show_limit,
			$this->is_threaded?0:$start,
			true,
			($reverse && !$this->is_threaded),
			true,
			$posts
		);

		if ($posts!==-1)
		{
			if ($posts===-2)
			{
				$posts=array();
			}
			$this->_inject_posts_for_scoring_algorithm($posts);
			
			return true;
		}

		$this->error=true;
		return false;
	}

	/**
	 * Put in posts to our scoring algorithm in preparation for shooting out later.
	 *
	 * @param  array			Review titles
	 */
	function _inject_posts_for_scoring_algorithm($posts)
	{
		$all_posts_ordered=array();
		foreach ($posts as $post)
		{
			if (is_null($post)) continue;

			if (!isset($post['parent_id'])) $post['parent_id']=NULL;

			$post_key='post_'.strval($post['id']);
			$all_posts_ordered[$post_key]=$post;
		}
		$this->all_posts_ordered=$all_posts_ordered;
	}

	/**
	 * Set the particular review titles (different criteria) we'll be dealing with.
	 *
	 * @param  array			Review titles
	 */
	function set_review_titles($review_titles)
	{
		$this->review_titles=$review_titles;
	}

	/**
	 * Render a topic.
	 *
	 * @param  ?integer		Number of posts to show initially (NULL: no limit)
	 * @param  integer		Maximum thread depth
	 * @param  ?MEMBER		User to highlight the posts of (NULL: none)
	 * @param  array			Review ratings rows
	 * @param  ?AUTO_LINK	Only show posts under here (NULL: show posts from root)
	 * @param  AUTO_LINK		ID of forum this topic in in
	 * @param  boolean		Whether to just render everything as flat (used when doing AJAX post loading)
	 * @return tempcode		Rendered topic
	 */
	function render_posts($num_to_show_limit,$max_thread_depth,$highlight_by_user,$all_individual_review_ratings,$forum_id,$parent_post_id=NULL,$maybe_missing_links=false)
	{
		require_code('feedback');

		$posts=array();
		$queue=$this->all_posts_ordered;
		if ((!is_null($parent_post_id)) && (!$maybe_missing_links))
			$queue=$this->_grab_at_and_underneath($parent_post_id,$queue);
		if (is_null($num_to_show_limit))
		{
			$posts=$queue;
			$queue=array();
		} else
		{
			$posts=$this->_decide_what_to_render($num_to_show_limit,$queue);
		}

		$posts=$this->_grab_full_post_details($posts);

		if ($maybe_missing_links)
		{
			$tree=array($posts,array());
		} else
		{
			$tree=$this->_arrange_posts_in_tree($parent_post_id,$posts,$queue,$max_thread_depth);
		}

		$ret=$this->_render_post_tree($tree,$highlight_by_user,$all_individual_review_ratings,$forum_id);

		$other_ids=mixed();
		if ($this->is_threaded)
		{
			$other_ids=array();
			foreach ($tree[1] as $u)
			{
				$other_ids[]=strval($u['id']);
			}
		}
		$ret->attach(do_template('POST_CHILD_LOAD_LINK',array('OTHER_IDS'=>$other_ids,'ID'=>'','CHILDREN'=>(count($other_ids)==0)?'':'1')));

		return $ret;
	}

	/**
	 * Filter posts, deciding what to render.
	 *
	 * @param  integer		Number of posts to show initially
	 * @param  array			Posts to choose from, in preference order
	 * @return array			Chosen posts
	 */
	function _decide_what_to_render($num_to_show_limit,&$queue)
	{
		$posts=array();
		while ((count($posts)<$num_to_show_limit) && (count($queue)!=0))
		{
			$next=reset($queue);

			$post_id=$next['id'];
			$this->_grab_at_and_above_and_remove($post_id,$queue,$posts);
		}
		return $posts;
	}

	/**
	 * Grab posts at or above a reference post and remove from queue.
	 *
	 * @param  AUTO_LINK		Reference post in thread
	 * @param  array			Posts to choose from (the queue)
	 * @param  array			Posts picked out (passed by reference)
	 */
	function _grab_at_and_above_and_remove($post_id,&$queue,&$posts)
	{
		if ((!isset($posts[$post_id])) && (isset($queue['post_'.strval($post_id)])))
		{
			$grabbed=$queue['post_'.strval($post_id)];
			$posts['post_'.strval($post_id)]=$grabbed;
			unset($queue['post_'.strval($post_id)]);
			$parent=$grabbed['parent_id'];
			if (!is_null($parent))
			{
				$this->_grab_at_and_above_and_remove($parent,$queue,$posts);
			}
		}
	}

	/**
	 * Grab posts at or underneath a reference post.
	 *
	 * @param  AUTO_LINK		Reference post in thread
	 * @param  array			Posts to choose from
	 * @return array			Relevant posts
	 */
	function _grab_at_and_underneath($parent_post_id,$posts_in)
	{
		$posts_out=array();

		if (isset($posts_in['post_'.strval($parent_post_id)]))
		{
			$grabbed=$posts_in['post_'.strval($parent_post_id)];
			$posts_out['post_'.strval($parent_post_id)]=$grabbed;
		}

		// Underneath
		foreach ($posts_in as $x)
		{
			if ($x['parent_id']==$parent_post_id)
			{
				$underneath=$this->_grab_at_and_underneath($x['id'],$posts_in);
				foreach ($underneath as $id=>$y)
				{
					$posts_out['post_'.strval($id)]=$y;
				}
			}
		}
		
		return $posts_out;
	}

	/**
	 * Load full details for posts (we had not done so far to preserve memory).
	 *
	 * @param  array			Posts to load
	 * @return array			Upgraded posts
	 */
	function _grab_full_post_details($posts)
	{
		$id_list=array();
		foreach ($posts as $p)
		{
			if (!isset($p['post'])) $id_list[]=$p['id'];
		}
		$posts_extended=list_to_map('id',$GLOBALS['FORUM_DRIVER']->get_post_remaining_details($this->topic_id,$id_list));
		foreach ($posts as $i=>$p)
		{
			if (isset($posts_extended[$p['id']]))
			{
				$posts[$i]+=$posts_extended[$p['id']];
			}
		}
		return $posts;
	}

	/**
	 * Arrange posts underneath a post in the thread (not including the post itself).
	 *
	 * @param  ?AUTO_LINK	Reference post in thread (NULL: root)
	 * @param  array			Posts we will be rendering and have not arranged yet (only some of which will be underneath $post_id)
	 * @param  array			Posts we won't be rendering
	 * @param  integer		Maximum depth to render to
	 * @param  integer		Current depth in recursion
	 * @return array			Array structure of rendered posts
	 */
	function _arrange_posts_in_tree($post_id,$posts,$queue,$max_thread_depth,$depth=0)
	{
		$rendered=array();
		$non_rendered=array();

		foreach ($posts as $i=>$p)
		{
			if ($p['parent_id']===$post_id)
			{
				unset($posts[$i]);

				$children=$this->_arrange_posts_in_tree($p['id'],$posts,$queue,$max_thread_depth,$depth+1);

				if ($depth+1>=$max_thread_depth) // Ones that are too deep need flattening down with post Comcode
				{
					foreach ($children[0] as $j=>$c)
					{
						$c['post']='[quote="'.comcode_escape($p['username']).'"]'.$p['message_comcode'].'[/quote]'."\n\n".$c['message_comcode'];
						$new=do_template('COMCODE_QUOTE_BY',array('SAIDLESS'=>false,'BY'=>$p['username'],'CONTENT'=>$p['message']));
						$new->attach($c['message']);
						$c['message']=$new;
						$c['parent_id']=$p['parent_id'];
						$children[0][$j]=$c;
					}

					$p['children']=array(array(),array());
					$rendered[]=$p;
					$rendered=array_merge($rendered,$children[0]);
					$non_rendered=array_merge($non_rendered,$children[1]);
				} else
				{
					$p['children']=$children;
					$rendered[]=$p;
				}
			}
		}

		foreach ($queue as $i=>$p)
		{
			unset($queue[$i]);
			
			if ($p['parent_id']===$post_id)
			{
				$non_rendered[]=$p;
			}
		}

		return array($rendered,$non_rendered);
	}

	/**
	 * Render posts.
	 *
	 * @param  array			Tree structure of posts
	 * @param  ?AUTO_LINK	Only show posts under here (NULL: show posts from root)
	 * @param  array			Review ratings rows
	 * @param  AUTO_LINK		ID of forum this topic in in
	 * @return array			Rendered tree structure
	 */
	function _render_post_tree($tree,$highlight_by_user,$all_individual_review_ratings,$forum_id)
	{
		list($rendered,)=$tree;
		$sequence=new ocp_tempcode();
		foreach ($rendered as $post)
		{
			// Misc details
			$datetime_raw=$post['date'];
			$datetime=get_timezoned_date($post['date']);
			$poster_link=is_guest($post['user'])?new ocp_tempcode():$GLOBALS['FORUM_DRIVER']->member_profile_url($post['user'],false,true);
			$poster_name=array_key_exists('username',$post)?$post['username']:$GLOBALS['FORUM_DRIVER']->get_username($post['user']);
			if (is_null($poster_name)) $poster_name=do_lang('UNKNOWN');
			$highlight=($highlight_by_user===$post['user']);

			// Find review, if there is one
			$individual_review_ratings=array();
			foreach ($all_individual_review_ratings as $potential_individual_review_rating)
			{
				if ($potential_individual_review_rating['r_post_id']==$post['id'])
				{
					$individual_review_ratings[$potential_individual_review_rating['r_rating_type']]=array(
						'REVIEW_TITLE'=>$potential_individual_review_rating['r_rating_type'],
						'REVIEW_RATING'=>float_to_raw_string($potential_individual_review_rating['r_rating']),
					);
				}
			}

			// Edit URL
			$edit_post_url=new ocp_tempcode();
			require_code('ocf_posts');
			if ((get_forum_type()=='ocf') && (ocf_may_edit_post_by($post['user'],$forum_id)))
			{
				$edit_post_url=build_url(array('page'=>'topics','type'=>'edit_post','id'=>$post['id'],'redirect'=>get_self_url(true)),get_module_zone('topics'));
			}

			// Child posts
			$children=mixed(); // NULL
			$other_ids=array();
			if (array_key_exists('children',$post))
			{
				foreach ($post['children'][1] as $u)
				{
					$other_ids[]=strval($u['id']);
				}
				if ($this->is_threaded)
				{
					$children=$this->_render_post_tree($post['children'],$highlight_by_user,$all_individual_review_ratings,$forum_id);
				}
			}

			require_code('feedback');
			actualise_rating(true,'post',strval($post['id']),get_self_url(),$post['title']);
			$rating=display_rating(get_self_url(),$post['title'],'post',strval($post['id']),'RATING_INLINE_DYNAMIC');

			// Render
			$sequence->attach(do_template('POST',array(
				'_GUID'=>'eb7df038959885414e32f58e9f0f9f39',
				'POSTER_ID'=>strval($post['user']),
				'EDIT_URL'=>$edit_post_url,
				'INDIVIDUAL_REVIEW_RATINGS'=>$individual_review_ratings,
				'HIGHLIGHT'=>$highlight,
				'TITLE'=>$post['title'],
				'TIME_RAW'=>strval($datetime_raw),
				'TIME'=>$datetime,
				'POSTER_LINK'=>$poster_link,
				'POSTER_NAME'=>$poster_name,
				'ID'=>strval($post['id']),
				'POST'=>$post['message'],
				'POST_COMCODE'=>isset($post['message_comcode'])?$post['message_comcode']:NULL,
				'CHILDREN'=>$children,
				'OTHER_IDS'=>(count($other_ids)==0)?NULL:$other_ids,
				'RATING'=>$rating,
			)));
		}

		return $sequence;
	}

	/**
	 * Put comments RSS link into environment.
	 *
	 * @param  ID_TEXT		The forum we are working in
	 * @param  ID_TEXT		The content type the comments are for
	 * @param  ID_TEXT		The content ID the comments are for
	 */
	function inject_rss_url($forum,$type,$id)
	{
		$GLOBALS['FEED_URL_2']=find_script('backend').'?mode=comments&forum='.urlencode($forum).'&filter='.urlencode($type.'_'.$id);
	}

	/**
	 * Put posts count into environment.
	 */
	function inject_meta_data()
	{
		$GLOBALS['META_DATA']+=array(
			'numcomments'=>strval(count($this->all_posts_ordered)),
		);
	}

	/**
	 * Get a form for posting.
	 *
	 * @param  ID_TEXT		The content type of what this posting will be for
	 * @param  ID_TEXT		The content ID of what this posting will be for
	 * @param  boolean		Whether to accept reviews
	 * @param  tempcode		URL where form submit will go
	 * @param  ?string		The default post to use (NULL: standard courtesy warning)
	 * @return tempcode		Posting form
	 */
	function get_posting_form($type,$id,$allow_reviews,$post_url,$post_warning)
	{
		require_lang('comcode');

		require_javascript('javascript_editing');
		require_javascript('javascript_validation');

		$em=$GLOBALS['FORUM_DRIVER']->get_emoticon_chooser();

		$comcode_help=build_url(array('page'=>'userguide_comcode'),get_comcode_zone('userguide_comcode',false));

		$comment_text=get_option('comment_text');

		if (is_null($post_warning)) $post_warning=do_lang('POST_WARNING');

		if (addon_installed('captcha'))
		{
			require_code('captcha');
			$use_captcha=use_captcha();
			if ($use_captcha)
			{
				generate_captcha();
			}
		} else $use_captcha=false;

		$title=do_lang_tempcode($allow_reviews?'POST_REVIEW':'MAKE_COMMENT');

		$join_bits=new ocp_tempcode();
		if (is_guest())
		{
			$redirect=get_self_url(true,true);
			$login_url=build_url(array('page'=>'login','type'=>'misc','redirect'=>$redirect),get_module_zone('login'));
			$join_url=$GLOBALS['FORUM_DRIVER']->join_url();
			$join_bits=do_template('JOIN_OR_LOGIN',array('LOGIN_URL'=>$login_url,'JOIN_URL'=>$join_url));
		}

		$review_titles=array();
		foreach ($this->review_titles as $review_title)
		{
			$review_titles[]=array(
				'REVIEW_TITLE'=>$review_title,
			);
		}

		return do_template('COMMENTS_POSTING_FORM',array(
			'_GUID'=>'c87025f81ee64c885f0ac545efa5f16c',
			'EXPAND_TYPE'=>'contract',
			'FIRST_POST_URL'=>'',
			'FIRST_POST'=>'',
			'JOIN_BITS'=>$join_bits,
			'REVIEWS'=>$allow_reviews,
			'TYPE'=>$type,
			'ID'=>$id,
			'REVIEW_TITLES'=>$review_titles,
			'USE_CAPTCHA'=>$use_captcha,
			'GET_EMAIL'=>false,
			'EMAIL_OPTIONAL'=>true,
			'GET_TITLE'=>true,
			'POST_WARNING'=>$post_warning,
			'COMMENT_TEXT'=>$comment_text,
			'EM'=>$em,
			'DISPLAY'=>'block',
			'COMMENT_URL'=>$post_url,
			'TITLE'=>$title,
		));
	}
}
