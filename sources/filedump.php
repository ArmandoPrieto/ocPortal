<?php /*

 ocPortal
 Copyright (c) ocProducts, 2004-2014

 See text/EN/licence.txt for full licencing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license		http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright	ocProducts Ltd
 * @package		filedump
 */

/**
 * Find broken filedump links, and try and find how to fix it.
 *
 * @return array		Filedump broken links, to replacement URL (or NULL).
 */
function find_broken_filedump_links()
{
	$urls_broken=array();

	require_code('files2');
	$all_files=get_directory_contents(get_custom_file_base().'/uploads/filedump','',false,true);

	$urls_used=find_filedump_links();
	foreach ($urls_used as $url=>$details)
	{
		if (!$details['exists'])
		{
			foreach ($all_files as $file)
			{
				if (basename(rawurldecode($file))==basename($url))
				{
					$urls_broken[$url]='/'.$file;
					continue 2;
				}
			}
			$urls_broken[$url]=NULL;
		}
	}

	return $urls_broken;
}

/**
 * Re-map pre-existing filedump links from one URL to another.
 *
 * @param  string		Old path (give a path relative to uploads/filedump, with leading slash)
 * @param  string		New path (give a path relative to uploads/filedump, with leading slash)
 */
function update_filedump_links($from,$to)
{
	if ($to=='') warn_exit(do_lang_tempcode('INTERNAL_ERROR'));
	if (substr($to,0,1)!='/') $to='/'.$to;

	$from=str_replace('%2F','/',urlencode($from));
	$to=str_replace('%2F','/',urlencode($to));

	$current=find_filedump_links($from);

	$patterns=array(
		'#"uploads/filedump('.preg_quote($from,'#').')"#'=>'"uploads/filedump'.$to.'"',
		'#\]uploads/filedump('.preg_quote($from,'#').')\[#'=>']uploads/filedump'.$to.'[',
		'#\]url_uploads/filedump('.preg_quote($from,'#').')\[#'=>']url_uploads/filedump'.$to.'[',
	);

	foreach ($current as $details)
	{
		foreach ($details['references'] as $ref)
		{
			if (is_numeric($ref))
			{
				$old_comcode=get_translated_text(intval($ref));
			} else
			{
				list($zone,$page,$lang)=explode(':'.$ref,3);
				$path=get_custom_file_base().'/'.$zone.'/pages/comcode_custom/'.$lang.'/'.$page.'.txt';
				$old_comcode=file_get_contents($path);
			}

			$new_comcode=$old_comcode;
			foreach ($patterns as $pattern_from=>$pattern_to)
			{
				$new_comcode=preg_replace($pattern_from,$pattern_to,$new_comcode);
			}

			if (is_numeric($ref))
			{
				lang_remap(intval($ref),$new_comcode);
			} else
			{
				file_put_contents($path,$new_comcode);
			}
		}
	}
}

/**
 * Find all filedump links used.
 *
 * @param  string		Focus on a particular filedump file (give a path relative to uploads/filedump, with leading slash) (blank: no filter)
 * @return array		Filedump links used, and where
 */
function find_filedump_links($focus='')
{
	$urls_used=array();

	$_focus=str_replace('%2F','/',urlencode($focus));

	// Comcode
	$query='SELECT id,text_original FROM '.get_table_prefix().'translate WHERE';
	$query.=' MATCH(text_original) AGAINST (\'filedump\')';
	if ($focus=='')
	{
		$query.=' AND text_original LIKE \''.db_encode_like('%uploads/filedump/%').'\'';
	} else
	{
		$query.=' AND text_original LIKE \''.db_encode_like('%uploads/filedump'.$_focus.'%').'\'';
	}
	$results=$GLOBALS['SITE_DB']->query($query);
	foreach ($results as $r)
	{
		extract_filedump_links($r['text_original'],strval($r['id']),$focus,$urls_used);
	}

	// Comcode pages
	$zones=find_all_zones(false,false,true);
	$langs=array_keys(find_all_langs());
	foreach ($zones as $zone)
	{
		$pages=find_all_pages_wrap($zone,false,false,FIND_ALL_PAGES__ALL,'comcode');
		foreach ($pages as $page=>$page_type)
		{
			if (is_integer($page)) $page=strval($page);
			foreach ($langs as $lang)
			{
				$path=get_custom_file_base().'/'.$zone.'/pages/comcode_custom/'.$lang.'/'.$page.'.txt';
				if (is_file($path))
				{
					$comcode=file_get_contents($path);
					extract_filedump_links($comcode,$zone.':'.$page.':'.$lang,$focus,$urls_used);
				}
			}
		}
	}

	return $urls_used;
}

/**
 * Find filedump links within some Comcode (an approximation).
 *
 * @param  string		Comcode to scan
 * @param  ID_TEXT	An identifier for where this Comcode was from
 * @param  string		Focus on a particular filedump file (give a path relative to uploads/filedump), with leading slash (blank: no filter)
 * @param  array		URLs found (passed by reference)
 */
function extract_filedump_links($comcode,$identifier,$focus,&$urls_used)
{
	$_focus=str_replace('%2F','/',urlencode($focus));

	static $patterns=NULL;
	if ($patterns===NULL)
	{
		if ($focus=='')
		{
			$patterns=array(
				'#"uploads/filedump(/[^"]+)"#',
				'#\]uploads/filedump(/[^\[\]]+)\[#',
				'#\]url_uploads/filedump(/[^\[\]]+)\[#',
			);
		} else
		{
			$patterns=array(
				'#"uploads/filedump('.preg_quote($_focus,'#').')"#',
				'#\]uploads/filedump('.preg_quote($_focus,'#').')\[#',
				'#\]url_uploads/filedump('.preg_quote($_focus,'#').')\[#',
			);
		}
	}

	foreach ($patterns as $pattern)
	{
		$matches=array();
		$num_matches=preg_match_all($pattern,$comcode,$matches);
		for ($i=0;$i<$num_matches;$i++)
		{
			$decoded=html_entity_decode($matches[1][$i],ENT_QUOTES,get_charset()); // This is imperfect (raw naming that coincidentally matches entity encoding will break), but good enough

			$path=get_custom_file_base().'/uploads/filedump'.urldecode($decoded);

			if (!isset($urls_used[$decoded]))
			{
				$urls_used[$decoded]=array(
					'exists'=>is_file($path),
					'references'=>array(),
				);
			}

			if (!in_array($identifier,$urls_used[$decoded]['references']))
				$urls_used[$decoded]['references'][]=$identifier;
		}
	}
}
