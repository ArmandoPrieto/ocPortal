<?php /*

 ocPortal
 Copyright (c) ocProducts, 2004-2013

 See text/EN/licence.txt for full licencing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license		http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright	ocProducts Ltd
 * @package		core
 */

/**
 * Find whether to run in multi-lang mode.
 *
 * @return boolean		Whether to run in multi-lang mode.
 */
function _multi_lang()
{
	global $MULTI_LANG_CACHE;

	$_dir=opendir(get_file_base().'/lang/');
	$_langs=array();
	while (false!==($file=readdir($_dir)))
	{
		if (($file!=fallback_lang()) && ($file[0]!='.') && ($file[0]!='_') && ($file!='index.html') && ($file!='langs.ini') && ($file!='map.ini'))
		{
			if (is_dir(get_file_base().'/lang/'.$file)) $_langs[$file]='lang';
		}
	}
	closedir($_dir);
	if (!in_safe_mode())
	{
		$_dir=@opendir(get_custom_file_base().'/lang_custom/');
		if ($_dir!==false)
		{
			while (false!==($file=readdir($_dir)))
			{
				if (($file!=fallback_lang()) && ($file[0]!='.') && ($file[0]!='_') && ($file!='index.html') && ($file!='langs.ini') && ($file!='map.ini') && (!isset($_langs[$file])))
				{
					if (is_dir(get_custom_file_base().'/lang_custom/'.$file)) $_langs[$file]='lang_custom';
				}
			}
			closedir($_dir);
		}
		if (get_custom_file_base()!=get_file_base())
		{
			$_dir=opendir(get_file_base().'/lang_custom/');
			while (false!==($file=readdir($_dir)))
			{
				if (($file!=fallback_lang()) && ($file[0]!='.') && ($file[0]!='_') && ($file!='index.html') && ($file!='langs.ini') && ($file!='map.ini') && (!isset($_langs[$file])))
				{
					if (is_dir(get_file_base().'/lang_custom/'.$file)) $_langs[$file]='lang_custom';
				}
			}
			closedir($_dir);
		}
	}	

	foreach ($_langs as $lang=>$dir)
	{
		if (/*optimisation*/is_file((($dir=='lang_custom')?get_custom_file_base():get_file_base()).'/'.$dir.'/'.$lang.'/global.ini'))
		{
			$MULTI_LANG_CACHE=true;
			break;
		}

		$_dir2=@opendir((($dir=='lang_custom')?get_custom_file_base():get_file_base()).'/'.$dir.'/'.$lang);
		if ($_dir2!==false)
		{
			while (false!==($file2=readdir($_dir2)))
			{
				if ((substr($file2,-4)=='.ini') || (substr($file2,-3)=='.po'))
				{
					$MULTI_LANG_CACHE=true;
					break;
				}
			}
		}
	}

	return $MULTI_LANG_CACHE;
}

/**
 * Get the default value of a config option.
 *
 * @param  array			The option row from the database
 * @param  ID_TEXT		The type of the option
 * @param  ID_TEXT		The name of the option
 * @return SHORT_TEXT	The value
 */
function _get_default_option($option,$type,$name)
{
	global $GET_OPTION_LOOP;

	if (($type=='transline') || ($type=='transtext'))
	{
		if (defined('HIPHOP_PHP'))
		{
			require_code('hooks/systems/config_default/'.$name);
			$hook=object_factory('Hook_config_default_'.$name);
			$option['config_value_translated']=$hook->get_default();
		} else
		{
			if (!isset($option['eval']))
			{
				global $SITE_INFO;
				$CONFIG_OPTIONS_CACHE=$GLOBALS['SITE_DB']->query_select('config c LEFT JOIN '.$GLOBALS['SITE_DB']->get_table_prefix().'translate t ON (c.config_value=t.id AND '.db_string_equal_to('t.language',array_key_exists('default_lang',$SITE_INFO)?$SITE_INFO['default_lang']:'EN').' AND ('.db_string_equal_to('c.the_type','transtext').' OR '.db_string_equal_to('c.the_type','transline').'))',array('c.the_name','c.config_value','c.eval','c.the_type','c.c_set','t.text_original AS config_value_translated'),array(),'');
				$CONFIG_OPTIONS_CACHE=list_to_map('the_name',$CONFIG_OPTIONS_CACHE);
				$option=&$CONFIG_OPTIONS_CACHE[$name];
			}
			$option['config_value_translated']=eval($option['eval'].';');
			if (is_object($option['config_value_translated'])) $option['config_value_translated']=$option['config_value_translated']->evaluate();
			if ((get_value('setupwizard_completed')==='1') && ($option['config_value_translated']!==NULL)/*Don't save a NULL, means it is unreferencable yet rather than an actual value*/)
			{
				require_code('config2');
				set_option($name,$option['config_value_translated']);
			}
		}
		if (is_object($option['config_value_translated'])) $option['config_value_translated']=$option['config_value_translated']->evaluate();
		$GET_OPTION_LOOP=0;
		return $option['config_value_translated'];
	}
	if (defined('HIPHOP_PHP'))
	{
		require_code('hooks/systems/config_default/'.$name);
		$hook=object_factory('Hook_config_default_'.$name);
		$option['config_value']=$hook->get_default();
	} else
	{
		if (!isset($option['eval']))
		{
			global $SITE_INFO;
			$CONFIG_OPTIONS_CACHE=$GLOBALS['SITE_DB']->query_select('config c LEFT JOIN '.$GLOBALS['SITE_DB']->get_table_prefix().'translate t ON (c.config_value=t.id AND '.db_string_equal_to('t.language',array_key_exists('default_lang',$SITE_INFO)?$SITE_INFO['default_lang']:'EN').' AND ('.db_string_equal_to('c.the_type','transtext').' OR '.db_string_equal_to('c.the_type','transline').'))',array('c.the_name','c.config_value','c.eval','c.the_type','c.c_set','t.text_original AS config_value_translated'),array(),'');
			$CONFIG_OPTIONS_CACHE=list_to_map('the_name',$CONFIG_OPTIONS_CACHE);
			$option=&$CONFIG_OPTIONS_CACHE[$name];
		}
		if ((function_exists('do_lang')) || (strpos($option['eval'],'lang')===false)) // Something in set_option may need do_lang
		{
			$option['config_value']=eval($option['eval'].';');
			if ((get_value('setupwizard_completed')==='1') && (isset($option['config_value_translated']))/*Don't save a NULL, means it is unreferencable yet rather than an actual value*/)
			{
				require_code('config2');
				set_option($name,$option['config_value']);
			}
		}
	}
	if (is_object($option['config_value'])) $option['config_value']=$option['config_value']->evaluate(); elseif (is_integer($option['config_value'])) $option['config_value']=strval($option['config_value']);

	$GET_OPTION_LOOP=0;
	$option['c_set']=1;
	return $option['config_value'];
}

/**
 * An option has dissappeared somehow - find it via searching our code-base for it's install code. It doesn't get returned, just loaded up. This function will produce a fatal error if we cannot find it.
 *
 * @param  ID_TEXT		The name of the value
 */
function find_lost_option($name)
{
	global $CONFIG_OPTIONS_CACHE;

	// In the dark dark past, we'd bomb out...
	if ((function_exists('find_all_zones')) && (!defined('HIPHOP_PHP')))
	{
		// However times are pleasant, the grass is green, the sun high is the summer sky. Let's perform some voodoo magic...
		$all_zones=find_all_zones();
		$search=array();
		$types=array('modules_custom','modules');
		foreach ($all_zones as $zone)
		{
			foreach ($types as $type)
			{
				$pages=find_all_pages($zone,$type);
				foreach ($pages as $page=>$type2)
				{
					$search[]=zone_black_magic_filterer(get_file_base().'/'.$zone.(($zone!='')?'/':'').'pages/'.$type2.'/'.$page.'.php');
				}
			}
		}
		require_code('zones2');
		require_code('zones3');
		$all_blocks=find_all_blocks();
		foreach ($all_blocks as $block=>$type)
		{
			$search[]=get_file_base().'/'.$type.'/blocks/'.$block.'.php';
		}
		if (file_exists(get_file_base().'/sources_custom/ocf_install.php'))
			$search[]=get_file_base().'/sources_custom/ocf_install.php';
		$search[]=get_file_base().'/sources/ocf_install.php';

		$matches=array();
		foreach ($search as $s)
		{
			$code=file_get_contents($s);
			if (preg_match('#add_config_option\(\'\w+\',\''.preg_quote($name,'#').'\',\'\w+\',\'.+\',\'\w+\',\'\w+\'(,1)?\);#',$code,$matches)>0)
			{
				require_code('database_action');
				$upgrade_from=NULL; // In case referenced in add_config_option line
				eval($matches[0]);

				// We could put out a message, but no need to scare people
				//	attach_message(do_lang_tempcode('CONFIG_OPTION_FETCHED',escape_html($name)),'warn');	 CONFIG_OPTION_FETCHED=A config option ({1}) was missing, but has been hunted down and installed. This is an unexpected inconsistency, please refresh the page, and hopefully it has been permanently corrected.

				load_options();
				break;
			}
		}
	}
	if (!array_key_exists($name,$CONFIG_OPTIONS_CACHE)) fatal_exit(do_lang_tempcode('_MISSING_OPTION',escape_html($name)));
}

/**
 * Set a configuration option with the specified values.
 *
 * @param  ID_TEXT		The name of the value
 * @param  LONG_TEXT		The value
 * @param  ?ID_TEXT		The type of the option. This is normally ommited, but to save a DB lookup, may be passed through (NULL: work out the type)
 * @set    float integer tick line text transline transtext list date forum forum_grouping usergroup
 * @param  ?LONG_TEXT	The current value of the config option (NULL: unknown). This is just for efficiency for remapping language config options.
 */
function set_option($name,$value,$type=NULL,$current_value=NULL)
{
	global $CONFIG_OPTIONS_CACHE;

	if (is_null($type))
	{
		global $GET_OPTION_LOOP;
		if ($GET_OPTION_LOOP!=1)
			get_option($name); // Ensure it's installed

		$type=$CONFIG_OPTIONS_CACHE[$name]['the_type']; //$type=$GLOBALS['SITE_DB']->query_select_value('config','the_type',array('the_name'=>$name));
	}

	if (($type=='transline') || ($type=='transtext'))
	{
//		$current_value=$GLOBALS['SITE_DB']->query_select_value('config','config_value',array('the_name'=>$name));

		if ((array_key_exists('c_set',$CONFIG_OPTIONS_CACHE[$name])) && ($CONFIG_OPTIONS_CACHE[$name]['c_set']==0))
		{
			$GLOBALS['SITE_DB']->query_update('config',array('config_value'=>strval(insert_lang($value,1)),'c_set'=>1),array('the_name'=>$name),'',1);
		} else
		{
			$current_value=$CONFIG_OPTIONS_CACHE[$name]['config_value'];
			if (!is_null($current_value)) // Should never happen, but might during upgrading
				lang_remap(intval($current_value),$value);
		}
	} else
	{
		$map=array('config_value'=>$value);
		if (array_key_exists('c_set',$CONFIG_OPTIONS_CACHE[$name])) $map['c_set']=1;
		$GLOBALS['SITE_DB']->query_update('config',$map,array('the_name'=>$name),'',1);

		$CONFIG_OPTIONS_CACHE[$name]['config_value']=$value;
	}

	$CONFIG_OPTIONS_CACHE[$name]['config_value_translated']=$value;

	if (function_exists('log_it'))
	{
		require_lang('config');
		log_it('CONFIGURATION',$name,$value);
	}

	if (function_exists('persistent_cache_delete'))
		persistent_cache_delete('OPTIONS');
}
