<?php /*

 ocPortal
 Copyright (c) ocProducts, 2004-2011

 See text/EN/licence.txt for full licencing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license		http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright	ocProducts Ltd
 * @package		catalogues
 */

class Hook_catalogue_field_picture
{

	// ==============
	// Module: search
	// ==============

	/**
	 * Get special Tempcode for inputting this field.
	 *
	 * @param  array			The row for the field to input
	 * @return ?array			List of specially encoded input detail rows (NULL: nothing special)
	 */
	function get_search_inputter($row)
	{
		return NULL;
	}

	/**
	 * Get special SQL from POSTed parameters for this field.
	 *
	 * @param  array			The row for the field to input
	 * @param  integer		We're processing for the ith row
	 * @return ?array			Tuple of SQL details (array: extra trans fields to search, array: extra plain fields to search, string: an extra table segment for a join, string: the name of the field to use as a title, if this is the title, extra WHERE clause stuff) (NULL: nothing special)
	 */
	function inputted_to_sql_for_search($row,$i)
	{
		return NULL;
	}

	// ===================
	// Backend: catalogues
	// ===================

	/**
	 * Get some info bits relating to our field type, that helps us look it up / set defaults.
	 *
	 * @param  AUTO_LINK		The field ID
	 * @param  ?boolean		Whether the row is required (NULL: don't try and find a default value)
	 * @param  ?string		The given default value (NULL: don't try and find a default value)
	 * @return array			Tuple of details (row-type,default-value-to-use,db row-type)
	 */
	function get_field_value_row_bits($cf_id,$required=NULL,$default=NULL)
	{
		unset($cf_id);
		/*if (!is_null($required))
		{
			Nothing special for this hook
		}*/
		return array('short_unescaped',$default,'short');
	}

	/**
	 * Convert a field value to something renderable.
	 *
	 * @param  mixed			The raw value
	 * @param  ID_TEXT		The catalogue this is going into
	 * @param  integer		The sequence number
	 * @param  ?array			A list of fields that we are limiting ourselves to (NULL: get ALL fields)
	 * @return mixed			Rendered field (tempcode or string)
	 */
	function render_field_value($ev,$catalogue_name,$i,$only_fields)
	{
		if (is_object($ev)) return $ev;

		if ($ev=='') return '';
		
		$img_url=$ev;
		if (url_is_local($img_url)) $img_url=get_custom_base_url().'/'.$img_url;
		if ((get_option('is_on_gd')=='0') || (!function_exists('imagetypes')))
		{
			$img_thumb_url=$img_url;
		} else
		{
			$new_name=url_to_filename($ev);
			require_code('images');
			if (!is_saveable_image($new_name)) $new_name.='.png';
			$file_thumb=get_custom_file_base().'/uploads/auto_thumbs/'.$new_name;
			if (!file_exists($file_thumb))
			{
				convert_image($img_url,$file_thumb,-1,-1,intval(get_option('thumb_width')),false);
			}
			$img_thumb_url=get_custom_base_url().'/uploads/auto_thumbs/'.rawurlencode($new_name);
		}
		$tpl_set=$catalogue_name;

		$GLOBALS['META_DATA']+=array(
			'image'=>$img_url,
		);

		return do_template('CATALOGUE_'.$tpl_set.'_ENTRY_FIELD_PICTURE',array('I'=>is_null($only_fields)?'-1':strval($i),'CATALOGUE'=>$catalogue_name,'URL'=>$img_url,'THUMB_URL'=>$img_thumb_url),NULL,false,'CATALOGUE_DEFAULT_ENTRY_FIELD_PICTURE');
	}

	// ======================
	// Module: cms_catalogues
	// ======================

	/**
	 * Convert a field value to something renderable.
	 *
	 * @param  string			The field name
	 * @param  string			The field description
	 * @param  array			The field details
	 * @param  ?string		The actual current value of the field (NULL: none)
	 * @param  boolean		Whether this is for a new entry
	 * @return ?array			A pair: The Tempcode for the input field, Tempcode for hidden fields (NULL: skip the field - it's not input)
	 */
	function get_field_inputter($_cf_name,$_cf_description,$field,$actual_value,$new)
	{
		$say_required=($field['cf_required']==1) && (($actual_value=='') || (is_null($actual_value)));
		$ffield=form_input_upload($_cf_name,$_cf_description,'field_'.strval($field['id']),$say_required,($field['cf_required']==1)?NULL/*so unlink option not shown*/:$actual_value);

		$hidden=new ocp_tempcode();
		handle_max_file_size($hidden,'image');
		
		return array($ffield,$hidden);
	}

	/**
	 * Find the posted value from the get_field_inputter field
	 *
	 * @param  boolean		Whether we were editing (because on edit, files might need deleting)
	 * @param  AUTO_LINK		The ID of the catalogue field
	 * @return string			The value
	 */
	function inputted_to_field_value($editing,$id)
	{
		$tmp_name='field_'.strval($id);
		if (!fractional_edit())
		{
			require_code('uploads');
			$temp=get_url('',$tmp_name,'uploads/catalogues',0,OCP_UPLOAD_IMAGE);
			$value=$temp[0];
			if (($editing) && ($value=='') && (post_param_integer($tmp_name.'_unlink',0)!=1))
				return STRING_MAGIC_NULL;
		} else
		{
			$value=STRING_MAGIC_NULL;
		}
		return $value;
	}

}


