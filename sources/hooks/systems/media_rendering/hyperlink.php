<?php /*

 ocPortal
 Copyright (c) ocProducts, 2004-2013

 See text/EN/licence.txt for full licencing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license		http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright	ocProducts Ltd
 * @package		core_rich_media
 */

class Hook_media_rendering_hyperlink
{
	/**
	 * Find the media type this hook serves.
	 *
	 * @return integer	The media type
	 */
	function get_media_type()
	{
		return MEDIA_TYPE_OTHER;
	}

	/**
	 * See if we can recognise this mime type.
	 *
	 * @param  ID_TEXT	The mime type
	 * @return integer	Recognition precedence
	 */
	function recognises_mime_type($mime_type)
	{
		return MEDIA_RECOG_PRECEDENCE_LOW;
	}

	/**
	 * See if we can recognise this URL pattern.
	 *
	 * @param  URLPATH	URL to pattern match
	 * @return integer	Recognition precedence
	 */
	function recognises_url($url)
	{
		return MEDIA_RECOG_PRECEDENCE_NONE;
	}

	/**
	 * Provide code to display what is at the URL, in the most appropriate way.
	 *
	 * @param  URLPATH	URL to render
	 * @param  array		Attributes (e.g. width, height, length)
	 * @return tempcode	Rendered version
	 */
	function render($url,$attributes)
	{
		require_code('comcode_renderer');

		// Try and find the link title
		$link_captions_title=$GLOBALS['SITE_DB']->query_select_value_if_there('url_title_cache','t_title',array('t_url'=>$url));
		if ((is_null($link_captions_title)) || (substr($link_captions_title,0,1)=='!'))
		{
			$GLOBALS['COMCODE_PARSE_URLS_CHECKED']++;
			if (($GLOBALS['NO_LINK_TITLES']) || ($GLOBALS['COMCODE_PARSE_URLS_CHECKED']>=MAX_URLS_TO_READ))
			{
				$link_captions_title=$url;
			} else
			{
				$link_captions_title='';
				$downloaded_at_link=http_download_file($url,3000,false);
				if ((is_string($downloaded_at_link)) && (strpos($GLOBALS['HTTP_DOWNLOAD_MIME_TYPE'],'html')!==false) && ($GLOBALS['HTTP_MESSAGE']=='200'))
				{
					$matches=array();
					if (preg_match('#\s*<title[^>]*\s*>\s*(.*)\s*\s*<\s*/title\s*>#miU',$downloaded_at_link,$matches)!=0)
					{
						require_code('character_sets');

						$link_captions_title=trim(str_replace('&ndash;','-',str_replace('&mdash;','-',@html_entity_decode(convert_to_internal_encoding($matches[1]),ENT_QUOTES,get_charset()))));
						if (((strpos(strtolower($link_captions_title),'login')!==false) || (strpos(strtolower($link_captions_title),'log in')!==false)) && (substr($url,0,strlen(get_base_url()))==get_base_url()))
							$link_captions_title=''; // don't show login screen titles for our own website. Better to see the link verbatim
					}
				}
				$GLOBALS['SITE_DB']->query_insert('url_title_cache',array(
					't_url'=>substr($url,0,255),
					't_title'=>substr($link_captions_title,0,255),
				),false,true); // To stop weird race-like conditions
			}
		}
		if ($link_captions_title=='') $link_captions_title=$url;

		// Render as a 'page' link?
		$page_link=url_to_pagelink($url,true);
		if ($page_link!='')
		{
			return _do_tags_comcode('page',array('param'=>$page_link),make_string_tempcode(escape_html($link_captions_title)),$comcode_dangerous,$pass_id,$pos,$source_member,$as_admin,$connection,$comcode,$wml,$structure_sweep,$semiparse_mode,$highlight_bits);
		}

		// Okay, just render as a URL then
		$url_tempcode=new ocp_tempcode();
		$url_tempcode->attach($url);
		return _do_tags_comcode('url',array('param'=>$link_captions_title),$url_tempcode,$comcode_dangerous,$pass_id,$pos,$source_member,$as_admin,$connection,$comcode,$wml,$structure_sweep,$semiparse_mode,$highlight_bits);
	}

}
