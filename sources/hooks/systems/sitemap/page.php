<?php /*

 ocPortal
 Copyright (c) ocProducts, 2004-2014

 See text/EN/licence.txt for full licencing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license		http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright	ocProducts Ltd
 * @package		core
 */

class Hook_sitemap_page extends Hook_sitemap_base
{
	/**
	 * Find if a page-link will be covered by this node.
	 *
	 * @param  ID_TEXT		The page-link.
	 * @return integer		A SITEMAP_NODE_* constant.
	 */
	function handles_pagelink($pagelink)
	{
		$matches=array();
		if (preg_match('#^([^:]*):([^:]+)(:misc|$)#',$pagelink,$matches)!=0)
		{
			$zone=$matches[1];
			$page=$matches[2];

			$details=$this->_request_page_details($page,$zone);
			if ($details!==false)
			{
				if (strpos($details[0],'COMCODE')===false) // We don't handle Comcode pages here, comcode_page handles those
				{
					return SITEMAP_NODE_HANDLED;
				}
			}
		}
		return SITEMAP_NODE_NOT_HANDLED;
	}

	/**
	 * Find details for this node.
	 *
	 * @param  ?array			Faked database row (NULL: derive).
	 * @param  ID_TEXT		The zone.
	 * @param  ID_TEXT		The page.
	 * @return ?array			Faked database row (NULL: derive).
	 */
	protected function _load_row($row,$zone,$page)
	{
		if (!isset($row[0])) // If the first tuple element is not defined (a property map may be, for Comcode pages)
		{
			// Find from page grouping

			if ($row===NULL) $row=array();

			$links=get_page_grouping_links();
			foreach ($links as $link)
			{
				if (($link[2][0]==$page) && ((!isset($link[2][1]['type'])) || ($link[2][1]['type']=='misc')) && (($link[2][2]==$zone) || ($page!='start')))
				{
					$title=$link[3];
					$icon=$link[1];
					$row=array($title,$icon,NULL)+$row;
					if ($link[2][2]==$zone) break; // If was a perfect match, break out
				}
			}

			if ($row===NULL) // Get from stored menus?
			{
				$test=$GLOBALS['SITE_DB']->query_select('menu_items',array('i_caption','i_theme_img_code','i_caption_long'),array('i_url'=>$zone.':'.$page),'',1);
				if (array_key_exists(0,$test))
				{
					$title=get_translated_tempcode($test[0]['i_caption']);
					$icon=$test[0]['i_theme_img_code'];
					$description=get_translated_tempcode($test[0]['i_caption_long']);
					$row+=array($title,$icon,$description);
				}
			}
		}

		return $row;
	}

	/**
	 * Extend the node structure with added details from our row data (if we have it).
	 *
	 * @param  ?array			Structure.
	 * @param  ?array			Faked database row (NULL: we don't have row data).
	 */
	protected function _ameliorate_with_row(&$struct,&$row)
	{
		if (isset($row[0]))
		{
			$title=$row[0];
			$icon=$row[1];
			$description=$row[2];

			if (is_string($title))
			{
				$title=(preg_match('#^[A-Z\_]+$#',$title)==0)?make_string_tempcode($title):do_lang_tempcode($title);
			}

			if (is_string($description))
			{
				$description=(preg_match('#^[A-Z\_]+$#',$description)==0)?make_string_tempcode($description):comcode_lang_string($description);
			}

			if (!$title->is_empty())
				$struct['title']=$title;

			$struct['extra_meta']['description']=($description===NULL)?NULL:$description;

			$struct['extra_meta']['image']=($icon===NULL)?NULL:find_theme_image('icons/24x24/'.$icon);
			$struct['extra_meta']['image_2x']=($icon===NULL)?NULL:find_theme_image('icons/48x48/'.$icon);
		}
	}

	/**
	 * Find details of a position in the Sitemap.
	 *
	 * @param  ID_TEXT  		The page-link we are finding.
	 * @param  ?string  		Callback function to send discovered page-links to (NULL: return).
	 * @param  ?array			List of node types we will return/recurse-through (NULL: no limit)
	 * @param  ?integer		How deep to go from the Sitemap root (NULL: no limit).
	 * @param  integer		Our recursion depth (used to limit recursion, or to calculate importance of page-link, used for instance by XML Sitemap [deeper is typically less important]).
	 * @param  boolean		Only go so deep as needed to find nodes with permission-support (typically, stopping prior to the entry-level).
	 * @param  ID_TEXT		The zone we will consider ourselves to be operating in (needed due to transparent redirects feature)
	 * @param  boolean		Whether to make use of page groupings, to organise stuff with the hook schema, supplementing the default zone organisation.
	 * @param  boolean		Whether to filter out non-validated content.
	 * @param  boolean		Whether to consider secondary categorisations for content that primarily exists elsewhere.
	 * @param  integer		A bitmask of SITEMAP_GATHER_* constants, of extra data to include.
	 * @param  ?array			Database row (NULL: lookup).
	 * @param  boolean		Whether to return the structure even if there was a callback. Do not pass this setting through via recursion due to memory concerns, it is used only to gather information to detect and prevent parent/child duplication of default entry points.
	 * @return ?array			Node structure (NULL: working via callback / error).
	 */
	function get_node($pagelink,$callback=NULL,$valid_node_types=NULL,$child_cutoff=NULL,$max_recurse_depth=NULL,$recurse_level=0,$require_permission_support=false,$zone='_SEARCH',$use_page_groupings=false,$consider_secondary_categories=false,$consider_validation=false,$meta_gather=0,$row=NULL,$return_anyway=false)
	{
		$matches=array();
		preg_match('#^([^:]*):([^:]*)#',$pagelink,$matches);
		$page=$matches[2];

		$this->_make_zone_concrete($zone,$pagelink);

		$zone_default_page=get_zone_default_page($zone);

		$details=$this->_request_page_details($page,$zone);

		$path=end($details);
		$row=$this->_load_row($row,$zone,$page);

		$struct=array(
			'title'=>make_string_tempcode(escape_html(titleify($page))),
			'content_type'=>'page',
			'content_id'=>$zone.':'.$page,
			'pagelink'=>$pagelink,
			'extra_meta'=>array(
				'description'=>NULL,
				'image'=>NULL,
				'image_2x'=>NULL,
				'add_date'=>(($meta_gather & SITEMAP_GATHER_TIMES)!=0)?filectime(get_file_base().'/'.$path):NULL,
				'edit_date'=>(($meta_gather & SITEMAP_GATHER_TIMES)!=0)?filemtime(get_file_base().'/'.$path):NULL,
				'submitter'=>NULL,
				'views'=>NULL,
				'rating'=>NULL,
				'meta_keywords'=>NULL,
				'meta_description'=>NULL,
				'categories'=>NULL,
				'validated'=>NULL,
				'db_row'=>(($meta_gather & SITEMAP_GATHER_DB_ROW)!=0)?$row:NULL,
			),
			'permissions'=>array(
				array(
					'type'=>'zone',
					'zone_name'=>$zone,
					'is_owned_at_this_level'=>false,
				),
				array(
					'type'=>'page',
					'zone_name'=>$zone,
					'page_name'=>$page,
					'is_owned_at_this_level'=>true,
				),
			),
			'children'=>NULL,
			'has_possible_children'=>false,

			// These are likely to be changed in individual hooks
			'sitemap_priority'=>($zone_default_page==$page)?SITEMAP_IMPORTANCE_ULTRA:SITEMAP_IMPORTANCE_HIGH,
			'sitemap_refreshfreq'=>($zone_default_page==$page)?'daily':'weekly',

			'permission_page'=>NULL,
		);

		switch ($details[0])
		{
			case 'HTML':
			case 'HTML_CUSTOM':
				$page_contents=file_get_contents(get_file_base().'/'.$path);
				$matches=array();
				if (preg_match('#\<title[^\>]*\>#',$page_contents,$matches)!=0)
				{
					$start=strpos($page_contents,$matches[0])+strlen($matches[0]);
					$end=strpos($page_contents,'</title>',$start);
					$_title=substr($page_contents,$start,$end-$start);
					if ($_title!='')
						$struct['title']=make_string_tempcode($_title);
				}
				break;

			case 'MODULES':
			case 'MODULES_CUSTOM':
				require_all_lang();
				$test=do_lang('MODULE_TRANS_NAME_'.$page,NULL,NULL,NULL,NULL,false);
				if ($test!==NULL)
					$struct['title']=do_lang_tempcode('MODULE_TRANS_NAME_'.$page);
				break;
		}

		// Get more details from menu link / page grouping?
		$this->_ameliorate_with_row($struct,$row);

		if (!$this->_check_node_permissions($struct)) return NULL;

		$call_struct=true;

		$children=array();

		$has_entry_points=true;

		// Look for entry points to put under this
		if (($details[0]=='MODULES' || $details[0]=='MODULES_CUSTOM') && (!$require_permission_support))
		{
			$functions=extract_module_functions(get_file_base().'/'.$path,array('get_entry_points','get_wrapper_icon'),array(/*$check_perms=*/true,/*$member_id=*/NULL,/*$support_crosslinks=*/true,/*$be_deferential=*/true));
			if (is_null($functions[0]))
			{
				if (is_file(get_file_base().'/'.str_replace('/modules_custom/','/modules/',$path)))
				{
					$path=str_replace('/modules_custom/','/modules/',$path);
					$functions=extract_module_functions(get_file_base().'/'.$path,array('get_entry_points','get_wrapper_icon'),array(/*$check_perms=*/true,/*$member_id=*/NULL,/*$support_crosslinks=*/true,/*$be_deferential=*/true));
				}
			}

			$has_entry_points=false;

			if (!is_null($functions[0]))
			{
				$entry_points=is_array($functions[0])?call_user_func_array($functions[0][0],$functions[0][1]):eval($functions[0]);

				if ((!is_null($entry_points)) && (count($entry_points)>0))
				{
					$struct['has_possible_children']=true;

					$entry_point_sitemap_ob=$this->_get_sitemap_object('entry_point');

					$has_entry_points=true;

					if (isset($entry_points['!']))
					{
						// "!" indicates no entry-points but that the page is accessible without them
						$_title=$entry_points['!'][0];
						if (is_object($_title))
						{
							$struct['title']=$_title;
						} else
						{
							$struct['title']=(preg_match('#^[A-Z\_]+$#',$_title)==0)?make_string_tempcode($_title):do_lang_tempcode($_title);
						}
						if (!is_null($entry_points['!'][1]))
						{
							$struct['extra_meta']['image']=find_theme_image('icons/24x24/'.$entry_points['!'][1]);
							$struct['extra_meta']['image_2x']=find_theme_image('icons/48x48/'.$entry_points['!'][1]);
						}
						unset($entry_points['!']);
					}
					elseif ((isset($entry_points['misc'])) || (count($entry_points)==1))
					{
						// Misc/only moves some details down and is then skipped (alternatively we could haved blanked out our container node to make it a non-link)
						$move_down_entry_point=(count($entry_points)==1)?key($entry_points):'misc';
						if (substr($struct['pagelink'],-strlen(':'.$move_down_entry_point))!=':'.$move_down_entry_point)
							$struct['pagelink'].=':'.$move_down_entry_point;
						/*$_title=$entry_points[$move_down_entry_point][0];	Actually our name derived from the page grouping or natural name is more appropriate
						if (is_object($_title))
						{
							$struct['title']=$_title;
						} else
						{
							$struct['title']=(preg_match('#^[A-Z\_]+$#',$_title)==0)?make_string_tempcode($_title):do_lang_tempcode($_title);
						}*/
						if (!is_null($entry_points[$move_down_entry_point][1]))
						{
							$struct['extra_meta']['image']=find_theme_image('icons/24x24/'.$entry_points[$move_down_entry_point][1]);
							$struct['extra_meta']['image_2x']=find_theme_image('icons/48x48/'.$entry_points[$move_down_entry_point][1]);
						}
						unset($entry_points[$move_down_entry_point]);
					} else
					{
						$struct['pagelink']=''; // Container node is non-clickable

						// Is the icon for the container explicitly defined within get_wrapper_icon()?
						if (!is_null($functions[1]))
						{
							$icon=is_array($functions[1])?call_user_func_array($functions[1][0],$functions[1][1]):eval($functions[1]);
							$struct['extra_meta']['image']=find_theme_image('icons/24x24/'.$icon);
							$struct['extra_meta']['image_2x']=find_theme_image('icons/48x48/'.$icon);
						}
					}

					if (($max_recurse_depth===NULL) || ($recurse_level<$max_recurse_depth))
					{
						foreach (array_keys($entry_points) as $entry_point)
						{
							if (strpos($entry_point,':')===false)
							{
								$child_pagelink=$zone.':'.$page.':'.$entry_point;
							} else
							{
								$child_pagelink=$entry_point;
							}

							if (preg_match('#^([^:]*):([^:]*):([^:]*)(:.*|$)#',$child_pagelink)!=0)
							{
								$child_node=$entry_point_sitemap_ob->get_node($child_pagelink,$callback,$valid_node_types,$child_cutoff,$max_recurse_depth,$recurse_level+1,$require_permission_support,$zone,$use_page_groupings,$consider_secondary_categories,$consider_validation,$meta_gather);
							} else
							{
								$child_node=$this->get_node($child_pagelink,$callback,$valid_node_types,$child_cutoff,$max_recurse_depth,$recurse_level+1,$require_permission_support,$zone,$use_page_groupings,$consider_secondary_categories,$consider_validation,$meta_gather);
							}
							if ($child_node!==NULL)
								$children[$child_node['pagelink']]=$child_node;
						}
					}
				}
			}
		}

		if (!$has_entry_points)
		{
			$struct['pagelink']='';
		}

		// Look for virtual nodes to put under this
		$hooks=find_all_hooks('systems','sitemap');
		foreach (array_keys($hooks) as $_hook)
		{
			require_code('hooks/systems/sitemap/'.$_hook);
			$ob=object_factory('Hook_sitemap_'.$_hook);
			if ($ob->is_active())
			{
				$is_handled=$ob->handles_pagelink($pagelink);
				if ($is_handled==SITEMAP_NODE_HANDLED_VIRTUALLY)
				{
					$struct['permission_page']=$ob->get_permission_page($pagelink);
					$struct['has_possible_children']=true;

					$virtual_child_nodes=$ob->get_virtual_nodes($pagelink,$callback,$valid_node_types,$child_cutoff,$max_recurse_depth,$recurse_level+1,$require_permission_support,$zone,$use_page_groupings,$consider_secondary_categories,$consider_validation,$meta_gather,true);
					if (is_null($virtual_child_nodes)) $virtual_child_nodes=array();
					foreach ($virtual_child_nodes as $child_node)
					{
						if ((count($virtual_child_nodes)==1) && (preg_match('#^'.preg_quote($pagelink,'#').':misc(:[^:=]*$|$)#',$child_node['pagelink'])!=0) && (!$require_permission_support))
						{
							// Put as container instead
							if ($child_node['extra_meta']['image']=='')
							{
								$child_node['extra_meta']['image']=$struct['extra_meta']['image'];
								$child_node['extra_meta']['image_2x']=$struct['extra_meta']['image_2x'];
							}
							$struct=$child_node;
							if ($struct['children']!==NULL)
								$children=array_merge($children,$struct['children']);
							$struct['children']=NULL;
							$call_struct=false; // Already been called in get_virtual_nodes
						} else
						{
							if (($max_recurse_depth===NULL) || ($recurse_level<$max_recurse_depth))
							{
								if ($callback===NULL)
									$children[$child_node['pagelink']]=$child_node;
							}
						}
					}
				}
			}
		}

		if (!$has_entry_points)
		{
			if ($children==array())
			{
				return NULL;
			}
		}

		if ($callback!==NULL && $call_struct)
			call_user_func($callback,$struct);

		if (($max_recurse_depth===NULL) || ($recurse_level<$max_recurse_depth))
		{
			// Finalise children
			if ($callback!==NULL)
			{
				foreach ($children as $child_struct)
				{
					call_user_func($callback,$child_struct);
				}
				$children=array();
			}
			$struct['children']=array_values($children);

			sort_maps_by($children,'title');
		}

		return ($callback===NULL || $return_anyway)?$struct:NULL;
	}
}
