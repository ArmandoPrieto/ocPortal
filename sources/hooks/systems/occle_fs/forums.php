<?php /*

 ocPortal
 Copyright (c) ocProducts, 2004-2013

 See text/EN/licence.txt for full licencing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license		http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright	ocProducts Ltd
 * @package		ocf_forum
 */

require_code('resource_fs');

class Hook_occle_fs_forums extends resource_fs_base
{
	var $folder_resource_type=array('forum','topic');
	var $file_resource_type='post';

	/**
	 * Whether the filesystem hook is active.
	 *
	 * @return boolean		Whether it is
	 */
	function _is_active()
	{
		return (get_forum_type()=='ocf') && (!is_ocf_satellite_site());
	}

	/**
	 * Find whether a kind of resource handled by this hook (folder or file) can be under a particular kind of folder.
	 *
	 * @param  ID_TEXT		Folder resource type
	 * @param  ID_TEXT		Resource type (may be file or folder)
	 * @return ?array			A map: The parent referencing field, the table it is in, and the ID field of that table (NULL: cannot be under)
	 */
	function _has_parent_child_relationship($above,$under)
	{
		switch ($above)
		{
			case 'forum':
				if ($under=='forum') || ($under=='topic')
				{
					$folder_info=$this->_get_cma_info($under);
					return array(
						'cat_field'=>$folder_info['parent_spec__parent_name'],
						'linker_table'=>$folder_info['parent_spec__table_name'],
						'id_field'=>$folder_info['parent_spec__field_name']
					);
				}
				break;
			case 'topic':
				if ($under=='post')
				{
					return array(
						'cat_field'=>'p_forum_id',
						'linker_table'=>'f_posts',
						'id_field'=>'id'
					);
				}
				break;
		}
		return NULL;
	}

	/**
	 * Standard modular introspection function.
	 *
	 * @param  ID_TEXT		Parent category (blank: root / not applicable)
	 * @return array			The properties available for the resource type
	 */
	function _enumerate_folder_properties($category)
	{
		if (substr($category,0,6)=='FORUM-')
		{
			return array(
				'description'=>'LONG_TRANS',
				'forum_grouping_id'=>'forum_grouping',
				'position'=>'INTEGER',
				'post_count_increment'=>'BINARY',
				'order_sub_alpha'=>'BINARY',
				'intro_question'=>'LONG_TRANS',
				'intro_answer'=>'LONG_TRANS',
				'redirection'=>'SHORT_TEXT|forum',
				'order'=>'ID_TEXT',
				'is_threaded'=>'BINARY',
			);
		}

		return array(
			'emoticon'=>'SHORT_TEXT',
			'validated'=>'BINARY',
			'open'=>'BINARY',
			'pinned'=>'BINARY',
			'sunk'=>'BINARY',
			'cascading'=>'BINARY',
			'pt_from'=>'?member',
			'pt_to'=>'?member',
			'views'=>'INTEGER',
			'description_link'=>'SHORT_TEXT',
			'poll'=>'LONG_TRANS',
		);
	}

	/**
	 * Standard modular date fetch function for resource-fs hooks. Defined when getting an edit date is not easy.
	 *
	 * @param  array			Resource row (not full, but does contain the ID)
	 * @param  ID_TEXT		Parent category (blank: root / not applicable)
	 * @return ?TIME			The edit date or add date, whichever is higher (NULL: could not find one)
	 */
	function _get_folder_edit_date($row,$category)
	{
		if (substr($category,0,6)=='FORUM-')
		{
			$query='SELECT MAX(date_and_time) FROM '.get_table_prefix().'adminlogs WHERE '.db_string_equal_to('param_a',strval($row['id'])).' AND  ('.db_string_equal_to('the_type','ADD_FORUM').' OR '.db_string_equal_to('the_type','EDIT_FORUM').')';
			return $GLOBALS['SITE_DB']->query_value_if_there($query);
		}

		return NULL; // Will be picked up naturally from t_cache_first_time/t_cache_last_time
	}

	/**
	 * Get the filename for a resource ID. Note that filenames are unique across all folders in a filesystem.
	 *
	 * @param  ID_TEXT	The resource type
	 * @param  ID_TEXT	The resource ID
	 * @return ID_TEXT	The filename
	 */
	function _folder_convert_id_to_filename($resource_type,$resource_id)
	{
		if ($resource_type=='forum')
			return 'FORUM-'.parent::_folder_convert_id_to_filename($resource_type,$resource_id,'forum');

		return parent::_folder_convert_id_to_filename($resource_type,$resource_id);
	}

	/**
	 * Get the resource ID for a filename. Note that filenames are unique across all folders in a filesystem.
	 *
	 * @param  ID_TEXT	The filename, or filepath
	 * @return array		A pair: The resource type, the resource ID
	 */
	function folder_convert_filename_to_id($filename)
	{
		if (substr($filename,0,6)=='FORUM-')
			return parent::folder_convert_filename_to_id(substr($filename,6),'forum');

		return parent::folder_convert_filename_to_id($filename,'topic');
	}

	/**
	 * Convert properties to variables for adding/editing forums.
	 *
	 * @param  string			The path (blank: root / not applicable)
	 * @param  array			Properties (may be empty, properties given are open to interpretation by the hook but generally correspond to database fields)
	 * @return array			Properties
	 */
	function __folder_read_in_properties_forum($path,$properties)
	{
		$description=$this->_default_property_str($properties,'description');
		$forum_grouping_id=/*if grouping resource type was not here we could cheat with $GLOBALS['FORUM_DB']->query_select_value('f_forum_groupings','MIN(id)');*/$this->_default_property_str($properties,'forum_grouping_id');
		$access_mapping=array();
		$parent_forum=$this->_integer_category($category);
		$position=$this->_default_property_str($properties,'position');
		$post_count_increment=$this->_default_property_str($properties,'post_count_increment');
		$order_sub_alpha=$this->_default_property_str($properties,'order_sub_alpha');
		$intro_question=$this->_default_property_str($properties,'intro_question');
		$intro_answer=$this->_default_property_str($properties,'intro_answer');
		$redirection=$this->_default_property_str($properties,'redirection');
		$order=$this->_default_property_str($properties,'order');
		$is_threaded=$this->_default_property_str($properties,'is_threaded');

		return array($description,$forum_grouping_id,$access_mapping,$parent_forum,$position,$post_count_increment,$order_sub_alpha,$intro_question,$intro_answer,$redirection,$order,$is_threaded);
	}

	/**
	 * Convert properties to variables for adding/editing topics.
	 *
	 * @param  string			The path (blank: root / not applicable)
	 * @param  array			Properties (may be empty, properties given are open to interpretation by the hook but generally correspond to database fields)
	 * @return array			Properties
	 */
	function __folder_read_in_properties_topic($path,$properties)
	{
		$emoticon=$this->_default_property_str($properties,'emoticon');
		$validated=$this->_default_property_str($properties,'validated');
		$open=$this->_default_property_str($properties,'open');
		$pinned=$this->_default_property_str($properties,'pinned');
		$sunk=$this->_default_property_str($properties,'sunk');
		$cascading=$this->_default_property_str($properties,'cascading');
		$pt_from=$this->_default_property_str($properties,'pt_from');
		$pt_to=$this->_default_property_str($properties,'pt_to');
		$num_views=$this->_default_property_str($properties,'views');
		$description_link=$this->_default_property_str($properties,'description_link');

		return array($emoticon,$validated,$open,$pinned,$sunk,$cascading,$pt_from,$pt_to,$num_views,$description_link);
	}

	/**
	 * Standard modular add function for resource-fs hooks. Adds some resource with the given label and properties.
	 *
	 * @param  SHORT_TEXT	Filename OR Resource label
	 * @param  string			The path (blank: root / not applicable)
	 * @param  array			Properties (may be empty, properties given are open to interpretation by the hook but generally correspond to database fields)
	 * @return ~ID_TEXT		The resource ID (false: error)
	 */
	function folder_add($filename,$path,$properties)
	{
		list($category_resource_type,$category)=$this->folder_convert_filename_to_id($path);

		list($properties,$label)=$this->_folder_magic_filter($filename,$path,$properties);

		if ($category_resource_type=='forum')
		{
			if ($category_resource_type!='forum') return false;
			if ($category=='') return false; // Can't create more than one root

			require_code('ocf_forums_action');

			list($description,$forum_grouping_id,$access_mapping,$parent_forum,$position,$post_count_increment,$order_sub_alpha,$intro_question,$intro_answer,$redirection,$order,$is_threaded)=$this->__folder_read_in_properties_forum($path,$properties);

			$id=ocf_make_forum($label,$description,$forum_grouping_id,$access_mapping,$parent_forum,$position,$post_count_increment,$order_sub_alpha,$intro_question,$intro_answer,$redirection,$order,$is_threaded);
		} else
		{
			if ($category_resource_type!='forum') return false;
			if ($category=='') return false;

			require_code('ocf_topics_action');

			$forum_id=$this->_integer_category($category);

			list($emoticon,$validated,$open,$pinned,$sunk,$cascading,$pt_from,$pt_to,$num_views,$description_link)=$this->__folder_read_in_properties_topic($path,$properties);

			$id=ocf_make_topic($forum_id,$label,$emoticon,$validated,$open,$pinned,$sunk,$cascading,$pt_from,$pt_to,false,$num_views,NULL,$description_link);

			if ((array_key_exists('poll',$properties)) && ($properties['poll']!=''))
			{
				require_code('ocf_polls_action');

				$poll_data=unserialize($properties['poll']);

				$question=$poll_data['question'];
				$is_private=$poll_data['is_private'];
				$is_open=$poll_data['is_open'];
				$minimum_selections=$poll_data['minimum_selections'];
				$maximum_selections=$poll_data['maximum_selections'];
				$requires_reply=$poll_data['requires_reply'];
				$answers=$poll_data['answers']; // A list of pairs of the potential voteable answers and the number of votes.

				ocf_make_poll($id,$question,$is_private,$is_open,$minimum_selections,$maximum_selections,$requires_reply,$answers,false);
			}
		}

		return strval($id);
	}

	/**
	 * Standard modular load function for resource-fs hooks. Finds the properties for some resource.
	 *
	 * @param  SHORT_TEXT	Filename
	 * @param  string			The path (blank: root / not applicable)
	 * @return ~array			Details of the resource (false: error)
	 */
	function folder_load($filename,$path)
	{
		list($resource_type,$resource_id)=$this->folder_convert_filename_to_id($filename);

		if (substr($category,0,6)=='FORUM-')
		{
			$rows=$GLOBALS['FORUM_DB']->query_select('f_forums',array('*'),array('id'=>intval($resource_id)),'',1);
			if (!array_key_exists(0,$rows)) return false;
			$row=$rows[0];

			return array(
				'label'=>$row['f_name'],
				'description'=>$row['f_description'],
				'forum_grouping_id'=>$row['f_forum_grouping_id'],
				'position'=>$row['f_position'],
				'post_count_increment'=>$row['f_post_count_increment'],
				'order_sub_alpha'=>$row['f_order_sub_alpha'],
				'intro_question'=>$row['f_intro_question'],
				'intro_answer'=>$row['f_intro_answer'],
				'redirection'=>$row['f_redirection'],
				'order'=>$row['f_order'],
				'is_threaded'=>$row['f_is_threaded'],
			);
		}

		$rows=$GLOBALS['FORUM_DB']->query_select('f_topics',array('*'),array('id'=>intval($resource_id)),'',1);
		if (!array_key_exists(0,$rows)) return false;
		$row=$rows[0];

		return array(
			'label'=>$row['t_description'],
			'emoticon'=>$row['t_emoticon'],
			'validated'=>$row['t_validated'],
			'open'=>$row['t_open'],
			'pinned'=>$row['t_pinned'],
			'sunk'=>$row['t_sunk'],
			'cascading'=>$row['t_cascading'],
			'pt_from'=>$row['t_pt_from'],
			'pt_to'=>$row['t_pt_to'],
			'views'=>$row['t_num_views'],
			'description_link'=>$row['t_description_link'],
			'poll'=>$row['t_poll'],
		);
	}

	/**
	 * Standard modular edit function for resource-fs hooks. Edits the resource to the given properties.
	 *
	 * @param  ID_TEXT		The filename
	 * @param  string			The path (blank: root / not applicable)
	 * @param  array			Properties (may be empty, properties given are open to interpretation by the hook but generally correspond to database fields)
	 * @return boolean		Success status
	 */
	function folder_edit($filename,$path,$properties)
	{
		list($resource_type,$resource_id)=$this->folder_convert_filename_to_id($filename);

		if ($resource_type=='forum')
		{
			require_code('ocf_forums_action2');

			$label=$this->_default_property_str($properties,'label');
			list($description,$forum_grouping_id,$access_mapping,$parent_forum,$position,$post_count_increment,$order_sub_alpha,$intro_question,$intro_answer,$redirection,$order,$is_threaded)=$this->__folder_read_in_properties_forum($path,$properties);

			ocf_edit_forum(intval($resource_id),$label,$description,$forum_grouping_id,$new_parent,$position,$post_count_increment,$order_sub_alpha,$intro_question,$intro_answer,$redirection,$order,$is_threaded);
		} else
		{
			require_code('ocf_topics_action2');

			$label=$this->_default_property_str($properties,'label');
			list($emoticon,$validated,$open,$pinned,$sunk,$cascading,$pt_from,$pt_to,$num_views,$description_link)=$this->__folder_read_in_properties_topic($path,$properties);

			ocf_edit_topic(intval($resource_id),$label,$emoticon,$validated,$open,$pinned,$sunk,$cascading,$reason,$title,$description_link,false,$views,true);

			$poll_id=$GLOBALS['FORUM_DB']->query_select_value('f_topics','t_poll_id',array('id'=>intval($resource_id)));

			if ((array_key_exists('poll',$properties)) && ($properties['poll']!=''))
			{
				$poll_data=unserialize($properties['poll']);

				$question=$poll_data['question'];
				$is_private=$poll_data['is_private'];
				$is_open=$poll_data['is_open'];
				$minimum_selections=$poll_data['minimum_selections'];
				$maximum_selections=$poll_data['maximum_selections'];
				$requires_reply=$poll_data['requires_reply'];
				$answers=$poll_data['answers']; // A list of pairs of the potential voteable answers and the number of votes.

				if (is_null($poll_id))
				{
					require_code('ocf_polls_action');
					ocf_make_poll($id,$question,$is_private,$is_open,$minimum_selections,$maximum_selections,$requires_reply,$answers,false);
				} else
				{
					require_code('ocf_polls_action2');
					ocf_edit_poll($poll_id,$question,$is_private,$is_open,$minimum_selections,$maximum_selections,$requires_reply,$answers);
				}
			} else
			{
				if (!is_null($poll_id))
				{
					require_code('ocf_polls_action2');
					ocf_delete_poll($poll_id);
				}
			}
		}

		return true;
	}

	/**
	 * Standard modular delete function for resource-fs hooks. Deletes the resource.
	 *
	 * @param  ID_TEXT		The filename
	 * @return boolean		Success status
	 */
	function folder_delete($filename)
	{
		list($resource_type,$resource_id)=$this->folder_convert_filename_to_id($filename);

		if ($resource_type=='forum')
		{
			require_code('ocf_forums_action2');
			ocf_delete_forum(intval($resource_id));
		} else
		{
			require_code('ocf_topics_action2');
			ocf_delete_topic(intval($resource_id));
		}

		return true;
	}

	/**
	 * Standard modular introspection function.
	 *
	 * @return array			The properties available for the resource type
	 */
	function _enumerate_file_properties()
	{
		return array(
			'post'=>'LONG_TRANS',
			'skip_sig'=>'BINARY',
			'validated'=>'BINARY',
			'is_emphasised'=>'BINARY',
			'poster_name_if_guest'=>'ID_TEXT',
			'ip_address'=>'IP',
			'intended_solely_for'=>'?member',
			'sunk'=>'BINARY',
			'anonymous'=>'BINARY',
			'parent_id'=>'?post',
			'poster'=>'member',
			'last_edit_by'=>'?member',
			'add_date'=>'TIME',
			'edit_date'=>'?TIME',
		);
	}

	/**
	 * Standard modular add function for resource-fs hooks. Adds some resource with the given label and properties.
	 *
	 * @param  SHORT_TEXT	Filename OR Resource label
	 * @param  string			The path (blank: root / not applicable)
	 * @param  array			Properties (may be empty, properties given are open to interpretation by the hook but generally correspond to database fields)
	 * @return ~ID_TEXT		The resource ID (false: error, could not create via these properties / here)
	 */
	function file_add($filename,$path,$properties)
	{
		list($category_resource_type,$category)=$this->folder_convert_filename_to_id($path);
		list($properties,$label)=$this->_file_magic_filter($filename,$path,$properties);

		if ($category=='') return false;
		if ($category_resource_type!='topic') return false;

		require_code('ocf_posts_action');

		$topic_id=$this->_integer_category($category);
		$post=$this->_default_property_str($properties,'post');
		$skip_sig=$this->_default_property_int($properties,'skip_sig');
		$validated=$this->_default_property_int_null($properties,'validated');
		if (is_null($validated)) $validated=1;
		$is_emphasised=$this->_default_property_int($properties,'is_emphasised');
		$poster_name_if_guest=$this->_default_property_str($properties,'poster_name_if_guest');
		$ip_address=$this->_default_property_str_null($properties,'ip_address');
		$time=$this->_default_property_int_null($properties,'add_date');
		$poster=$this->_default_property_int_null($properties,'poster');
		$intended_solely_for=$this->_default_property_int_null($properties,'intended_solely_for');
		$last_edit_time=$this->_default_property_int_null($properties,'edit_date');
		$last_edit_by=$this->_default_property_int_null($properties,'last_edit_by');
		$sunk=$this->_default_property_int($properties,'sunk');
		$anonymous=$this->_default_property_int($properties,'anonymous');
		$parent_id=$this->_default_property_int_null($properties,'parent_id');
		$id=ocf_make_post($topic_id,$label,$post,$skip_sig,NULL,$validated,$is_emphasised,$poster_name_if_guest,$ip_address,$time,$poster,$intended_solely_for,$last_edit_time,$last_edit_by,false,true,NULL,false,NULL,$sunk,NULL,$anonymous,true,NULL,false,$parent_id);
		return strval($id);
	}

	/**
	 * Standard modular load function for resource-fs hooks. Finds the properties for some resource.
	 *
	 * @param  SHORT_TEXT	Filename
	 * @param  string			The path (blank: root / not applicable)
	 * @return ~array			Details of the resource (false: error)
	 */
	function file_load($filename,$path)
	{
		list($resource_type,$resource_id)=$this->file_convert_filename_to_id($filename);

		$rows=$GLOBALS['FORUM_DB']->query_select('f_posts',array('*'),array('id'=>intval($resource_id)),'',1);
		if (!array_key_exists(0,$rows)) return false;
		$row=$rows[0];

		return array(
			'label'=>$row['p_title'],
			'post'=>$row['p_post'],
			'skip_sig'=>$row['p_skip_sig'],
			'validated'=>$row['p_validated'],
			'is_emphasised'=>$row['p_is_emphasised'],
			'poster_name_if_guest'=>$row['p_poster_name_if_guest'],
			'ip_address'=>$row['p_ip_address'],
			'intended_solely_for'=>$row['p_intended_solely_for'],
			'sunk'=>$row['p_sunk'],
			'anonymous'=>$row['p_anonymous'],
			'parent_id'=>$row['p_parent_id'],
			'poster'=>$row['p_poster'],
			'last_edit_by'=>$row['p_last_edit_by'],
			'add_date'=>$row['p_time'],
			'edit_date'=>$row['p_last_edit_time'],
		);
	}

	/**
	 * Standard modular edit function for resource-fs hooks. Edits the resource to the given properties.
	 *
	 * @param  ID_TEXT		The filename
	 * @param  string			The path (blank: root / not applicable)
	 * @param  array			Properties (may be empty, properties given are open to interpretation by the hook but generally correspond to database fields)
	 * @return boolean		Success status
	 */
	function file_edit($filename,$path,$properties)
	{
		list($resource_type,$resource_id)=$this->file_convert_filename_to_id($filename);
		list($category_content_type,$category)=$this->folder_convert_filename_to_id($path);
		list($properties,)=$this->_file_magic_filter($filename,$path,$properties);

		require_code('ocf_posts_action3');

		$label=$this->_default_property_str($properties,'label');
		$topic_id=$this->_integer_category($category);
		$post=$this->_default_property_str($properties,'post');
		$skip_sig=$this->_default_property_int($properties,'skip_sig');
		$validated=$this->_default_property_int_null($properties,'validated');
		if (is_null($validated)) $validated=1;
		$is_emphasised=$this->_default_property_int($properties,'is_emphasised');
		$poster_name_if_guest=$this->_default_property_str($properties,'poster_name_if_guest');
		$ip_address=$this->_default_property_str_null($properties,'ip_address');
		$time=$this->_default_property_int_null($properties,'add_date');
		$poster=$this->_default_property_int_null($properties,'poster');
		$intended_solely_for=$this->_default_property_int_null($properties,'intended_solely_for');
		$last_edit_time=$this->_default_property_int_null($properties,'edit_date');
		$last_edit_by=$this->_default_property_int_null($properties,'last_edit_by');
		$sunk=$this->_default_property_int($properties,'sunk');
		$anonymous=$this->_default_property_int($properties,'anonymous');
		$parent_id=$this->_default_property_int_null($properties,'parent_id');

		ocf_edit_post(intval($resource_id),$validated,$label,$post,$skip_sig,$is_emphasised,$intended_solely_for,$show_as_edited,$mark_as_unread,$reason,false,$edit_time,$add_time,$submitter,true);

		return true;
	}

	/**
	 * Standard modular delete function for resource-fs hooks. Deletes the resource.
	 *
	 * @param  ID_TEXT		The filename
	 * @return boolean		Success status
	 */
	function file_delete($filename)
	{
		list($resource_type,$resource_id)=$this->file_convert_filename_to_id($filename);

		require_code('ocf_posts_action3');
		ocf_delete_post(intval($resource_id));

		return true;
	}
}
