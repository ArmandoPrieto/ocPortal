<?php /*

 ocPortal
 Copyright (c) ocProducts, 2004-2014

 See text/EN/licence.txt for full licencing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license		http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright	ocProducts Ltd
 * @package		occle
 */

class Hook_occle_fs_root
{
	/**
	 * Standard modular listing function for OcCLE FS hooks.
	 *
	 * @param  array		The current meta-directory path
	 * @param  string		The root node of the current meta-directory
	 * @param  object		A reference to the OcCLE filesystem object
	 * @return ~array 	The final directory listing (false: failure)
	 */
	function listing($meta_dir,$meta_root_node,&$occle_fs)
	{
		$override_path=$this->_customise_directory($meta_dir);
		$nonoverride_path=$this->_customise_directory($meta_dir,false);

		$listing=array();
		$ok=false;
		foreach (array($override_path,$nonoverride_path) as $path)
		{
			if (is_dir($path))
			{
				$dh=opendir($path);
				while (($file=readdir($dh))!==false)
				{
					if (($file!='.') && ($file!='..') && ($file!='.git') && ((strpos($file,'_custom')===false) || (!file_exists($path.str_replace('_custom','',$file)))))
					{
						$listing[]=array(
							$file,
							is_dir($path.$file)?OCCLEFS_DIR:OCCLEFS_FILE,
							is_dir($path.$file)?NULL:filesize($path.$file),
							filemtime($path.$file),
						);
					}
				}
				$ok=true;
			}
		}
		if ($ok)
			return $listing;

		return false; // Directory doesn't exist
	}

	/**
	 * Standard modular directory creation function for OcCLE FS hooks.
	 *
	 * @param  array	The current meta-directory path
	 * @param  string	The root node of the current meta-directory
	 * @param  string	The new directory name
	 * @param  object	A reference to the OcCLE filesystem object
	 * @return boolean	Success?
	 */
	function make_directory($meta_dir,$meta_root_node,$new_dir_name,&$occle_fs)
	{
		$new_dir_name=filter_naughty($new_dir_name);
		$path=$this->_customise_directory($meta_dir);

		if ((is_dir($path)) && (!file_exists($path.$new_dir_name)) && (is_writable_wrap($path)))
		{
			$ret=@mkdir($path.$new_dir_name,0777) OR warn_exit(do_lang_tempcode('WRITE_ERROR_DIRECTORY',$path.$new_dir_name));
			fix_permissions($path.$new_dir_name,0777);
			sync_file($path.$new_dir_name);
			return $ret;
		}
		else return false; //Directory exists
	}

	/**
	 * Standard modular directory removal function for OcCLE FS hooks.
	 *
	 * @param  array	The current meta-directory path
	 * @param  string	The root node of the current meta-directory
	 * @param  string	The directory name
	 * @param  object	A reference to the OcCLE filesystem object
	 * @return boolean	Success?
	 */
	function remove_directory($meta_dir,$meta_root_node,$dir_name,&$occle_fs)
	{
		$dir_name=filter_naughty($dir_name);
		$path=$this->_customise_directory($meta_dir);

		if ((is_dir($path)) && (file_exists($path.$dir_name)) && (is_writable_wrap($path.$dir_name)))
		{
			require_code('files');
			deldir_contents($path.$dir_name);
			$ret=@rmdir($path.$dir_name) OR warn_exit(do_lang_tempcode('WRITE_ERROR',escape_html($path.$dir_name)));
			sync_file($path.$dir_name);
			return true;
		}
		else return false; //Directory doesn't exist
	}

	/**
	 * Standard modular file removal function for OcCLE FS hooks.
	 *
	 * @param  array	The current meta-directory path
	 * @param  string	The root node of the current meta-directory
	 * @param  string	The file name
	 * @param  object	A reference to the OcCLE filesystem object
	 * @return boolean	Success?
	 */
	function remove_file($meta_dir,$meta_root_node,$file_name,&$occle_fs)
	{
		$file_name=filter_naughty($file_name);
		$path=$this->_customise_directory($meta_dir);

		if ((is_dir($path)) && (file_exists($path.$file_name)) && (is_writable_wrap($path.$file_name)))
		{
			$ret=@unlink($path.$file_name) OR intelligent_write_error($path.$file_name);
			sync_file($path.$file_name);
			return $ret;
		}
		else return false; //File doesn't exist
	}

	/**
	 * Standard modular file reading function for OcCLE FS hooks.
	 *
	 * @param  array		The current meta-directory path
	 * @param  string		The root node of the current meta-directory
	 * @param  string		The file name
	 * @param  object		A reference to the OcCLE filesystem object
	 * @return ~string	The file contents (false: failure)
	 */
	function read_file($meta_dir,$meta_root_node,$file_name,&$occle_fs)
	{
		$file_name=filter_naughty($file_name);
		$path=$this->_customise_directory($meta_dir);
		if (!file_exists($path.$file_name))
			$path=$this->_customise_directory($meta_dir,false);

		if ((is_dir($path)) && (file_exists($path.$file_name)) && (is_readable($path.$file_name)))
		{
			return file_get_contents($path.$file_name);
		}
		else return false; //File doesn't exist
	}

	/**
	 * Standard modular file writing function for OcCLE FS hooks.
	 *
	 * @param  array	The current meta-directory path
	 * @param  string	The root node of the current meta-directory
	 * @param  string	The file name
	 * @param  string	The new file contents
	 * @param  object	A reference to the OcCLE filesystem object
	 * @return boolean	Success?
	 */
	function write_file($meta_dir,$meta_root_node,$file_name,$contents,&$occle_fs)
	{
		$file_name=filter_naughty($file_name);
		$path=$this->_customise_directory($meta_dir);

		if ((is_dir($path)) && (((file_exists($path.$file_name)) && (is_writable_wrap($path.$file_name))) || ((!file_exists($path.$file_name)) && (is_writable_wrap($path)))))
		{
			$fh=@fopen($path.$file_name,GOOGLE_APPENGINE?'wb':'wt') OR intelligent_write_error($path.$file_name);
			$output=fwrite($fh,$contents);
			fclose($fh);
			if ($output<strlen($contents)) warn_exit(do_lang_tempcode('COULD_NOT_SAVE_FILE'));
			fix_permissions($path.$file_name);
			sync_file($path.$file_name);
			return $output;
		}
		else return false; //File doesn't exist
	}

	/**
	 * Customise a directory path, adding _custom to appropriate entries.
	 *
	 * @param  array				Path to customise
	 * @param  boolean			Whether to rewrite to be the alternative override directory
	 * @return string				Customised path
	 */
	function _customise_directory($directory,$change_to_override=true)
	{
		$dir_replacements=array('sources','comcode','html','minimodules','modules','data','lang','text','images','templates');

		$path=get_custom_file_base().'/';
		$previous_dir_section='';
		foreach ($directory as $dir_section)
		{
			if ($change_to_override)
			{
				if (in_array($dir_section,$dir_replacements)) $dir_section.='_custom';
			}

			$path.=filter_naughty($dir_section).'/';
			$previous_dir_section=$dir_section;
		}

		if (!file_exists($path))
		{
			$ret=@mkdir($path,0777,true) OR warn_exit(do_lang_tempcode('WRITE_ERROR_DIRECTORY',$path));
			fix_permissions($path,0777);
			sync_file($path);
		}

		return $path;
	}

}

