<?php /*

 ocPortal
 Copyright (c) ocProducts, 2004-2013

 See text/EN/licence.txt for full licencing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license		http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright	ocProducts Ltd
 * @package		catalogues
 */

require_code('content_fs');

class Hook_occle_fs_catalogues extends content_fs_base
{
	var $folder_content_type=array('catalogue','catalogue_category');
	var $file_content_type='catalogue_entry';

	/**
	 * Find whether a kind of content handled by this hook (folder or file) can be under a particular kind of folder.
	 *
	 * @param  ID_TEXT		Folder content type
	 * @param  ID_TEXT		Content type (may be file or folder)
	 * @return boolean		Whether it can
	 */
	function _has_parent_child_relationship($above,$under)
	{
		switch ($above)
		{
			case 'catalogue':
				return ($under=='catalogue_category');
			case 'catalogue_category':
				return ($under=='catalogue_category') || ($under=='catalogue_entry');
		}
		return false;
	}

	/**
	 * Standard modular introspection function.
	 *
	 * @param  ID_TEXT		Parent category (blank: root / not applicable)
	 * @return array			The properties available for the content type
	 */
	function _enumerate_folder_properties($category)
	{
		if (substr($category,0,10)!='CATALOGUE-')
		{
			return array(
				'description'=>'LONG_TRANS',
				'notes'=>'LONG_TEXT',
				'rep_image'=>'URLPATH',
				'move_days_lower'=>'?INTEGER',
				'move_days_higher'=>'?INTEGER',
				'move_target'=>'?catalogue_category',
				'meta_keywords'=>'LONG_TRANS',
				'meta_description'=>'LONG_TRANS',
				'add_date'=>'TIME',
			);
		}

		return array(
			'description'=>'LONG_TRANS',
			'display_type'=>'SHORT_INTEGER',
			'is_tree'=>'BINARY',
			'notes'=>'LONG_TEXT',
			'submit_points'=>'INTEGER',
			'ecommerce'=>'BINARY',
			'send_view_reports'=>'BINARY',
			'default_review_freq'=>'?INTEGER',
			'fields'=>'LONG_TRANS',
			'add_date'=>'TIME',
		);
	}

	/**
	 * Get the filename for a content ID. Note that filenames are unique across all folders in a filesystem.
	 *
	 * @param  ID_TEXT	The content type
	 * @param  ID_TEXT	The content ID
	 * @return ID_TEXT	The filename
	 */
	function _folder_convert_id_to_filename($content_type,$content_id)
	{
		if ($content_type=='catalogue')
			return 'CATALOGUE-'.parent::_folder_convert_id_to_filename($content_type,$content_id);

		return parent::_folder_convert_id_to_filename($content_type,$content_id,'catalogue_category');
	}

	/**
	 * Get the content ID for a filename. Note that filenames are unique across all folders in a filesystem.
	 *
	 * @param  ID_TEXT	The filename, or filepath
	 * @return array		A pair: The content type, the content ID
	 */
	function _folder_convert_filename_to_id($filename)
	{
		if (substr($filename,0,10)=='CATALOGUE-')
			return parent::_folder_convert_filename_to_id(substr($filename,10),'catalogue');

		return parent::_folder_convert_filename_to_id($filename,'catalogue_category');
	}

	/**
	 * Standard modular add function for content hooks. Adds some content with the given label and properties.
	 *
	 * @param  SHORT_TEXT	Filename OR Content label
	 * @param  string			The path (blank: root / not applicable)
	 * @param  array			Properties (may be empty, properties given are open to interpretation by the hook but generally correspond to database fields)
	 * @return ~ID_TEXT		The content ID (false: error)
	 */
	function _folder_add($filename,$path,$properties)
	{
		list($category_content_type,$category)=$this->_folder_convert_filename_to_id($path);

		list($properties,$label)=$this->_folder_magic_filter($filename,$path,$properties);

		require_code('catalogues2');

		$depth=substr_count($path,'/');

		if ($depth!=0)
		{
			if ($category_content_type=='catalogue') return false; // Can't create a catalogue under a catalogue
			if ($category=='') return false; // Can't create more than one root

			if ($depth==1)
			{
				$parent_id=mixed();
				$catalogue_name=$category;
			} else
			{
				$parent_id=$this->_integer_category($category);
				$catalogue_name=$GLOBALS['SITE_DB']->query_select_value('catalogue_categories','c_name',array('id'=>$parent_id));
				$is_tree=$GLOBALS['SITE_DB']->query_select_value('catalogue_categories','c_is_tree',array('id'=>$parent_id));
				if ($is_tree==0) return false;
			}

			$description=$this->_default_property_str($properties,'description');
			$notes=$this->_default_property_str($properties,'notes');
			$rep_image=$this->_default_property_str($properties,'rep_image');
			$move_days_lower=$this->_default_property_int_null($properties,'move_days_lower');
			$move_days_higher=$this->_default_property_int_null($properties,'move_days_higher');
			$move_target=$this->_default_property_int_null($properties,'move_target');
			$add_date=$this->_default_property_int_null($properties,'add_date');
			$meta_keywords=$this->_default_property_str($properties,'meta_keywords');
			$meta_description=$this->_default_property_str($properties,'meta_description');

			$id=actual_add_catalogue_category($catalogue_name,$label,$description,$notes,$parent_id,$rep_image,$move_days_lower,$move_days_higher,$move_target,$add_date,NULL,$meta_keywords,$meta_description);

			return strval($id);
		} else
		{
			$description=$this->_default_property_str($properties,'description');
			$display_type=$this->_default_property_int($properties,'display_type');
			$is_tree=$this->_default_property_int($properties,'is_tree');
			$notes=$this->_default_property_str($properties,'notes');
			$submit_points=$this->_default_property_int($properties,'submit_points');
			$ecommerce=$this->_default_property_int($properties,'ecommerce');
			$send_view_reports=$this->_default_property_int($properties,'send_view_reports');
			$default_review_freq=$this->_default_property_int_null($properties,'default_review_freq');
			$add_time=$this->_default_property_int_null($properties,'add_date');
			$name=$this->_create_name_from_label($label);

			actual_add_catalogue($name,$label,$description,$display_type,$is_tree,$notes,$submit_points,$ecommerce,$send_view_reports,$default_review_freq,$add_time);

			if ((array_key_exists('fields',$properties)) && ($properties['fields']!=''))
			{
				$fields_data=unserialize($properties['fields']);
				foreach ($fields_data as $field_data)
				{
					$field_title=$field_data['field_title'];
					$description=$field_data['description'];
					$type=$field_data['type'];
					$order=$field_data['order'];
					$defines_order=$field_data['defines_order'];
					$visible=$field_data['visible'];
					$searchable=$field_data['searchable'];
					$default=$field_data['default'];
					$required=$field_data['required'];
					$put_in_category=$field_data['put_in_category'];
					$put_in_search=$field_data['put_in_search'];

					actual_add_catalogue_field($name,$field_title,$description,$type,$order,$defines_order,$visible,$searchable,$default,$required,$put_in_category,$put_in_search);
				}
			} else
			{
				actual_add_catalogue_field($name,do_lang('TITLE'),'','short_text',0,1,1,1,'',1,1,1);
			}

			return $name;
		}

		return '';
	}

	/**
	 * Standard modular delete function for content hooks. Deletes the content.
	 *
	 * @param  ID_TEXT	The filename
	 */
	function _folder_delete($filename)
	{
		list($content_type,$content_id)=$this->_folder_convert_filename_to_id($filename);

		require_code('catalogues2');

		if ($content_type=='catalogue')
		{
			delete_catalogue($content_id);
		} else
		{
			delete_catalogue_category(intval($content_id));
		}
	}

	/**
	 * Standard modular introspection function.
	 *
	 * @param  ID_TEXT		Parent category (blank: root / not applicable)
	 * @return array			The properties available for the content type
	 */
	function _enumerate_file_properties($category)
	{
		$props=array();

		$category_id=$this->_integer_category($category);
		$catalogue_name=$GLOBALS['SITE_DB']->query_select_value('catalogue_categories','c_name',array('id'=>$category_id));
		$_fields=$GLOBALS['SITE_DB']->query_select('catalogue_fields',array('id','cf_type','cf_default','cf_name'),array('c_name'=>$catalogue_name),'ORDER BY cf_order');
		foreach ($_fields as $i=>$field_bits)
		{
			if ($i!=0)
			{
				$cf_name=get_translated_text($field_bits['cf_name']);
				$fixed_id=fix_id($cf_name);
				if (!array_key_exists($fixed_id,$props))
				{
					$key=$fixed_id;
				} else
				{
					$key='field_'.strval($field_bits['id']);
				}

				require_code('fields');
				$ob=get_fields_hook($field_bits['cf_type']);
				list(,,$storage_type)=$ob->get_field_value_row_bits(array('id'=>NULL,'cf_type'=>$field_bits['cf_type'],'cf_default'=>''));
				$_type='SHORT_TEXT';
				switch ($storage_type)
				{
					case 'short_trans':
						$_type='SHORT_TRANS';
						break;
					case 'long_trans':
						$_type='LONG_TRANS';
						break;
					case 'long':
						$_type='LONG_TEXT';
						break;
				}
				$props[$key]=$_type;
			}
		}

		$props+=array(
			'validated'=>'BINARY',
			'notes'=>'LONG_TEXT',
			'allow_rating'=>'BINARY',
			'allow_comments'=>'SHORT_INTEGER',
			'allow_trackbacks'=>'BINARY',
			'views'=>'INTEGER',
			'meta_keywords'=>'LONG_TRANS',
			'meta_description'=>'LONG_TRANS',
			'submitter'=>'member',
			'add_date'=>'TIME',
			'edit_date'=>'?TIME',
		);

		return $props;
	}

	/**
	 * Standard modular add function for content hooks. Adds some content with the given label and properties.
	 *
	 * @param  SHORT_TEXT	Filename OR Content label
	 * @param  string			The path (blank: root / not applicable)
	 * @param  array			Properties (may be empty, properties given are open to interpretation by the hook but generally correspond to database fields)
	 * @return ~ID_TEXT		The content ID (false: error, could not create via these properties / here)
	 */
	function _file_add($filename,$path,$properties)
	{
		list($category_content_type,$category)=$this->_folder_convert_filename_to_id($path);
		list($properties,$label)=$this->_file_magic_filter($filename,$path,$properties);

		if ($category=='') return false;
		if ($category_content_type=='catalogue') return false;

		require_code('catalogues2');

		$category_id=$this->_integer_category($category);

		$catalogue_name=$GLOBALS['SITE_DB']->query_select_value('catalogue_categories','c_name',array('id'=>$category_id));
		$_fields=$GLOBALS['SITE_DB']->query_select('catalogue_fields',array('id','cf_type','cf_default','cf_name'),array('c_name'=>$catalogue_name),'ORDER BY cf_order');
		$map=array();
		$props_already=array();
		foreach ($_fields as $i=>$field_bits)
		{
			$field_id=$field_bits['id'];

			if ($i==0)
			{
				$map[$field_id]=$label;
			} else
			{
				$cf_name=get_translated_text($field_bits['cf_name']);
				$fixed_id=fix_id($cf_name);
				if (!array_key_exists($fixed_id,$props_already))
				{
					$key=$fixed_id;
				} else
				{
					$key='field_'.strval($field_bits['id']);
				}
				$props_already[$key]=true;

				$value=$this->_default_property_str($properties,$key);
				if (is_null($value)) $value=$field_bits['cf_default'];
				$map[$field_id]=$value;
			}
		}

		$validated=$this->_default_property_int_null($properties,'validated');
		if (is_null($validated)) $validated=1;
		$notes=$this->_default_property_str($properties,'notes');
		$allow_rating=$this->_default_property_int_modeavg($properties,'allow_rating','catalogue_entries',1);
		$allow_comments=$this->_default_property_int_modeavg($properties,'allow_comments','catalogue_entries',1);
		$allow_trackbacks=$this->_default_property_int_modeavg($properties,'allow_trackbacks','catalogue_entries',1);
		$time=$this->_default_property_int_null($properties,'add_date');
		$submitter=$this->_default_property_int_null($properties,'submitter');
		$edit_date=$this->_default_property_int_null($properties,'edit_date');
		$views=$this->_default_property_int($properties,'views');
		$meta_keywords=$this->_default_property_str($properties,'meta_keywords');
		$meta_description=$this->_default_property_str($properties,'meta_description');

		$id=actual_add_catalogue_entry($category_id,$validated,$notes,$allow_rating,$allow_comments,$allow_trackbacks,$map,$time,$submitter,$edit_date,$views,NULL,$meta_keywords,$meta_description);
		return strval($id);
	}

	/**
	 * Standard modular delete function for content hooks. Deletes the content.
	 *
	 * @param  ID_TEXT	The filename
	 */
	function _file_delete($filename)
	{
		list($content_type,$content_id)=$this->_file_convert_filename_to_id($filename);

		require_code('catalogues2');
		delete_catalogue_entry(intval($content_id));
	}
}
