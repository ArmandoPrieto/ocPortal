<?php /*

 ocPortal
 Copyright (c) ocProducts, 2004-2013

 See text/EN/licence.txt for full licencing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license		http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright	ocProducts Ltd
 * @package		aggregate_types
 */

/**
 * Add an aggregate type instance.
 *
 * @param  SHORT_TEXT		Label for new instance
 * @param  ID_TEXT			What the instance is of
 * @param  array				Additional properties
 * @param  ?TIME				Add time (NULL: now)
 * @param  ?TIME				Edit time (NULL: not edited yet)
 * @param  boolean			Whether to activate it
 * @return AUTO_LINK			ID of the new instance
 */
function add_aggregate_type_instance($aggregate_label,$aggregate_type,$_other_properties,$add_time=NULL,$edit_time=NULL,$sync=true)
{
	$other_properties=serialize($_other_properties);

	// Error if label is a duplicate
	$aggregate_label=$GLOBALS['SITE_DB']->query_select_value_if_there('aggregate_type_instances','aggregate_label',array('id'=>$id));
	if (!is_null($aggregate_label))
		warn_exit(do_lang_tempcode('DUPLICATE_AGGREGATE_INSTANCE',escaped_html($aggregate_label)));

	if (is_null($add_time)) $add_time=time();

	$id=$GLOBALS['SITE_DB']->query_insert('aggregate_type_instances',array(
		'aggregate_label'=>$aggregate_label,
		'aggregate_type'=>$aggregate_type,
		'other_properties'=>$other_properties,
		'add_time'=>$add_time,
		'edit_time'=>$edit_time,
	),true);

	if ($sync)
		sync_aggregate_type_instance($id);

	log_it('ADD_AGGREGATE_TYPE_INSTANCE',$aggregate_label);

	return $id;
}

/**
 * Edit an aggregate type instance.
 *
 * @param  AUTO_LINK			The ID
 * @param  SHORT_TEXT		Label for instance
 * @param  ID_TEXT			What the instance is of
 * @param  array				Additional properties
 */
function edit_aggregate_type_instance($id,$aggregate_label,$aggregate_type,$_other_properties)
{
	$other_properties=serialize($_other_properties);

	$GLOBALS['SITE_DB']->query_update('aggregate_type_instances',array(
		'aggregate_label'=>$aggregate_label,
		'aggregate_type'=>$aggregate_type,
		'other_properties'=>$other_properties,
		'edit_time'=>time(),
	),array('id'=>$id),'',1);

	sync_aggregate_type_instance($id);

	log_it('EDIT_AGGREGATE_TYPE_INSTANCE',$aggregate_label);
}

/**
 * Delete an aggregate type instance.
 *
 * @param  AUTO_LINK			The ID
 */
function delete_aggregate_type_instance($id)
{
	$aggregate_label=$GLOBALS['SITE_DB']->query_select_value_if_there('aggregate_type_instances','aggregate_label',array('id'=>$id));
	if (is_null($aggregate_label)) warn_exit(do_lang_tempcode('MISSING_RESOURCE'));

	$GLOBALS['SITE_DB']->query_delete('aggregate_type_instances',array('id'=>$id),'',1);

	// TODO: Delete all instance stuff? Or document that we won't.

	log_it('DELETE_AGGREGATE_TYPE_INSTANCE',$aggregate_label);
}

/**
 * Re-sync all aggregate type instances.
 */
function resync_all_aggregate_type_instances()
{
	$start=0;
	do
	{
		$instances=$GLOBALS['SITE_DB']->query_select('aggregate_type_instances',array('*'),NULL,'',100,$start);
		foreach ($instances as $instance)
		{
			$other_properties=unserialize($instance['other_properties']);
			sync_aggregate_type_instance($instance['id'],$instance['aggregate_label'],$instance['aggregate_type'],$other_properties);
		}
		$start+=100;
	}
	while (count($instances)!=0);
}

/**
 * Sync an aggregate type instance.
 *
 * @param  AUTO_LINK			The ID
 * @param  ?SHORT_TEXT		Label for instance (NULL: lookup)
 * @param  ?ID_TEXT			What the instance is of (NULL: lookup)
 * @param  ?array				Additional properties (NULL: lookup)
 */
function sync_aggregate_type_instance($id,$aggregate_label=NULL,$aggregate_type=NULL,$other_properties=NULL)
{
	// TODO
}
