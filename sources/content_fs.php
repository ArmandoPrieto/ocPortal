<?php /*

 ocPortal
 Copyright (c) ocProducts, 2004-2013

 See text/EN/licence.txt for full licencing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license		http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright	ocProducts Ltd
 * @package		core
 */

/**
 * Standard code module initialisation function.
 */
function init__downloads()
{
	require_code('urls2');
}

class content_fs_base
{
	var $folder_content_type=NULL;
	var $_folder_object=NULL;
	var $_file_object=NULL;

	/**
	 * Get the folder content info for this OccleFS content hook.
	 *
	 * @return object		The object
	 */
	function _get_folder_info()
	{
		if (is_null($this->$_folder_object))
		{
			require_code('hooks/systems/content_meta_aware/'.$this->folder_content_type);
			$this->$_folder_object=object_factory('Hook_content_meta_aware_'.$this->folder_content_type);
		}
		return $this->$_folder_object->info();
	}

	/**
	 * Get the file content info for this OccleFS content hook.
	 *
	 * @return object		The object
	 */
	function _get_file_info()
	{
		if (is_null($_file_object))
		{
			require_code('hooks/systems/content_meta_aware/'.$this->file_content_type);
			$_file_object=object_factory('Hook_content_meta_aware_'.$this->file_content_type);
		}
		return $_file_object->info();
	}

	/**
	 * Find a default property, defaulting to blank.
	 *
	 * @param  array		The properties
	 * @param  ID_TEXT	The property
	 * @return ?string	The value (NULL: NULL value)
	 */
	function _default_property_str($properties,$property)
	{
		return array_key_exists($property,$properties)?$properties[$property]:'';
	}

	/**
	 * Find a default property, defaulting to NULL.
	 *
	 * @param  array		The properties
	 * @param  ID_TEXT	The property
	 * @return ?string	The value (NULL: NULL value)
	 */
	function _default_property_str_null($properties,$property)
	{
		return array_key_exists($property,$properties)?$properties[$property]:NULL;
	}

	/**
	 * Find a default property, defaulting to blank.
	 *
	 * @param  array		The properties
	 * @param  ID_TEXT	The property
	 * @return ?integer	The value (NULL: NULL value)
	 */
	function _default_property_int($properties,$property)
	{
		return array_key_exists($property,$properties)?intval($properties[$property]):0;
	}

	/**
	 * Find a default property, defaulting to blank.
	 *
	 * @param  array		The properties
	 * @param  ID_TEXT	The property
	 * @return ?integer	The value (NULL: NULL value)
	 */
	function _default_property_int_null($properties,$property)
	{
		return array_key_exists($property,$properties)?intval($properties[$property]):NULL;
	}

	/**
	 * Find a default property, defaulting to blank.
	 *
	 * @param  ID_TEXT	The category value (blank: root)
	 * @return ?integer	The category (NULL: root)
	 */
	function _integer_category($category)
	{
		return ($category=='')?NULL:intval($category);
	}

	/**
	 * Standard modular listing function for OcCLE FS hooks.
	 *
	 * @param  array		The current meta-directory path
	 * @param  string		The root node of the current meta-directory
	 * @param  array		The current directory listing
	 * @param  array		A reference to the OcCLE filesystem object
	 * @return ~array		The final directory listing (false: failure)
	 */
	function listing($meta_dir,$meta_root_node,$current_dir,&$occle_fs)
	{
		if (!is_null($this->folder_content_type))
		{
			$folder_info=_get_folder_info();
		}
		$file_info=_get_file_info();

		// Find where we're at
		if (count($meta_dir)!=0)
		{
			if (is_null($this->folder_content_type)) return false;

			$_cat_id=find_id_via_url_moniker($this->folder_content_type,implode('/',$meta_dir));
			$cat_id=($folder_info['id_field_numeric']?intval($_cat_id):$_cat_id)
		} else
		{
			if (!is_null($this->folder_content_type))
			{
				$cat_id=($folder_info['id_field_numeric']?NULL:'');
			}
		}

		// Find folders
		if (!is_null($this->folder_content_type))
		{
			$child_folders=$folder_info['connection']->query_select($folder_info['table'],array($folder_info['id_field']),array($folder_info['parent_category_field']=>$cat_id),'ORDER BY '.$folder_info['id_field'],10000/*Reasonable limit*/);
		} else
		{
			$child_folders=array();
		}

		// Find files
		$where=array();
		if (!is_null($this->folder_content_type))
		{
			$where[$file_info['category_field']]=$cat_id;
		}
		$files=$file_info['connection']->query_select($file_info['table'],array($file_info['id_field']),$where,'ORDER BY '.$file_info['id_field'],10000/*Reasonable limit*/);

		// Return
		$listing=array();
		foreach ($child_folders as $folder)
		{
			$listing[]=$folder[$folder_info['id_field']];
		}
		foreach ($files as $file)
		{
			$listing[]=$file[$file_info['id_field']];
		}
	}

	/**
	 * Standard modular directory creation function for OcCLE FS hooks.
	 *
	 * @param  array		The current meta-directory path
	 * @param  string		The root node of the current meta-directory
	 * @param  string		The new directory name
	 * @param  array		A reference to the OcCLE filesystem object
	 * @return boolean	Success?
	 */
	function make_directory($meta_dir,$meta_root_node,$new_dir_name,&$occle_fs)
	{
		if (is_null($folder_content_type)) return false;

		// TODO
	}

	/**
	 * Standard modular directory removal function for OcCLE FS hooks.
	 *
	 * @param  array		The current meta-directory path
	 * @param  string		The root node of the current meta-directory
	 * @param  string		The directory name
	 * @param  array		A reference to the OcCLE filesystem object
	 * @return boolean	Success?
	 */
	function remove_directory($meta_dir,$meta_root_node,$dir_name,&$occle_fs)
	{
		if (is_null($folder_content_type)) return false;

		// TODO
	}

	/**
	 * Standard modular file removal function for OcCLE FS hooks.
	 *
	 * @param  array		The current meta-directory path
	 * @param  string		The root node of the current meta-directory
	 * @param  string		The file name
	 * @param  array		A reference to the OcCLE filesystem object
	 * @return boolean	Success?
	 */
	function remove_file($meta_dir,$meta_root_node,$file_name,&$occle_fs)
	{
		// TODO
	}

	/**
	 * Standard modular file reading function for OcCLE FS hooks.
	 *
	 * @param  array		The current meta-directory path
	 * @param  string		The root node of the current meta-directory
	 * @param  string		The file name
	 * @param  array		A reference to the OcCLE filesystem object
	 * @return ~string	The file contents (false: failure)
	 */
	function read_file($meta_dir,$meta_root_node,$file_name,&$occle_fs)
	{
		// TODO
	}

	/**
	 * Standard modular file writing function for OcCLE FS hooks.
	 *
	 * @param  array		The current meta-directory path
	 * @param  string		The root node of the current meta-directory
	 * @param  string		The file name
	 * @param  string		The new file contents
	 * @param  array		A reference to the OcCLE filesystem object
	 * @return boolean	Success?
	 */
	function write_file($meta_dir,$meta_root_node,$file_name,$contents,&$occle_fs)
	{
		// TODO
	}
}
