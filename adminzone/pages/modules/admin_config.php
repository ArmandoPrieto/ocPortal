<?php /*

 ocPortal
 Copyright (c) ocProducts, 2004-2013

 See text/EN/licence.txt for full licencing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license		http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright	ocProducts Ltd
 * @package		core_configuration
 */

/**
 * Module page class.
 */
class Module_admin_config
{

	/**
	 * Standard modular info function.
	 *
	 * @return ?array	Map of module info (NULL: module is disabled).
	 */
	function info()
	{
		$info=array();
		$info['author']='Chris Graham';
		$info['organisation']='ocProducts';
		$info['hacked_by']=NULL;
		$info['hack_version']=NULL;
		$info['version']=15;
		$info['locked']=true;
		$info['update_require_upgrade']=1;
		return $info;
	}

	/**
	 * Standard modular entry-point finder function.
	 *
	 * @return ?array	A map of entry points (type-code=>language-code) (NULL: disabled).
	 */
	function get_entry_points()
	{
		$ret=array('misc'=>'CONFIGURATION');

		$ret['base']='BASE_CONFIGURATION';

		if (addon_installed('xml_fields'))
			$ret['xml_fields']='FIELD_FILTERS';

		if (addon_installed('breadcrumbs'))
			$ret['xml_breadcrumbs']='BREADCRUMB_OVERRIDES';

		if (is_null(get_value('brand_base_url')))
			$ret['upgrader']='FU_UPGRADER_TITLE';

		if (addon_installed('syndication'))
			$ret['backend']='FEEDS';

		if (addon_installed('code_editor'))
			$ret['code_editor']='CODE_EDITOR';

		return $ret;
	}

	/**
	 * Standard modular run function.
	 *
	 * @return tempcode	The result of execution.
	 */
	function run()
	{
		require_all_lang();
		require_code('config2');

		$val=ini_get('suhosin.post.max_vars');
		if ((is_string($val)) && ($val!='') && (intval($val)<400))
		{
			attach_message(do_lang_tempcode('LOW_SUHOSIN_SETTING'),'warn');
		}

		$type=get_param('type','misc');

		if ($type=='misc') return $this->config_choose(); // List of categories
		if ($type=='category') return $this->config_category(); // Category editing UI
		if ($type=='set') return $this->config_set(); // Category editing actualiser

		if (addon_installed('xml_fields'))
		{
			if ($type=='xml_fields') return $this->xml_fields();
			if ($type=='_xml_fields') return $this->_xml_fields();
		}
		if (addon_installed('breadcrumbs'))
		{
			if ($type=='xml_breadcrumbs') return $this->xml_breadcrumbs();
			if ($type=='_xml_breadcrumbs') return $this->_xml_breadcrumbs();
		}

		if ($type=='base') return $this->base();
		if (is_null(get_value('brand_base_url')))
			if ($type=='upgrader') return $this->upgrader();
		if (addon_installed('syndication'))
			if ($type=='backend') return $this->backend();
		if (addon_installed('code_editor'))
			if ($type=='code_editor') return $this->code_editor();

		return new ocp_tempcode();
	}

	/**
	 * The UI to choose what configuration page to edit.
	 *
	 * @return tempcode		The UI
	 */
	function config_choose()
	{
		set_helper_panel_pic('pagepics/config');
		set_helper_panel_tutorial('tut_adv_configuration');

		$title=get_screen_title('CONFIGURATION');

		// Find all categories
		$hooks=find_all_hooks('systems','config');
		$categories=array();
		foreach (array_keys($hooks) as $hook)
		{
			require_code('hooks/systems/config/'.filter_naughty($hook));
			$ob=object_factory('Hook_config_'.$hook);
			$option=$ob->get_details();
			if ((is_null($GLOBALS['CURRENT_SHARE_USER'])) || ($option['shared_hosting_restricted']==0))
			{
				if (!is_null($ob->get_default()))
				{
					$category=$option['category'];
					if (!isset($categories[$category])) $categories[$category]=0;
					$categories[$category]++;
				}
			}
		}

		// Show all categories
		$categories_tpl=new ocp_tempcode();
		ksort($categories);
		foreach ($categories as $category=>$option_count)
		{
			// Some are skipped
			if (get_forum_type()!='ocf')
			{
				if ($category=='USERS') continue;
				if ($category=='FORUMS') continue;
			}
			if (has_no_forum())
			{
				if ($category=='FORUMS') continue;
			}

			// Put together details...

			$url=build_url(array('page'=>'_SELF','type'=>'category','id'=>$category),'_SELF');

			$_category_name=do_lang('CONFIG_CATEGORY_'.$category,NULL,NULL,NULL,NULL,false);
			if (!$GLOBALS['SEMI_DEV_MODE'])
			{
				if (is_null($_category_name)) continue;
			} else
			{
				$_category_name=do_lang('CONFIG_CATEGORY_'.$category); // We want to see an error
			}
			$category_name=do_lang_tempcode('CONFIG_CATEGORY_'.$category);

			$description=do_lang_tempcode('CONFIG_CATEGORY_DESCRIPTION__'.$category);

			$count=do_lang_tempcode('CATEGORY_SUBORDINATE_2',escape_html(integer_format($option_count)));

			$categories_tpl->attach(do_template('INDEX_SCREEN_FANCIER_ENTRY',array(
				'_GUID'=>'6ba2b09432d06e7502c71e7aac2d3527',
				'COUNT'=>$count,
				'NAME'=>$category_name,
				'TITLE'=>protect_from_escaping(do_lang('CONFIGURATION').': '.$_category_name),
				'DESCRIPTION'=>$description,
				'URL'=>$url,
			)));
		}
		$categories_tpl->attach(do_template('INDEX_SCREEN_FANCIER_ENTRY',array(
			'_GUID'=>'6fde99ae81367fb7405e94b6731a7d9a',
			'COUNT'=>NULL,
			'TITLE'=>protect_from_escaping(do_lang('CONFIGURATION').': '.do_lang('BASE_CONFIGURATION')),
			'URL'=>get_base_url().'/config_editor.php',
			'NAME'=>do_lang_tempcode('BASE_CONFIGURATION'),
			'DESCRIPTION'=>do_lang_tempcode('DOC_BASE_CONFIGURATION'),
		)));

		// Wrapper
		return do_template('INDEX_SCREEN_FANCIER_SCREEN',array(
			'_GUID'=>'c8fdb2b481625d58b0b228c897fda72f',
			'TITLE'=>$title,
			'PRE'=>paragraph(do_lang_tempcode('CHOOSE_A_CONFIG_CATEGORY')),
			'CONTENT'=>$categories_tpl,
			'POST'=>'',
		));
	}

	/**
	 * The UI to edit a configuration page.
	 *
	 * @return tempcode		The UI
	 */
	function config_category()
	{
		require_javascript('javascript_validation');

		// Load up some basic details
		$category=get_param('id');
		$title=get_screen_title(do_lang_tempcode('CONFIG_CATEGORY_'.$category),false);
		$post_url=build_url(array('page'=>'_SELF','type'=>'set','id'=>$category,'redirect'=>get_param('redirect',NULL)),'_SELF');
		$category_description=do_lang_tempcode('CONFIG_CATEGORY_DESCRIPTION__'.$category);
		/*set_helper_panel_pic('pagepics/config');		Actually let's save the space
		set_helper_panel_tutorial('tut_adv_configuration');*/

		// Find all options in category
		$hooks=find_all_hooks('systems','config');
		$rows=array();
		foreach (array_keys($hooks) as $hook)
		{
			require_code('hooks/systems/config/'.filter_naughty($hook));
			$ob=object_factory('Hook_config_'.$hook);
			$option=$ob->get_details();
			if ((is_null($GLOBALS['CURRENT_SHARE_USER'])) || ($option['shared_hosting_restricted']==0))
			{
				if (!is_null($ob->get_default()))
				{
					if ($category==$option['category'])
					{
						if (!isset($option['c_order_in_category_group']))
							$option['c_order_in_category_group']=1;
						$option['ob']=$ob;
						$option['name']=$hook;
						$rows[$hook]=$option;
					}
				}
			}
		}

		// Add in special ones
		if ($category=='SITE')
		{
			$rows['timezone']=array('name'=>'timezone','human_name'=>'TIME_ZONE','c_value'=>'','type'=>'special','category'=>'SITE','group'=>'INTERNATIONALISATION','explanation'=>'DESCRIPTION_TIMEZONE_SITE','shared_hosting_restricted'=>0,'c_order_in_category_group'=>1);
		}
		require_code('files');
		$upload_max_filesize=(ini_get('upload_max_filesize')=='0')?do_lang('NA'):clean_file_size(php_return_bytes(ini_get('upload_max_filesize')));
		$post_max_size=(ini_get('post_max_size')=='0')?do_lang('NA'):clean_file_size(php_return_bytes(ini_get('post_max_size')));

		// Sort generally, categorise into groups, sort the groups
		sort_maps_by($rows,'c_order_in_category_group');
		$all_known_groups=array();
		foreach ($rows as $myrow)
		{
			$_group=do_lang($myrow['group']);

			$_group=strtolower(trim(preg_replace('#(&.*;)|[^\w\d\s]#U','',$_group)));
			if ((array_key_exists($_group,$all_known_groups)) && ($all_known_groups[$_group]!=$myrow['group'])) $_group='std_'.$myrow['group']; // If cat names translate to same things or are in non-latin characters like Cyrillic

			$all_known_groups[$_group]=$myrow['group'];
		}
		ksort($all_known_groups);
		if (isset($all_known_groups[do_lang('ADVANCED')])) // Advanced goes last
		{
			$temp=$all_known_groups[do_lang('ADVANCED')];
			unset($all_known_groups[do_lang('ADVANCED')]);
			$all_known_groups[do_lang('ADVANCED')]=$temp;
		}
		$groups=array();
		foreach ($all_known_groups as $group_codename)
		{
			$group_rows=array();
			foreach ($rows as $myrow)
			{
				if ($myrow['group']==$group_codename)
				{
					$group_rows[]=$myrow;
				}
			}

			$groups[$group_codename]=$group_rows;
		}

		// Render option groups
		$groups_tempcode=new ocp_tempcode();
		require_code('form_templates');
		$_groups=array();
		foreach ($groups as $group_codename=>$rows)
		{
			$out='';
			foreach ($rows as $myrow)
			{
				$name=$myrow['name']; // Can't get from array key, as sorting nuked it

				// Lang strings
				$human_name=do_lang_tempcode($myrow['human_name']);
				$_explanation=do_lang($myrow['explanation'],NULL,NULL,NULL,NULL,false);
				if (is_null($_explanation))
				{
					$_explanation=do_lang('CONFIG_GROUP_DEFAULT_DESCRIP_'.$myrow['group']);
					$explanation=do_lang_tempcode('CONFIG_GROUP_DEFAULT_DESCRIP_'.$myrow['group']);
				} else
				{
					$explanation=do_lang_tempcode($myrow['explanation']);
				}

				// Render field inputter
				switch ($myrow['type'])
				{
					case 'special':
						switch ($name)
						{
							case 'timezone':
								$list='';
								$timezone=get_site_timezone();
								foreach (get_timezone_list() as $_timezone=>$timezone_nice)
								{
									$list.=static_evaluate_tempcode(form_input_list_entry($_timezone,$_timezone==$timezone,$timezone_nice));
								}
								$out.=static_evaluate_tempcode(form_input_list($human_name,$explanation,'timezone',make_string_tempcode($list)));
								break;

							default:
								$ob=$myrow['ob'];
								$out.=static_evaluate_tempcode($ob->field_inputter($name,$myrow,$human_name,$explanation));
								break;
						}
						break;

					case 'integer':
						$out.=static_evaluate_tempcode(form_input_integer($human_name,$explanation,$name,intval(get_option($name)),false));
						break;

					case 'colour':
						$out.=static_evaluate_tempcode(form_input_colour($human_name,$explanation,$name,get_option($name),false,NULL,true));
						break;

					case 'line':
					case 'transline':
						$out.=static_evaluate_tempcode(form_input_line($human_name,$explanation,$name,get_option($name),false));
						break;

					case 'username':
						$out.=static_evaluate_tempcode(form_input_username($human_name,$explanation,$name,get_option($name),false,false));
						break;

					case 'list':
						$list='';
						$_value=get_option($name);
						$values=explode('|',$myrow['list_options']);
						foreach ($values as $value)
						{
							$__value=str_replace(' ','__',$value);
							$_option_text=do_lang('CONFIG_OPTION_'.$name.'_VALUE_'.$__value,NULL,NULL,NULL,NULL,false);
							if (!is_null($_option_text))
							{
								$option_text=do_lang_tempcode('CONFIG_OPTION_'.$name.'_VALUE_'.$__value);
							} else
							{
								$option_text=make_string_tempcode($value);
							}
							$list.=static_evaluate_tempcode(form_input_list_entry($value,$_value==$value,$option_text));
						}
						$out.=static_evaluate_tempcode(form_input_list($human_name,$explanation,$name,make_string_tempcode($list),NULL,false,false));
						break;

					case 'text':
					case 'transtext':
						$out.=static_evaluate_tempcode(form_input_text($human_name,$explanation,$name,get_option($name),false,NULL,true));
						break;

					case 'float':
						$out.=static_evaluate_tempcode(form_input_float($human_name,$explanation,$name,floatval(get_option($name)),false));
						break;

					case 'tick':
						$out.=static_evaluate_tempcode(form_input_tick($human_name,$explanation,$name,get_option($name)=='1'));
						break;

					case 'date':
						$out.=static_evaluate_tempcode(form_input_date($human_name,$explanation,$name,false,false,false,intval(get_option($name)),40,intval(date('Y'))-20,NULL,false));
						break;

					case 'forum':
					case '?forum':
						if ((get_forum_type()=='ocf') && (addon_installed('ocf_forum')))
						{
							$current_setting=get_option($name);
							if (!is_numeric($current_setting))
							{
								$_current_setting=$GLOBALS['FORUM_DB']->query_select_value_if_there('f_forums','id',array('f_name'=>$current_setting));
								if (is_null($_current_setting))
								{
									if ($myrow['type']=='?forum')
									{
										$current_setting=NULL;
									} else
									{
										$current_setting=strval(db_get_first_id());
										attach_message(do_lang_tempcode('FORUM_CURRENTLY_UNSET',$human_name),'notice');
									}
								} else
								{
									$current_setting=strval($_current_setting);
								}
							}
							$out.=static_evaluate_tempcode(form_input_tree_list($human_name,$explanation,$name,NULL,'choose_forum',array(),false,$current_setting));
						} else
						{
							$out.=static_evaluate_tempcode(form_input_line($human_name,$explanation,$name,get_option($name),false));
						}
						break;

					case 'forum_grouping':
						if (get_forum_type()=='ocf')
						{
							$tmp_value=$GLOBALS['FORUM_DB']->query_select_value_if_there('f_forum_groupings','id',array('c_title'=>get_option($name)));

							require_code('ocf_forums2');
							$_list=ocf_nice_get_forum_groupings(NULL,$tmp_value);
							$out.=static_evaluate_tempcode(form_input_list($human_name,$explanation,$name,$_list));
						} else
						{
							$out.=static_evaluate_tempcode(form_input_line($human_name,$explanation,$name,get_option($name),false));
						}
						break;

					case 'usergroup':
						if (get_forum_type()=='ocf')
						{
							$tmp_value=$GLOBALS['FORUM_DB']->query_select_value_if_there('f_groups g LEFT JOIN '.$GLOBALS['FORUM_DB']->get_table_prefix().'translate t ON t.id=g.g_name','g.id',array('text_original'=>get_option($name)));

							require_code('ocf_groups');
							$_list=ocf_nice_get_usergroups($tmp_value);
							$out.=static_evaluate_tempcode(form_input_list($human_name,$explanation,$name,$_list));
						} else
						{
							$out.=static_evaluate_tempcode(form_input_line($human_name,$explanation,$name,get_option($name),false));
						}
						break;

					default:
						fatal_exit('Invalid config option type');
				}
			}

			// Render group
			$group_title=do_lang_tempcode($group_codename);
			$_group_description=do_lang('CONFIG_GROUP_DESCRIP_'.$group_codename,escape_html($post_max_size),escape_html($upload_max_filesize),NULL,NULL,false);
			if (is_null($_group_description))
			{
				$group_description=new ocp_tempcode();
			} else
			{
				$group_description=do_lang_tempcode('CONFIG_GROUP_DESCRIP_'.$group_codename,escape_html($post_max_size),escape_html($upload_max_filesize));
			}
			$group=do_template('CONFIG_GROUP',array('_GUID'=>'84c0db86002a33a383a7c2e195dd3913','GROUP_DESCRIPTION'=>$group_description,'GROUP_NAME'=>$group_codename,'GROUP'=>$out,'GROUP_TITLE'=>$group_title));
			$groups_tempcode->attach($group->evaluate());
			$_groups[$group_codename]=$group_title;
		}

		list($warning_details,$ping_url)=handle_conflict_resolution();

		// Breadcrumbs
		breadcrumb_set_parents(array(array('_SELF:_SELF:misc',do_lang_tempcode('CONFIGURATION'))));
		breadcrumb_set_self(do_lang_tempcode('CONFIG_CATEGORY_'.$category));

		// Render
		return do_template('CONFIG_CATEGORY_SCREEN',array(
			'_GUID'=>'d01b28b71c38bbb52b6aaf877c7f7b0e',
			'CATEGORY_DESCRIPTION'=>$category_description,
			'_GROUPS'=>$_groups,
			'PING_URL'=>$ping_url,
			'WARNING_DETAILS'=>$warning_details,
			'TITLE'=>$title,
			'URL'=>$post_url,
			'GROUPS'=>$groups_tempcode,
			'SUBMIT_NAME'=>do_lang_tempcode('SAVE'),
		));
	}

	/**
	 * The actualiser to edit a configuration page.
	 *
	 * @return tempcode		The UI
	 */
	function config_set()
	{
		global $CONFIG_OPTIONS_CACHE;

		$category=get_param('id','MAIN');
		$title=get_screen_title(do_lang_tempcode('CONFIG_CATEGORY_'.$category),false);

		// Make sure we haven't locked ourselves out due to clean URL support
		if ((post_param('url_scheme','RAW')!='RAW') && (substr(ocp_srv('SERVER_SOFTWARE'),0,6)=='Apache') && ((!file_exists(get_file_base().'/.htaccess')) || (strpos(file_get_contents(get_file_base().'/.htaccess'),'RewriteEngine on')===false)))
		{
			warn_exit(do_lang_tempcode('BEFORE_MOD_REWRITE'));
		}

		// Make sure we haven't just locked staff out
		if (addon_installed('staff'))
		{
			$new_site_name=substr(post_param('site_name',''),0,200);
			if (($new_site_name!='') && (get_option('is_on_sync_staff')==='1'))
			{
				$admin_groups=array_merge($GLOBALS['FORUM_DRIVER']->get_super_admin_groups(),$GLOBALS['FORUM_DRIVER']->get_moderator_groups());
				$staff=$GLOBALS['FORUM_DRIVER']->member_group_query($admin_groups,100);
				if (count($staff)<100)
				{
					foreach ($staff as $row_staff)
					{
						$member=$GLOBALS['FORUM_DRIVER']->mrow_id($row_staff);
						if ($GLOBALS['FORUM_DRIVER']->is_staff($member))
						{
							$sites=get_ocp_cpf('sites');
							$sites=str_replace(', '.get_site_name(),'',$sites);
							$sites=str_replace(','.get_site_name(),'',$sites);
							$sites=str_replace(get_site_name().', ','',$sites);
							$sites=str_replace(get_site_name().',','',$sites);
							$sites=str_replace(get_site_name(),'',$sites);
							if ($sites!='') $sites.=', ';
							$sites.=$new_site_name;
							$GLOBALS['FORUM_DRIVER']->set_custom_field($member,'sites',$sites);
						}
					}
				}
			}
		}

		// Empty thumbnail cache if needed
		if ((get_option('is_on_gd')=='1') && (function_exists('imagetypes')))
		{
			if ((!is_null(post_param('thumb_width',NULL))) && (post_param('thumb_width')!=get_option('thumb_width')))
			{
				require_code('caches3');
				erase_thumb_cache();
			}
		}

		// Find all options in category
		$hooks=find_all_hooks('systems','config');
		$rows=array();
		foreach (array_keys($hooks) as $hook)
		{
			require_code('hooks/systems/config/'.filter_naughty($hook));
			$ob=object_factory('Hook_config_'.$hook);
			$option=$ob->get_details();
			if ($category==$option['category'])
			if ((is_null($GLOBALS['CURRENT_SHARE_USER'])) || ($option['shared_hosting_restricted']==0))
			{
				if (!is_null($ob->get_default()))
				{
					$option['ob']=$ob;
					$rows[$hook]=$option;
				}
			}
		}

		// Add in special ones
		if ($category=='SITE')
		{
			$rows['timezone']=array('shared_hosting_restricted'=>0,'type'=>'special');
		}

		// Go through all options on the page, saving
		foreach ($rows as $name=>$myrow)
		{
			// Save
			if ($myrow['type']=='tick')
			{
				$value=strval(post_param_integer($name,0));
			}
			elseif ($myrow['type']=='date')
			{
				$date_value=get_input_date($name);
				$value=is_null($date_value)?'':strval($date_value);
			}
			elseif ((($myrow['type']=='forum') || ($myrow['type']=='?forum')) && (get_forum_type()=='ocf'))
			{
				$value=post_param($name);
				if (is_numeric($value))
					$value=$GLOBALS['FORUM_DB']->query_select_value_if_there('f_forums','f_name',array('id'=>post_param_integer($name)));
				if (is_null($value)) $value='';
			}
			elseif (($myrow['type']=='forum_grouping') && (get_forum_type()=='ocf'))
			{
				$value=post_param($name);
				if (is_numeric($value))
					$value=$GLOBALS['FORUM_DB']->query_select_value_if_there('f_forum_groupings','c_title',array('id'=>post_param_integer($name)));
				if (is_null($value)) $value='';
			}
			elseif (($myrow['type']=='usergroup') && (get_forum_type()=='ocf'))
			{
				$value=$GLOBALS['FORUM_DB']->query_select_value_if_there('f_groups g LEFT JOIN '.$GLOBALS['FORUM_DB']->get_table_prefix().'translate t ON t.id=g.g_name','text_original',array('g.id'=>post_param_integer($name)));
				if (is_null($value)) $value='';
			} else
			{
				$value=post_param($name,'');
			}

			// Hard-coded special options
			if ($name=='timezone')
			{
				set_value('timezone',$value);
			} else
			{
				// If the option was changed
				$old_value=get_option($name);
				if (($old_value!=$value) || ($CONFIG_OPTIONS_CACHE[$name]['c_set']==0))
				{
					set_option($name,$value);
				}
			}
		}

		// Clear some cacheing
		require_code('caches3');
		erase_comcode_page_cache();
		erase_block_cache();
		//persistent_cache_delete('OPTIONS');  Done by set_option / erase_persistent_cache
		erase_persistent_cache();
		erase_cached_templates();

		// Show it worked / Refresh
		$redirect=get_param('redirect',NULL);
		if ($redirect===NULL)
		{
			$url=build_url(array('page'=>'_SELF','type'=>'misc'),'_SELF'); // ,'type'=>'category','id'=>$category
		} else
		{
			$url=make_string_tempcode($redirect);
		}
		return redirect_screen($title,$url,do_lang_tempcode('SUCCESS'));
	}

	/**
	 * Redirect to the config_editor script.
	 *
	 * @return tempcode		The UI
	 */
	function base()
	{
		$title=get_screen_title('CONFIGURATION');
		require_code('site2');
		assign_refresh(get_base_url().'/config_editor.php',0.0);
		return do_template('REDIRECT_SCREEN',array('_GUID'=>'66b1e7b5d84a48677c12cb83b240d1c5','URL'=>get_base_url().'/config_editor.php','TITLE'=>$title,'TEXT'=>do_lang_tempcode('REDIRECTING')));
	}

	/**
	 * Redirect to the upgrader script.
	 *
	 * @return tempcode		The UI
	 */
	function upgrader()
	{
		$title=get_screen_title('FU_UPGRADER_TITLE');
		require_code('site2');
		assign_refresh(get_base_url().'/upgrader.php',0.0);
		return do_template('REDIRECT_SCREEN',array('_GUID'=>'493b2a11c53ddb3af6eb5d73ec8a6244','URL'=>get_base_url().'/upgrader.php','TITLE'=>$title,'TEXT'=>do_lang_tempcode('REDIRECTING')));
	}

	/**
	 * Redirect to the backend script.
	 *
	 * @return tempcode		The UI
	 */
	function backend()
	{
		$title=get_screen_title('FEEDS');
		require_code('site2');
		assign_refresh(get_base_url().'/backend.php',0.0);
		return do_template('REDIRECT_SCREEN',array('_GUID'=>'32b8840660b0ff990276ac4008da0f3a','URL'=>get_base_url().'/backend.php','TITLE'=>$title,'TEXT'=>do_lang_tempcode('REDIRECTING')));
	}

	/**
	 * Redirect to the code_editor script.
	 *
	 * @return tempcode		The UI
	 */
	function code_editor()
	{
		$title=get_screen_title('CODE_EDITOR');
		require_code('site2');
		assign_refresh(get_base_url().'/code_editor.php',0.0);
		return do_template('REDIRECT_SCREEN',array('_GUID'=>'d9a0d9eefa1092e8b2604dce2378344f','URL'=>get_base_url().'/code_editor.php','TITLE'=>$title,'TEXT'=>do_lang_tempcode('REDIRECTING')));
	}

	/**
	 * The UI to edit the fields XML file.
	 *
	 * @return tempcode		The UI
	 */
	function xml_fields()
	{
		set_helper_panel_tutorial('tut_fields_filter');
		set_helper_panel_text(comcode_lang_string('DOC_FIELD_FILTERS'));

		$title=get_screen_title('FIELD_FILTERS');

		$post_url=build_url(array('page'=>'_SELF','type'=>'_xml_fields'),'_SELF');

		return do_template('XML_CONFIG_SCREEN',array(
			'_GUID'=>'cc21f921ecbdbdf83e1e28d2b3f75a3a',
			'TITLE'=>$title,
			'POST_URL'=>$post_url,
			'XML'=>file_exists(get_custom_file_base().'/data_custom/fields.xml')?file_get_contents(get_custom_file_base().'/data_custom/fields.xml'):'',
		));
	}

	/**
	 * The UI actualiser edit the fields XML file.
	 *
	 * @return tempcode		The UI
	 */
	function _xml_fields()
	{
		$title=get_screen_title('FIELD_FILTERS');

		$myfile=@fopen(get_custom_file_base().'/data_custom/fields.xml','wt');
		if ($myfile===false) intelligent_write_error(get_custom_file_base().'/data_custom/fields.xml');
		$xml=post_param('xml');
		if (fwrite($myfile,$xml)<strlen($xml)) warn_exit(do_lang_tempcode('COULD_NOT_SAVE_FILE'));
		fclose($myfile);
		fix_permissions(get_custom_file_base().'/data_custom/fields.xml');
		sync_file(get_custom_file_base().'/data_custom/fields.xml');

		log_it('FIELD_FILTERS');

		return inform_screen($title,do_lang_tempcode('SUCCESS'));
	}

	/**
	 * The UI to edit the breadcrumbs XML file.
	 *
	 * @return tempcode		The UI
	 */
	function xml_breadcrumbs()
	{
		set_helper_panel_tutorial('tut_structure');
		set_helper_panel_text(comcode_lang_string('DOC_BREADCRUMB_OVERRIDES'));

		$title=get_screen_title('BREADCRUMB_OVERRIDES');

		$post_url=build_url(array('page'=>'_SELF','type'=>'_xml_breadcrumbs'),'_SELF');

		return do_template('XML_CONFIG_SCREEN',array(
			'_GUID'=>'456f56149832d459bce72ca63a1578b9',
			'TITLE'=>$title,
			'POST_URL'=>$post_url,
			'XML'=>file_exists(get_custom_file_base().'/data_custom/breadcrumbs.xml')?file_get_contents(get_custom_file_base().'/data_custom/breadcrumbs.xml'):'',
		));
	}

	/**
	 * The UI actualiser edit the breadcrumbs XML file.
	 *
	 * @return tempcode		The UI
	 */
	function _xml_breadcrumbs()
	{
		$title=get_screen_title('BREADCRUMB_OVERRIDES');

		$myfile=@fopen(get_custom_file_base().'/data_custom/breadcrumbs.xml','wt');
		if ($myfile===false) intelligent_write_error(get_custom_file_base().'/data_custom/breadcrumbs.xml');
		$xml=post_param('xml');
		if (fwrite($myfile,$xml)<strlen($xml)) warn_exit(do_lang_tempcode('COULD_NOT_SAVE_FILE'));
		fclose($myfile);
		fix_permissions(get_custom_file_base().'/data_custom/breadcrumbs.xml');
		sync_file(get_custom_file_base().'/data_custom/breadcrumbs.xml');

		log_it('BREADCRUMB_OVERRIDES');

		return inform_screen($title,do_lang_tempcode('SUCCESS'));
	}

}


