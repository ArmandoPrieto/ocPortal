<?php /*

 ocPortal
 Copyright (c) ocProducts, 2004-2011

 See text/EN/licence.txt for full licencing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license		http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright	ocProducts Ltd
 * @package		points
 */

/**
 * Module page class.
 */
class Module_points
{

	/**
	 * Standard modular info function.
	 *
	 * @return ?array	Map of module info (NULL: module is disabled).
	 */
	function info()
	{
		$info=array();
		$info['author']='Chris Graham'; 
		$info['organisation']='ocProducts'; 
		$info['hacked_by']=NULL; 
		$info['hack_version']=NULL;
		$info['version']=5;
		$info['locked']=true;
		$info['update_require_upgrade']=1;
		return $info;
	}
	
	/**
	 * Standard modular uninstall function.
	 */
	function uninstall()
	{
		$GLOBALS['SITE_DB']->drop_if_exists('chargelog');
		$GLOBALS['SITE_DB']->drop_if_exists('gifts');

		delete_config_option('points_joining');
		delete_config_option('points_posting');
		delete_config_option('points_rating');
		delete_config_option('points_voting');
		delete_config_option('points_per_day');
		delete_config_option('points_per_daily_visit');
		delete_config_option('points_show_personal_profile_link');
		delete_config_option('points_show_personal_stats_points_left');
		delete_config_option('points_show_personal_stats_points_used');
		delete_config_option('points_show_personal_stats_gift_points_left');
		delete_config_option('points_show_personal_stats_gift_points_used');
		delete_config_option('points_show_personal_stats_total_points');

		delete_specific_permission('give_points_self');
		delete_specific_permission('have_negative_gift_points');
		delete_specific_permission('give_negative_points');
		delete_specific_permission('view_charge_log');
		delete_specific_permission('use_points');
		delete_specific_permission('trace_anonymous_gifts');

		delete_menu_item_simple('_SEARCH:points:type=member:id={$USER_OVERIDE}');
		delete_menu_item_simple('_SEARCH:points:type=member');
	}

	/**
	 * Standard modular install function.
	 *
	 * @param  ?integer	What version we're upgrading from (NULL: new install)
	 * @param  ?integer	What hack version we're upgrading from (NULL: new-install/not-upgrading-from-a-hacked-version)
	 */
	function install($upgrade_from=NULL,$upgrade_from_hack=NULL)
	{
		if ((is_null($upgrade_from)) || ($upgrade_from<3))
		{
			add_specific_permission('POINTS','use_points',true);
		}

		if (is_null($upgrade_from))
		{
			$GLOBALS['SITE_DB']->create_table('chargelog',array(
				'id'=>'*AUTO',
				'user_id'=>'USER',
				'amount'=>'INTEGER',
				'reason'=>'SHORT_TRANS',	// Comcode
				'date_and_time'=>'TIME'
			));

			$GLOBALS['SITE_DB']->create_table('gifts',array(
				'id'=>'*AUTO',
				'date_and_time'=>'TIME',
				'amount'=>'INTEGER',
				'gift_from'=>'USER',
				'gift_to'=>'USER',
				'reason'=>'SHORT_TRANS',	// Comcode
				'anonymous'=>'BINARY'
			));
			$GLOBALS['SITE_DB']->create_index('gifts','giftsgiven',array('gift_from'));
			$GLOBALS['SITE_DB']->create_index('gifts','giftsreceived',array('gift_to'));

			add_config_option('JOINING','points_joining','integer','return \'40\';','POINTS','COUNT_POINTS_GIVEN');
			add_config_option('MAKE_POST','points_posting','integer','return \'5\';','POINTS','COUNT_POINTS_GIVEN');
			add_config_option('RATING','points_rating','integer','return \'5\';','POINTS','COUNT_POINTS_GIVEN');
			add_config_option('VOTING','points_voting','integer','return \'5\';','POINTS','COUNT_POINTS_GIVEN');

			add_specific_permission('POINTS','give_points_self',false);
			add_specific_permission('POINTS','have_negative_gift_points',false);
			add_specific_permission('POINTS','give_negative_points',false);
			add_specific_permission('POINTS','view_charge_log',false);

			require_lang('points');
			add_menu_item_simple('pc_features',NULL,'POINTS','_SEARCH:points:type=member:id={$USER_OVERIDE}',0,0,true,do_lang('ZONE_BETWEEN'));
			add_menu_item_simple('forum_personal',NULL,'POINTS','_SEARCH:points:type=member',0,0,true,do_lang('ZONE_BETWEEN'));
		}

		if ((!is_null($upgrade_from)) && ($upgrade_from<5))
		{
			delete_config_option('is_on_points');
		}

		if ((is_null($upgrade_from)) || ($upgrade_from<5))
		{
			add_config_option('MY_POINTS_LINK','points_show_personal_profile_link','tick','return \'1\';','BLOCKS','PERSONAL_BLOCK');
			add_config_option('COUNT_POINTS_LEFT','points_show_personal_stats_points_left','tick','return \'0\';','BLOCKS','PERSONAL_BLOCK');
			add_config_option('COUNT_POINTS_USED','points_show_personal_stats_points_used','tick','return \'0\';','BLOCKS','PERSONAL_BLOCK');
			add_config_option('COUNT_GIFT_POINTS_LEFT','points_show_personal_stats_gift_points_left','tick','return \'0\';','BLOCKS','PERSONAL_BLOCK');
			add_config_option('COUNT_GIFT_POINTS_USED','points_show_personal_stats_gift_points_used','tick','return \'0\';','BLOCKS','PERSONAL_BLOCK');
			add_config_option('COUNT_POINTS_EVER','points_show_personal_stats_total_points','tick','return \'0\';','BLOCKS','PERSONAL_BLOCK');

			add_specific_permission('POINTS','trace_anonymous_gifts',false);
		}

		if ((is_null($upgrade_from)) || ($upgrade_from<4))
		{
			add_config_option('POINTS_PER_DAY','points_per_day','integer','return \'0\';','POINTS','COUNT_POINTS_GIVEN');
			add_config_option('POINTS_PER_DAILY_VISIT','points_per_daily_visit','integer','return \'0\';','POINTS','COUNT_POINTS_GIVEN');
		}
	}

	/**
	 * Standard modular entry-point finder function.
	 *
	 * @return ?array	A map of entry points (type-code=>language-code) (NULL: disabled).
	 */
	function get_entry_points()
	{
		return array('member'=>'POINTS','browser'=>'BROWSE_POINT_PROFILES','misc'=>'USER_POINT_FIND');
	}
	
	/**
	 * Standard modular run function.
	 *
	 * @return tempcode	The result of execution.
	 */
	function run()
	{
		require_code('points');
		require_css('points');
		require_lang('points');

		// Work out what we're doing here
		$type=get_param('type','misc');

		if ($type=='_search') return $this->points_search_results();
		if ($type=='give') return $this->do_give();
		if ($type=='member') return $this->points_profile();
		if ($type=='browser') return $this->points_profile(db_get_first_id()+1);
		if ($type=='misc') return $this->points_search_form();
	
		return new ocp_tempcode();
	}
	
	/**
	 * The UI to search for a member (with regard to viewing their point profile).
	 *
	 * @return tempcode		The UI
	 */
	function points_search_form()
	{
		$GLOBALS['FEED_URL']=find_script('backend').'?mode=points&filter=';

		$title=get_page_title('USER_POINT_FIND');
	
		$post_url=build_url(array('page'=>'_SELF','type'=>'_search'),'_SELF',NULL,false,true);
		require_code('form_templates');
		if (!is_guest())
		{
			$username=$GLOBALS['FORUM_DRIVER']->get_username(get_member());
		} else
		{
			$username='';
		}
		$fields=form_input_username(do_lang_tempcode('USERNAME'),'','membername',$username,true,false);
		$submit_name=do_lang_tempcode('SEARCH');
		$text=new ocp_tempcode();
		$text->attach(paragraph(do_lang_tempcode('POINTS_SEARCH_FORM')));
		$text->attach(paragraph(do_lang_tempcode('WILDCARD')));

		return do_template('FORM_SCREEN',array('_GUID'=>'e5ab8d5d599093d1a550cb3b3e56d2bf','GET'=>true,'SKIP_VALIDATION'=>true,'HIDDEN'=>'','TITLE'=>$title,'URL'=>$post_url,'FIELDS'=>$fields,'SUBMIT_NAME'=>$submit_name,'TEXT'=>$text));
	}
	
	/**
	 * The actualiser for a points profile search.
	 *
	 * @return tempcode		The UI
	 */
	function points_search_results()
	{
		$GLOBALS['FEED_URL']=find_script('backend').'?mode=points&filter=';

		$membername=str_replace('*','%',get_param('membername'));
		if ((substr($membername,0,1)=='%') && ($GLOBALS['FORUM_DRIVER']->get_members()>3000))
			warn_exit(do_lang_tempcode('CANNOT_WILDCARD_START'));
		if ((strpos($membername,'%')!==false) && (strpos($membername,'%')<6) && ($GLOBALS['FORUM_DRIVER']->get_members()>30000))
			warn_exit(do_lang_tempcode('CANNOT_WILDCARD_START'));
		if ((strpos($membername,'%')!==false) && (strpos($membername,'%')<12) && ($GLOBALS['FORUM_DRIVER']->get_members()>300000))
			warn_exit(do_lang_tempcode('CANNOT_WILDCARD_START'));
		$rows=$GLOBALS['FORUM_DRIVER']->get_matching_members($membername,100);
		if (!array_key_exists(0,$rows))
		{
			$title=get_page_title('USER_POINT_FIND');
			return warn_screen($title,do_lang_tempcode('NO_RESULTS'));
		}
	//	if (count($rows)>1)
		{
			$title=get_page_title('USER_POINT_FIND');

			$results=new ocp_tempcode();
			foreach ($rows as $myrow)
			{
				$id=$GLOBALS['FORUM_DRIVER']->pname_id($myrow);
				if (!is_guest($id))
				{
					$url=build_url(array('page'=>'_SELF','type'=>'member','id'=>$id),'_SELF');
					$name=$GLOBALS['FORUM_DRIVER']->pname_name($myrow);
	
					$results->attach(do_template('POINTS_SEARCH_RESULT',array('_GUID'=>'df240255b2981dcaee38e126622be388','URL'=>$url,'ID'=>strval($id),'NAME'=>$name)));
				}
			}

			$ret=do_template('POINTS_SEARCH_SCREEN',array('_GUID'=>'659af8a012d459db09dad0325a75ac70','TITLE'=>$title,'RESULTS'=>$results));
		}

	//	  $ret=$this->points_profile($GLOBALS['FORUM_DRIVER']->pname_id($rows[0]));

		breadcrumb_set_parents(array(array('_SELF:_SELF:misc',do_lang_tempcode('USER_POINT_FIND'))));

		return $ret;
	}

	/**
	 * The UI for a points profile.
	 *
	 * @param  ?MEMBER		The member the points profile of which is being viewed (NULL: read from GET parameter 'id')
	 * @return tempcode		The UI
	 */
	function points_profile($member=NULL)
	{
		require_javascript('javascript_validation');

		if (is_null($member)) $member=get_param_integer('id',get_member());

		$GLOBALS['FEED_URL']=find_script('backend').'?mode=points&filter='.strval($member);

		// Get info about viewing/giving user
		$viewer_member=get_member();
		if (!is_guest($viewer_member))
		{
			$viewer_gift_points_available=get_gift_points_to_give($viewer_member);
		}
	
		// Get info about viewed user
		$name=$GLOBALS['FORUM_DRIVER']->get_username($member);
		if ((is_null($name)) || (is_guest($member))) warn_exit(do_lang_tempcode('USER_NO_EXIST'));
		$title=get_page_title('_POINTS',true,array(escape_html($name)));

		$max_rows=$GLOBALS['FORUM_DRIVER']->get_members();
		$page_num=intval(floor(floatval($member-1)/1.0))+1;
		$num_pages=intval(ceil(floatval($max_rows)/1.0));

		// Previous/Next links
		$tempid=$GLOBALS['FORUM_DRIVER']->get_previous_member($member);
		if (is_null($tempid)) $previous_link=new ocp_tempcode();
			else $previous_link=build_url(array('page'=>'_SELF','type'=>'member','id'=>$tempid),'_SELF');
		$tempid=$GLOBALS['FORUM_DRIVER']->get_next_member($member);
		if (is_null($tempid)) $next_link=new ocp_tempcode();
			else $next_link=build_url(array('page'=>'_SELF','type'=>'member','id'=>$tempid),'_SELF');
		$browse=do_template('NEXT_BROWSER_BROWSE_NEXT',array('_GUID'=>'188c059239b39ca8ee70f85b38019490','PREVIOUS_LINK'=>$previous_link,'NEXT_LINK'=>$next_link,'PAGE_NUM'=>integer_format($page_num),'NUM_PAGES'=>integer_format($num_pages)));

		$profile_link=$GLOBALS['FORUM_DRIVER']->member_profile_link($member,false,true);

		// Show stats about $member
		$post_count=$GLOBALS['FORUM_DRIVER']->get_post_count($member);
		$_point_info=point_info($member);
		$points_gained_given=array_key_exists('points_gained_given',$_point_info)?$_point_info['points_gained_given']:0;
		$points_gained_rating=array_key_exists('points_gained_rating',$_point_info)?$_point_info['points_gained_rating']:0;
		$points_gained_voting=array_key_exists('points_gained_voting',$_point_info)?$_point_info['points_gained_voting']:0;
		$cedi_post_count=array_key_exists('points_gained_seedy',$_point_info)?$_point_info['points_gained_seedy']:0;
		$chat_post_count=array_key_exists('points_gained_chat',$_point_info)?$_point_info['points_gained_chat']:0;
		$points_used=points_used($member);
		$remaining=available_points($member);
		$gift_points_used=get_gift_points_used($member); //$_point_info['gift_points_used'];
		$gift_points_available=get_gift_points_to_give($member);

		$points_posting=intval(get_option('points_posting'));
		$points_rating=intval(get_option('points_rating'));
		$points_voting=intval(get_option('points_voting'));
		$points_joining=intval(get_option('points_joining'));
		$points_cedi_posting=intval(get_option('points_cedi',true));
		$points_chat_posting=intval(get_option('points_chat',true));
		$points_per_day=intval(get_option('points_per_day',true));
		$points_per_daily_visit=intval(get_option('points_per_daily_visit',true));

		$days_joined=intval(floor(floatval(time()-$GLOBALS['FORUM_DRIVER']->get_member_join_timestamp($member))/(60.0*60.0*24.0)));
		$points_gained_auto=$points_per_day*$days_joined;

		$to=$this->get_transactions('to',$member);
		$from=$this->get_transactions('from',$member);
	
		// If we're staff, we can show the charge log too
		$chargelog_details=new ocp_tempcode();
		if (has_specific_permission($viewer_member,'view_charge_log'))
		{
			$start=get_param_integer('start',0);
			$max=get_param_integer('max',50);
			$sortables=array('date_and_time'=>do_lang_tempcode('DATE'),'amount'=>do_lang_tempcode('AMOUNT'));
			$test=explode(' ',get_param('sort','date_and_time DESC'),2);
			if (count($test)==1) $test[1]='DESC';
			list($sortable,$sort_order)=$test;
			if (((strtoupper($sort_order)!='ASC') && (strtoupper($sort_order)!='DESC')) || (!array_key_exists($sortable,$sortables)))
				log_hack_attack_and_exit('ORDERBY_HACK');
			global $NON_CANONICAL_PARAMS;
			$NON_CANONICAL_PARAMS[]='sort';
	
			$max_rows=$GLOBALS['SITE_DB']->query_value('chargelog','COUNT(*)',array('user_id'=>$member));
			$rows=$GLOBALS['SITE_DB']->query_select('chargelog c LEFT JOIN '.$GLOBALS['SITE_DB']->get_table_prefix().'translate t ON '.db_string_equal_to('language',user_lang()).' AND t.id=c.reason',array('*'),array('user_id'=>$member),'ORDER BY '.$sortable.' '.$sort_order,$max,$start);
			$charges=new ocp_tempcode();
			$fromname=get_site_name();
			$toname=$GLOBALS['FORUM_DRIVER']->get_username($member);
			if (is_null($toname)) $toname=do_lang('UNKNOWN');
			require_code('templates_results_table');
			$fields_title=results_field_title(array(do_lang_tempcode('DATE'),do_lang_tempcode('AMOUNT'),do_lang_tempcode('FROM'),do_lang_tempcode('TO'),do_lang_tempcode('REASON')),$sortables,'sort',$sortable.' '.$sort_order);
			foreach ($rows as $myrow)
			{
				$date=get_timezoned_date($myrow['date_and_time']);
				$amount=$myrow['amount'];

				if ((get_page_name()!='search') && (array_key_exists('text_parsed',$myrow)) && (!is_null($myrow['text_parsed'])) && ($myrow['text_parsed']!='') && ($myrow['reason']!=0))
				{
					$reason=new ocp_tempcode();
					$reason->from_assembly($myrow['text_parsed']);
				} else
				{
					$reason=get_translated_tempcode($myrow['reason']);
				}
	
				$charges->attach(results_entry(array(escape_html($date),escape_html($amount),escape_html($fromname),escape_html($toname),$reason)));
			}
			$chargelog_details=results_table(do_lang_tempcode('CHARGES'),$start,'start',$max,'max',$max_rows,$fields_title,$charges,$sortables,$sortable,$sort_order,'sort');

			$chargelog_details->attach(do_template('POINTS_CHARGE',array('_GUID'=>'f1e2d45a7d920ab91553a5fd0728a5ad','URL'=>build_url(array('page'=>'admin_points','type'=>'charge','redirect'=>get_self_url(true)),get_module_zone('admin_points')),'USER'=>strval($member))));
		}

		// Show giving form
		if (is_guest($viewer_member)) $give_template=do_lang_tempcode('POINTS_MUST_LOGIN');
		else
		{
			$have_negative_gift_points=has_specific_permission($viewer_member,'have_negative_gift_points');
			$enough_ok=(($viewer_gift_points_available>0) || ($have_negative_gift_points));
			$give_ok=(($viewer_member!=$member) || (has_specific_permission($viewer_member,'give_points_self')));
			if (($enough_ok) && ($give_ok))
			{
				// Show how many points are available also
				$give_url=build_url(array('page'=>'_SELF','type'=>'give','id'=>$member),'_SELF');
				$give_template=do_template('POINTS_GIVE',array('_GUID'=>'fa1749d5a803d86b1efbcfde2ad81702','GIVE_URL'=>$give_url,'USER'=>strval($member),'VIEWER_GIFT_POINTS_AVAILABLE'=>$have_negative_gift_points?'':integer_format($viewer_gift_points_available)));
			}
			else $give_template=do_lang_tempcode('PE_LACKING_GIFT_POINTS');
			if (!$give_ok) $give_template=new ocp_tempcode();
		}

		breadcrumb_set_parents(array(array('_SELF:_SELF:misc',do_lang_tempcode('USER_POINT_FIND'))));

		return do_template('POINTS_SCREEN',array(
			'_GUID'=>'f91208ef0f9a1e1a8633ce307a778a8d',
			'TITLE'=>$title,
			'MEMBER'=>strval($member),
			'PROFILE_LINK'=>$profile_link,
			'BROWSE'=>$browse,
			'NAME'=>$name,

			'POINTS_JOINING'=>integer_format($points_joining),

			'POST_COUNT'=>integer_format($post_count),
			'POINTS_POSTING'=>integer_format($points_posting),
			'MULT_POINTS_POSTING'=>integer_format($points_posting*$post_count),

			'POINTS_PER_DAY'=>integer_format($points_per_day),
			'DAYS_JOINED'=>integer_format($days_joined),
			'MULT_POINTS_PER_DAY'=>integer_format($points_per_day*$days_joined),
			'POINTS_GAINED_AUTO'=>integer_format($points_gained_auto), // This isn't needed now, it is same as MULT_POINTS_PER_DAY

			'CEDI_POST_COUNT'=>integer_format($cedi_post_count),
			'POINTS_CEDI_POSTING'=>integer_format($points_cedi_posting),
			'MULT_POINTS_CEDI_POSTING'=>integer_format($cedi_post_count*$points_cedi_posting),

			'CHAT_POST_COUNT'=>integer_format($chat_post_count),
			'POINTS_CHAT_POSTING'=>integer_format($points_chat_posting),
			'MULT_POINTS_CHAT_POSTING'=>integer_format($chat_post_count*$points_chat_posting),

			'POINTS_RATING'=>integer_format($points_rating),
			'POINTS_GAINED_RATING'=>integer_format($points_gained_rating),
			'MULT_POINTS_RATING'=>integer_format($points_rating*$points_gained_rating),

			'POINTS_VOTING'=>integer_format($points_voting),
			'POINTS_GAINED_VOTING'=>integer_format($points_gained_voting),
			'MULT_POINTS_VOTING'=>integer_format($points_voting*$points_gained_voting),

			'POINTS_PER_DAILY_VISIT'=>integer_format($points_per_daily_visit),
			'POINTS_GAINED_GIVEN'=>integer_format($points_gained_given),
			'POINTS_USED'=>integer_format($points_used),
			'REMAINING'=>integer_format($remaining),
			'GIFT_POINTS_USED'=>integer_format($gift_points_used),
			'GIFT_POINTS_AVAILABLE'=>integer_format($gift_points_available),
			'TO'=>$to,
			'FROM'=>$from,
			'CHARGELOG_DETAILS'=>$chargelog_details,
			'GIVE'=>$give_template,
		));
	}

	/**
	 * Show the point transactions a member has had.
	 *
	 * @param  ID_TEXT			The type of transactions we are looking for
	 * @set    from to
	 * @param  MEMBER			Who we are looking at transactions for
	 * @return tempcode		The UI
	 */
	function get_transactions($type,$member)
	{
		$where=array('gift_'.$type=>$member);
		if ($type=='from') $where['anonymous']=0;
		$start=get_param_integer('gift_start',0);
		$max=get_param_integer('gift_max',50);
		$sortables=array('date_and_time'=>do_lang_tempcode('DATE'),'amount'=>do_lang_tempcode('AMOUNT'));
		$test=explode(' ',get_param('gift_sort','date_and_time DESC'));
		if (count($test)==1) $test[1]='DESC';
		list($sortable,$sort_order)=$test;
		if (((strtoupper($sort_order)!='ASC') && (strtoupper($sort_order)!='DESC')) || (!array_key_exists($sortable,$sortables)))
			log_hack_attack_and_exit('ORDERBY_HACK');
		global $NON_CANONICAL_PARAMS;
		$NON_CANONICAL_PARAMS[]='gift_sort';
		$max_rows=$GLOBALS['SITE_DB']->query_value('gifts','COUNT(*)',$where);
		$rows=$GLOBALS['SITE_DB']->query_select('gifts g LEFT JOIN '.$GLOBALS['SITE_DB']->get_table_prefix().'translate t ON '.db_string_equal_to('language',user_lang()).' AND t.id=g.reason',array('*'),$where,'ORDER BY '.$sortable.' '.$sort_order,$max,$start);
		$out=new ocp_tempcode();
		$viewing_name=$GLOBALS['FORUM_DRIVER']->get_username($member);
		if (is_null($viewing_name)) $viewing_name=do_lang('UNKNOWN');
		require_code('templates_results_table');
		$fields_title=results_field_title(array(do_lang_tempcode('DATE'),do_lang_tempcode('AMOUNT'),do_lang_tempcode('FROM'),do_lang_tempcode('TO'),do_lang_tempcode('REASON')),$sortables,'gift_sort',$sortable.' '.$sort_order);
		foreach ($rows as $myrow)
		{
			if (($myrow['anonymous']==1) && ($type=='from')) continue;

			// Their name
			$fromname=(is_guest($myrow['gift_from']))?get_site_name():$GLOBALS['FORUM_DRIVER']->get_username($myrow['gift_from']);
			$toname=$GLOBALS['FORUM_DRIVER']->get_username($myrow['gift_to']);
			if (is_null($fromname)) $fromname=do_lang('UNKNOWN');
			if (($myrow['anonymous']==1) && (!is_guest($myrow['gift_from'])))
			{
				if (!has_specific_permission(get_member(),'trace_anonymous_gifts'))
				{
					$_fromname=do_lang_tempcode('ANON');
				} else
				{
					$_fromname=hyperlink(build_url(array('page'=>'_SELF','type'=>'member','id'=>$myrow['gift_from']),'_SELF'),do_lang_tempcode('ANON'),false,false,escape_html($fromname));
				}
			} else
			{
				$_fromname=(is_guest($myrow['gift_from']))?make_string_tempcode(escape_html($fromname)):hyperlink(build_url(array('page'=>'_SELF','type'=>'member','id'=>$myrow['gift_from']),'_SELF'),escape_html($fromname),false,false,do_lang_tempcode('VIEW_POINTS'));
			}
			$_toname=hyperlink(build_url(array('page'=>'_SELF','type'=>'member','id'=>$myrow['gift_to']),'_SELF'),escape_html($toname),false,false,do_lang_tempcode('VIEW_POINTS'));

			$date=get_timezoned_date($myrow['date_and_time']);
			$amount=$myrow['amount'];

			if ((get_page_name()!='search') && (array_key_exists('text_parsed',$myrow)) && (!is_null($myrow['text_parsed'])) && ($myrow['text_parsed']!='') && ($myrow['reason']!=0))
			{
				$reason=new ocp_tempcode();
				$reason->from_assembly($myrow['text_parsed']);
			} else
			{
				$reason=get_translated_tempcode($myrow['reason']);
			}

			$out->attach(results_entry(array(escape_html($date),escape_html($amount),$_fromname,$_toname,$reason)));
		}
		$out=results_table(do_lang_tempcode('_POINTS',escape_html($viewing_name)),$start,'gift_start',$max,'gift_max',$max_rows,$fields_title,$out,$sortables,$sortable,$sort_order,'gift_sort');

		if ($type=='to') $title=do_lang_tempcode('POINTS_TO'); else $title=do_lang_tempcode('POINTS_FROM');
		return do_template('POINTS_TRANSACTIONS_WRAP',array('_GUID'=>'f19e3eedeb0b8bf398251b24e8389723','CONTENT'=>$out,'TITLE'=>$title));
	}
	
	/**
	 * The actualiser for a gift point transaction.
	 *
	 * @return tempcode		The UI
	 */
	function do_give()
	{
		$title=get_page_title('POINTS');

		$trans_type=post_param('trans_type','gift');

		$viewer_member=get_member();
		$member=get_param_integer('id');
	
		$amount=post_param_integer('amount');
		$reason=post_param('reason');
		
		$worked=false;
	
		if (($member==$viewer_member) && (!has_specific_permission($viewer_member,'give_points_self'))) // No cheating
		{
			$message=do_lang_tempcode('PE_SELF');
		}
		elseif (is_guest($viewer_member)) // No cheating
		{
			$message=do_lang_tempcode('MUST_LOGIN');
		} else
		{
			if ($trans_type=='gift')
			{
				$anonymous=post_param_integer('anonymous',0);
				$viewer_gift_points_available=get_gift_points_to_give($viewer_member);
				//$viewer_gift_points_used=get_gift_points_used($viewer_member);

				if (($viewer_gift_points_available<$amount) && (!has_specific_permission($viewer_member,'have_negative_gift_points'))) // Validate we have enough for this, and add to usage
				{
					$message=do_lang_tempcode('PE_LACKING_GIFT_POINTS');
				}
				elseif (($amount<0) && (!has_specific_permission($viewer_member,'give_negative_points'))) // Trying to be negative
				{
					$message=do_lang_tempcode('PE_NEGATIVE_GIFT');
				}
				elseif ($reason=='') // Must give a reason
				{
					$message=do_lang_tempcode('IMPROPERLY_FILLED_IN');
				} else
				{
					// Write transfer
					require_code('points2');
					give_points($amount,$member,$viewer_member,$reason,$anonymous==1);

					// Randomised gifts
					if (mt_rand(0,4)==1)
					{
						$message=do_lang_tempcode('PR_LUCKY');
						$_current_gift=point_info($viewer_member);
						$current_gift=array_key_exists('points_gained_given',$_current_gift)?$_current_gift['points_gained_given']:0;
						$GLOBALS['FORUM_DRIVER']->set_custom_field($viewer_member,'points_gained_given',$current_gift+25);
					} else $message=do_lang_tempcode('PR_NORMAL');

					$worked=true;
				}
			}

			if ($trans_type=='refund')
			{
				$trans_type='charge';
				$amount=-$amount;
			}
			if ($trans_type=='charge')
			{
				if (has_actual_page_access($viewer_member,'adminzone'))
				{
					require_code('points2');
					charge_member($member,$amount,$reason);
					$left=available_points($member);

					$username=$GLOBALS['FORUM_DRIVER']->get_username($member);
					if (is_null($username)) $username=do_lang('UNKNOWN');
					$message=do_lang_tempcode('USER_HAS_BEEN_CHARGED',escape_html($username),escape_html(integer_format($amount)),escape_html(integer_format($left)));

					$worked=true;
				} else
				{
					access_denied('I_ERROR');
				}
			}
		}
	
		breadcrumb_set_parents(array(array('_SELF:_SELF:misc',do_lang_tempcode('USER_POINT_FIND')),array('_SELF:_SELF:member:id='.strval($member),do_lang_tempcode('_POINTS',escape_html($GLOBALS['FORUM_DRIVER']->get_username($member))))));

		if ($worked)
		{
			// Show it worked / Refresh
			$url=build_url(array('page'=>'_SELF','type'=>'member','id'=>$member),'_SELF');
			return redirect_screen($title,$url,$message);
		} else return warn_screen($title,$message);
	}

}


