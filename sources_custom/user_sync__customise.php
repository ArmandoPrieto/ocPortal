<?php /*

 ocPortal
 Copyright (c) ocProducts, 2004-2012

 See text/EN/licence.txt for full licencing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license		http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright	ocProducts Ltd
 * @package		user_sync
 */

/*

Customise this code for your particular import scenario.

*/

function get_user_sync_env()
{
	$db_type='mysql';
	$db_host=get_db_site_host();
	$db_name='thecnm';
	$db_user=get_db_site_user();
	$db_password=get_db_site_password();
	$db_table='cnm_students';
	$db_field_delim='`';

	//$username_fields=array('first_name','Surname'); // Fields that forms the username
	$username_fields=array('contact_ref');
	$username_fields_types=array('VARCHAR');

	$time_field='modification';

	$field_remap=array(
		/*'
		e.g.

		OCP FIELD NAME (without prefix)'=>array(
			'LOOKUP TYPE (default, field, or callback)',
			'SOURCE FIELD NAME or VALUE or CALLBACK',
			array(REMAPS [optional]),
			array(REVERSE REMAPS [optional]),
			'DESTINATION TYPE [optional - defaults to something based upon PHP type; expects a standard SQL type name]',
		),
		*/

		'email_address'=>array(
			'field',
			'email_address',
		),
		'groups'=>array(
			'callback',
			'get_user_sync_env__groups',
		),
		'primary_group'=>array(
			'callback',
			'get_user_sync_env__primary_group',
		),
		'on_probation_until'=>array(
			'callback',
			'get_user_sync_env__on_probation_until',
		),

		// CPFs...
		'Title'=>array(
			'field',
			'Title',
		),
		'Forename'=>array(
			'field',
			'first_name',
		),
		'Surname'=>array(
			'field',
			'Surname',
		),
		'Nationality'=>array(
			'field',
			'Nationality',
		),
		'Address 1'=>array(
			'field',
			'Address 1',
		),
		'Address 2'=>array(
			'field',
			'Address 2',
		),
		'Address 3'=>array(
			'field',
			'Address 3',
		),
		'Address 4'=>array(
			'field',
			'town',
		),
		'City'=>array(
			'field',
			'city',
		),
		'County'=>array(
			'field',
			'County',
		),
		'Post Code'=>array(
			'field',
			'Postcode',
		),
		'Country'=>array(
			'field',
			'Country',
		),
		'Phone (landline)'=>array(
			'field',
			'direct_line',
		),
		'Phone (mobile)'=>array(
			'field',
			'Mobile',
		),
		'Phone (work)'=>array(
			'field',
			'Telephone',
		),
		'Fax'=>array(
			'field',
			'fax number',
		),
		'Referring college'=>array(
			'field',
			'ref_col',
		),
		'Training provider'=>array(
			'callback',
			'get_user_sync_env__training_provider',
		),
	);

	$default_password=NULL; // NULL means random password
	$temporary_password=true;

	return array(
		$db_type,
		$db_host,
		$db_name,
		$db_user,
		$db_password,
		$db_table,

		$db_field_delim,

		$username_fields,
		$username_fields_types,
		$time_field,

		$field_remap,

		$default_password,
		$temporary_password,
	);
}

function get_user_sync_env__groups($field_name,$remote_data,$dbh,$member_id)
{
	$groups=_get_user_sync_env__groups($field_name,$remote_data,$dbh,$member_id);
	array_shift($groups); // Remove primary group
	return $groups;
}

function get_user_sync_env__primary_group($field_name,$remote_data,$dbh,$member_id)
{
	$groups=_get_user_sync_env__groups($field_name,$remote_data,$dbh,$member_id);
	return array_shift($groups); // Return primary group
}

function _get_user_sync_env__groups($field_name,$remote_data,$dbh,$member_id)
{
	$student_id=$remote_data['contact_ref'];

	// Cache check
	static $cache=array();
	if (array_key_exists($student_id,$cache))
	{
		return $cache[$student_id];
	}

	// Do calculation
	$groups=array(strval(get_first_default_group())); // The default usergroup
	if ($remote_data['email_address']=='') // If the member does not have an email address on record
	{
		// Do nothing in this case
	} else
	{
		if (!is_null($member_id))
		{
			$_secondary_groups=$GLOBALS['FORUM_DB']->query('SELECT g.id FROM '.$GLOBALS['FORUM_DB']->get_table_prefix().'f_group_members m JOIN f_groups g ON m.gm_group_id=g.id WHERE m.gm_member_id='.strval($member_id).' AND m.gm_validated=1 AND '.db_string_not_equal_to('g.g_rank_image',''));
			$secondary_groups=collapse_1d_complexity('gm_group_id',$_secondary_groups);
		} else
		{
			$secondary_groups=array();
		}
		$is_student=false;
		$is_student=false;

		$sth=$dbh->query('SELECT * FROM cnm_enrolements WHERE student_id='.strval($remote_data['contact_ref']));
		$enrolments=$sth->fetchAll(PDO::FETCH_ASSOC);
		foreach ($enrolments as $enrolment)
		{
			if (is_null($enrolment['course_completed'])) $enrolment['course_completed']='';
			switch ($enrolment['course_completed'])
			{
				case '': // blank means "In progress"
					$is_student=true;
					$secondary_groups[]=$enrolment['k_college_course_code'];
					break;

				case 'Completed':
					$is_graduate=true;
					break;

				default: // Some other case, e.g. Lecturer
					break;
			}
		}

		if ($is_student)
		{
			$groups=array('Students')+$secondary_groups;
		} elseif ($is_graduate)
		{
			$groups=array('Graduates')+$secondary_groups;
		}
	}

	// Cache set/return
	$cache[$student_id]=$groups;
	return $groups;
}

function get_user_sync_env__training_provider($field_name,$remote_data,$dbh)
{
	$ref_col=explode(chr(10),$remote_data['ref_col']);
	switch (array_pop($ref_col)/*checks last field*/)
	{
		case 'Cork':
		case 'Dublin':
		case 'Limerick':
		case 'Galway':
			return 'CNM IE';
		case 'Tampa':
			return 'ASNH';
		case 'London':
		case 'Birmingham':
		case 'Brighton':
		case 'Bristol':
		case 'Edinburgh':
		case 'Glasgow':
		case 'Manchester':
		case 'Belfast':
		case 'Exeter':
		default:
			return 'CNM UK';
	}
	return '';
}

function get_user_sync_env__on_probation_until($field_name,$remote_data,$dbh)
{
	if ($remote_data['block_web']=='Yes') return 2147483647; // Maximum timestamp
	return NULL;
}

function get_user_sync__begin($dbh,$since)
{
	// Make sure that we are not going to miss changed enrolments
	if (!is_null($since))
	{
		$sth=$dbh->query('UPDATE cnm_students SET modification=GREATEST(modification,(SELECT MAX(modification) FROM cnm_enrolements WHERE student_id=contact_ref))');
	}
}

function get_user_sync__finish($dbh,$since)
{
}

