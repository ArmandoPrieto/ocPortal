<?php /*

 ocPortal
 Copyright (c) ocProducts, 2004-2010

 See text/EN/licence.txt for full licencing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license		http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright	ocProducts Ltd
 * @package		activity_feed
 */


function submit_handler()
{
	header('Content-Type: text/xml');
//	header('HTTP/1.0 200 Ok');
	header("Cache-Control: no-cache, must-revalidate"); // HTTP/1.1
	header("Expires: Mon, 26 Jul 1997 05:00:00 GMT"); // Date in the past

	$response ='<'.'?xml version="1.0" encoding="'.get_charset().'" ?'.'>';
	$response.='<response><content>';

	$map=array();

	$guest_id=intval($GLOBALS['FORUM_DRIVER']->get_guest_id());

	if (!is_guest(get_member()))
	{
		$map['STATUS']=trim(either_param('status', ''));

		if ((post_param('zone', '')!='') && ($map['STATUS']!='') && ($map['STATUS']!=do_lang('TYPE_HERE')))
		{
			comcode_to_tempcode($map['STATUS'],$guest_id,false,NULL);

			$map['PRIVACY']=either_param('privacy', 'private');

			if (strlen(strip_tags($map['STATUS'])) < strlen($map['STATUS']))
			{
				$cc_guide=build_url(array('page'=>'userguide_comcode'),'site');
				$response.='<success>0</success><feedback><![CDATA[No HTML allowed. See <a href="'.$cc_guide->evaluate().'">Comcode Help</a> for info on the alternative.]]></feedback>';
			}
			else
			{
				if (strlen($map['STATUS'])>255)
				{
					$response.='<success>0</success><feedback>Message is '.strval(strlen($map['STATUS'])-255).' characters too long</feedback>';
				}
				else
				{
					$stored_id=syndicate_described_activity('RAW_DUMP',
													$map['STATUS'],
													'',
													'',
													'',
													'',
													'',
													'',
													($map['PRIVACY']=='public')?'1':'0'
					);

					if ($stored_id>0)
					{
						$response.='<success>1</success><feedback>Message received.</feedback>';
					}
					elseif ($stored_id==-1)
					{
						$response.='<success>0</success><feedback>Message already received.</feedback>';
					}
				}
			}
		}
	}
	else
		$response.='<success>0</success><feedback>'.do_lang('LOGIN_EXPIRED_POST').'</feedback>';

	$response.='</content></response>';

	echo $response;
}

function update_list_handler()
{
	$map=array();
	
	$map['max']=$GLOBALS['SITE_DB']->query_value_null_ok('values', 'the_value', array('the_name'=>get_zone_name()."_".get_page_name()."_update_max"));

	if (is_null($map['max']))
	{
		$map['max']='10';
	}

	$last_id=post_param('lastid', '-1');
	$mode=post_param('mode','all');

	//require_css('side_blocks');
	require_lang('activities');
	require_code('activities');
	require_code('addons_overview');

	$proceed_selection=true; //There are some cases in which even glancing at the database is a waste of precious time.

	$guest_id=intval($GLOBALS['FORUM_DRIVER']->get_guest_id());
	$viewer_id=intval(get_member()); //We'll need this later anyway.

	$can_remove_others = (has_zone_access($viewer_id,'adminzone'))?true:false;

	//Getting the member viewed id if available, member viewing if not
	$username=post_param('member_id',strval($viewer_id));
	if ($username=='') $username=strval($viewer_id);
	if (is_numeric($username))
	{
		$member_id=post_param_integer('member_id',$viewer_id);
		$username=$GLOBALS['FORUM_DRIVER']->get_member_row_field($member_id,'m_username');
		if ((is_null($username))) return do_lang_tempcode('USER_NO_EXIST');
	}
	else
	{
		$member_id=$GLOBALS['FORUM_DRIVER']->get_member_from_username($username);
		if (is_null($member_id)) return do_lang_tempcode('_USER_NO_EXIST',escape_html($username));
	}

	list($proceed_selection,$whereville)=find_activities($viewer_id,$mode,$member_id);

	header("Content-Type: text/xml");
	header("Cache-Control: no-cache, must-revalidate"); // HTTP/1.1
	header("Expires: Mon, 26 Jul 1997 05:00:00 GMT"); // Date in the past

	$response ='<'.'?xml version="1.0" encoding="'.get_charset().'" ?'.'>';

	if ($proceed_selection===true)
	{
		$activities=$GLOBALS['SITE_DB']->query('SELECT * FROM '.get_table_prefix().'activities WHERE (('.$whereville.') AND id>'.(($last_id=='')?'-1':$last_id).') ORDER BY a_time DESC',$map['max']);

		if (count($activities)>0)
		{
			$list_items='';
			foreach ($activities as $row)
			{
				list($message,$memberpic,$datetime,$member_url)=render_activity($row);

				$list_item=do_template('BLOCK_MAIN_ACTIVITIES_XML',array('ADDON_ICON'=>find_addon_icon($row['a_addon']), 'BITS'=>$message, 'MEMPIC'=>$memberpic, 'USERNAME'=>$GLOBALS['FORUM_DRIVER']->get_username($member_id), 'DATETIME'=>strval($datetime), 'MEMBER_URL'=>$member_url, 'LIID'=>strval($row['id']), 'ALLOW_REMOVE'=>(($row['a_member_id']==$viewer_id) || $can_remove_others)));
				// We dump our response in CDATA, since that lets us work around the
				// fact that our list elements aren't actually in a list, etc.
				// However, we allow comcode but some tags make use of CDATA. Since
				// CDATA can't be nested (as it's a form of comment), we take this
				// into account by base64 encoding the whole template and decoding
				// it in the browser. We wrap it in some arbitrary XML and a CDATA
				// tag so that the Javascript knows what it's received
				$list_items.='<listitem id="'.strval($row['id']).'"><![CDATA['.base64_encode($list_item->evaluate()).']]></listitem>';

			}
			$response.='<response><success>1</success><feedlen>'.$map['max'].'</feedlen><content>'.$list_items.'</content><supp>'.escape_html($whereville).'</supp></response>';
		}
		else
		{
			$response.='<response><success>2</success><content>NU - Nothing new.</content></response>';
		}
	}
	else
	{
		$response.='<response><success>2</success><content>NU - No feeds to select from.</content></response>';
	}

	echo $response;
}

function removal_handler()
{
	$is_guest=false; //Can't be doing with overcomplicated SQL breakages. Weed it out.
	$guest_id=intval($GLOBALS['FORUM_DRIVER']->get_guest_id());
	$viewer_id=intval(get_member()); //We'll need this later anyway.
	if ($guest_id==$viewer_id)
		$is_guest=true;

	$can_remove_others = (has_zone_access($viewer_id,'adminzone'))?true:false;

	header('Content-Type: text/xml');
	header("Cache-Control: no-cache, must-revalidate"); // HTTP/1.1
	header("Expires: Mon, 26 Jul 1997 05:00:00 GMT"); // Date in the past

	$response ='<'.'?xml version="1.0" encoding="'.get_charset().'" ?'.'>';
	$response.='<response>';

	$stat_id=post_param_integer('removal_id',-1);
	$stat_owner=($stat_id!=-1)?$GLOBALS['SITE_DB']->query_value_null_ok('activities', 'a_member_id', array('id'=>$stat_id)):NULL;

	if (($is_guest!==true) && (!is_null($stat_owner)))
	{
		if (($stat_owner!=$viewer_id) && ($can_remove_others!==true))
		{
			$response.='<success>0</success><err>perms</err>';
			$response.='<feedback>You do not have permission to remove this status message.</feedback><status_id>'.strval($stat_id).'</status_id>';
		}
		else //I suppose we can proceed now.
		{
			$GLOBALS['SITE_DB']->query_delete('activities', array('id'=>$stat_id),'',1);

			$response.='<success>1</success><feedback>Message deleted.</feedback><status_id>'.strval($stat_id).'</status_id>';
		}
	}
	elseif (is_null($stat_owner))
	{
		$response.='<success>0</success><err>missing</err><feedback>Missing ID for status removal or id does not exist.</feedback>';
	}
	else
		$response.='<success>0</success><feedback>Login expired, you must log in again to post</feedback>';

	$response.='</response>';

	echo $response;
}

/**
 * Maintains a text file in data_custom. This contains the latest activity's ID.
 * Since the Javascript polls for updates, it can check against this before
 * running any PHP.
 * Locking timeout code provided by "administrator at proxy-list dot org" on
 * http://php.net/manual/en/function.flock.php
 *
 * @param  integer		The ID we are going to write to the file
 * @param  integer		Our timeout in milliseconds (how long we should keep trying). Default: 1000
 * @param  boolean		Whether to force this ID to be the newest, even if it's less than the current value
 */
function log_newest_activity($id,$timeout=1000,$force=false)
{
	$filename = get_custom_file_base().'/data_custom/latest_activity.txt';

	// Grab a pointer for appending to this file
	// NOTE: ALWAYS open as append! Opening as write will wipe the file during
	// the fopen call, which is before we have a lock.
	$fp = fopen($filename, 'a+');

	// Only bother running if this file can be opened
	if ($fp)
	{
		// Grab our current time in milliseconds
		$start_time = microtime();

		$sleep_multiplier = $timeout / 10;

		// Start looping
		do
		{
			// Try to lock the file
			$can_write = flock($fp, LOCK_EX);

			// If lock is not obtained sleep for 0 <-> $timeout/10 milliseconds,
			// to avoid collision and CPU load
			if(!$can_write) usleep(intval(mt_rand(0, intval($sleep_multiplier))*1000));		// *1000 as usleep uses microseconds
		}
		while ((!$can_write) && ((microtime()-$start_time) < $timeout));

		// File was locked so now we can store information
		if ($can_write)
		{
			// Read the current value
			rewind($fp);
			$old_id = intval(fgets($fp,1024));
			// See if we should be updating the file (IDs increase numerically)
			if ($force || ($old_id < $id))
			{
				// If so then wipe the file (since we're in append mode,
				// but we want to overwrite)
				ftruncate($fp, 0);

				// Save our new ID
				fwrite($fp, strval($id));
			}
		}
		fclose($fp);
	}
}