<?php /*

 ocPortal
 Copyright (c) ocProducts, 2004-2011

 See text/EN/licence.txt for full licencing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license		http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright	ocProducts Ltd
 * @package		booking
 */

/*
This file deals specifically with maintaining the bookables, not specific bookings for them.
*/

function bookable_form()
{
	// TODO
	// TODO: Note that edits do not warn about invalid existing bookings, nor preserve old codes for if old bookings are edited
}

function supplement_form()
{
	// TODO
}

/**
 * Read bookable details from POST environment.
 *
 * @param  boolean	Whether it's an edit (if so we need to look at dependency IDs).
 * @return array		Tuple:  bookable_details, blacked, codes, supplements.
 */
function get_bookable_details_from_form($edit=false)
{
	$active_from=get_input_date('active_from');
	$active_to=get_input_date('active_to');
	
	$bookable_details=array(
		'title'=>post_param('title'),
		'description'=>post_param('description'),
		'price'=>floatval(post_param('price')),
		'categorisation'=>post_param('categorisation'),
		'cycle_type'=>post_param('cycle_type'),
		'cycle_pattern'=>post_param('cycle_pattern'),
		'user_may_choose_code'=>post_param_integer('user_may_choose_code',0),
		'supports_notes'=>post_param_integer('supports_notes',0),
		'dates_are_ranges'=>post_param_integer('dates_are_ranges',0),

		'enabled'=>post_param_integer('enabled',0),

		'active_from_day'=>intval(date('d'),$active_from),
		'active_from_month'=>intval(date('m'),$active_from),
		'active_from_year'=>intval(date('Y'),$active_from),
		'active_to_day'=>is_null($active_to)?NULL:intval(date('d'),$active_to),
		'active_to_month'=>is_null($active_to)?NULL:intval(date('m'),$active_to),
		'active_to_year'=>is_null($active_to)?NULL:intval(date('Y'),$active_to),
	);

	$blacked=array();
	$codes=array();
	$supplements=array();
	foreach (array_keys($_POST) as $key)
	{
		if (substr($key,0,13)=='blacked_from_')
		{
			$i=substr($key,13);

			$blacked_from=get_input_date($key);
			$blacked_to=get_input_date('blacked_from_'.$i);

			$black=array(
				'blacked_from_day'=>intval(date('d'),$blacked_from),
				'blacked_from_month'=>intval(date('m'),$blacked_from),
				'blacked_from_year'=>intval(date('Y'),$blacked_from),
				'blacked_to_day'=>intval(date('d'),$blacked_to),
				'blacked_to_month'=>intval(date('m'),$blacked_to),
				'blacked_to_year'=>intval(date('Y'),$blacked_to),
				'blacked_explanation'=>post_param('blacked_explanation_'.$i),
			);
			
			if ($edit) $back['id']=post_param('blacked_'.$i);

			$blacked[]=$black;
		}

		if (substr($key,0,5)=='code_')
		{
			$i=substr($key,5);

			$codes[]=post_param($key);
		}

		if (substr($key,0,11)=='supplement_')
		{
			if (post_param_integer($key,0)==1)
				$supplements[]=intval(substr($key,11));
		}
	}

	return array($bookable_details,$blacked,$codes,$supplements);
}

/**
 * Read supplement details from POST environment.
 *
 * @return array		Supplement details.
 */
function get_bookable_supplement_details_from_form()
{
	return array(
		'price'=>floatval(post_param('price')),
		'price_is_per_period'=>post_param_integer('price_is_per_period',0),
		'supports_quantities'=>post_param_integer('supports_quantities',0),
		'title'=>post_param('title'),
		'promo_code'=>post_param('promo_code'),
		'supports_notes'=>post_param_integer('supports_notes',0),
	);
}

/**
 * Add a bookable.
 *
 * @param  array		Bookable details.
 * @param  array		List of black-outs.
 * @param  array		List of codes.
 * @param  array		List of supplements.
 * @param  ?TIME		Add date (NULL: now).
 * @param  ?MEMBER	Submitting user (NULL: current user).
 * @return AUTO_LINK	Bookable ID.
 */
function add_bookable($bookable_details,$blacked,$codes,$supplements,$add_date=NULL,$submitter=NULL)
{
	if (is_null($add_date)) $add_date=time();
	if (is_null($submitter)) $submitter=get_member();

	$title=$bookable_details['title'];

	$bookable_details['title']=insert_lang($bookable_details['title'],1);
	$bookable_details['description']=insert_lang($bookable_details['description'],1);
	$bookable_details['categorisation']=insert_lang($bookable_details['categorisation'],1);

	$bookable_details['calendar_type']=NULL;
	$bookable_details['add_date']=$add_date;
	$bookable_details['edit_date']=NULL;
	$bookable_details['submitter']=$submitter;

	$bookable_id=$GLOBALS['SITE_DB']->query_insert('bookables',$bookable_details,true);

	require_code('calendar2');
	$bookable_details['calendar_type']=add_event_type($title,$logo,find_script('bookings_ical').'?id='.strval($bookable_id).'&pass='.md5('booking_salt_'.$GLOBALS['SITE_INFO']['admin_password']));

	$GLOBALS['SITE_DB']->query_update('bookables',array('calendar_type'=>$bookable_details['calendar_type']),array('id'=>$bookable_id),'',1);

	foreach ($blacked as $black)
	{
		$black['black_explanation']=insert_lang($black['black_explanation'],2);

		$GLOBALS['SITE_DB']->query_insert('bookable_blacked',array(
			'bookable_id'=>$bookable_id,
		)+$black);
	}

	foreach ($codes as $code)
	{
		$GLOBALS['SITE_DB']->query_insert('bookable_codes',array(
			'bookable_id'=>$bookable_id,
			'code'=>$code,
		));
	}

	foreach ($supplements as $supplement_id)
	{
		$GLOBALS['SITE_DB']->query_insert('bookable_supplement_for',array(
			'supplement_id'=>$supplement,
			'bookable_id'=>$bookable_id,
		));
	}
	
	log_it('ADD_BOOKABLE',strval($bookable_id),$title);

	return $bookable_id;
}

/**
 * Edit a bookable.
 *
 * @param  AUTO_LINK	Bookable ID.
 * @param  array		Bookable details.
 * @param  array		List of black-outs.
 * @param  array		List of codes.
 * @param  array		List of supplements.
 */
function edit_bookable($bookable_id,$bookable_details,$blacked,$codes,$supplements)
{
	$_old_bookable=$GLOBALS['SITE_DB']->query_select('bookables',array('*'),array('id'=>$bookable_id),'',1);
	if (!array_key_exists(0,$_old_bookable)) warn_exit(do_lang_tempcode('MISSING_RESOURCE'));

	$title=$bookable_details['title'];

	$bookable_details['title']=lang_remap($_old_bookable[0]['title'],$bookable_details['title']);
	$bookable_details['description']=lang_remap($_old_bookable[0]['description'],$bookable_details['description']);
	$bookable_details['categorisation']=lang_remap($_old_bookable[0]['categorisation'],$bookable_details['categorisation']);

	$bookable_details['edit_date']=time();

	$bookable_details['calendar_type']=$_old_bookable[0]['calendar_type'];
	if ((is_null($bookable_details['calendar_type'])) && (is_null($GLOBALS['SITE_DB']->query_value_null_ok('calendar_types','id',array('id'=>$bookable_details['calendar_type'])))))
	{
		require_code('calendar2');
		$bookable_details['calendar_type']=add_event_type($title,$logo,find_script('bookings_ical').'?id='.strval($bookable_id));
	}
	$bookable_details['add_date']=$add_date;

	$GLOBALS['SITE_DB']->query_update('bookables',$bookable_details,array('id'=>$bookable_id),'',1);

	$black_updated='';
	foreach ($blacked as $black)
	{
		$black['black_explanation']=insert_lang($black['black_explanation'],2);

		$GLOBALS['SITE_DB']->query_update('bookable_blacked',$black,array('id'=>$black['id']),'',1);

		$black_updated.=' AND ';
		$black_updated.='id<>'.strval($black['id']);
	}
	$lang_ids=$GLOBALS['SITE_DB']->query('SELECT black_explanation FROM '.get_table_prefix().'bookable_blacked WHERE bookable_id='.strval($bookable_id).$black_updated);
	foreach ($lang_ids as $lang_id) delete_lang($lang_id['black_explanation']);
	$GLOBALS['SITE_DB']->query('DELETE FROM '.get_table_prefix().'bookable_blacked WHERE bookable_id='.strval($bookable_id).$black_updated);

	$GLOBALS['SITE_DB']->query_delete('bookable_codes',array('bookable_id'=>$bookable_id));
	foreach ($codes as $code)
	{
		$GLOBALS['SITE_DB']->query_insert('bookable_codes',array(
			'bookable_id'=>$bookable_id,
			'code'=>$code,
		));
	}

	$GLOBALS['SITE_DB']->query_delete('bookable_supplement_for',array('bookable_id'=>$bookable_id));
	foreach ($supplements as $supplement_id)
	{
		$GLOBALS['SITE_DB']->query_insert('bookable_supplement_for',array(
			'supplement_id'=>$supplement,
			'bookable_id'=>$bookable_id,
		));
	}
	
	log_it('EDIT_BOOKABLE',strval($bookable_id),$title);
}

/**
 * Delete a bookable.
 *
 * @param  AUTO_LINK	Bookable ID.
 */
function delete_bookable($bookable_id)
{
	$_old_bookable=$GLOBALS['SITE_DB']->query_select('bookables',array('*'),array('id'=>$bookable_id),'',1);
	if (!array_key_exists(0,$_old_bookable)) warn_exit(do_lang_tempcode('MISSING_RESOURCE'));

	$title=get_translated_text($_old_bookable[0]['title']);

	lang_delete($_old_bookable[0]['title']);
	lang_remap($_old_bookable[0]['description']);
	lang_remap($_old_bookable[0]['categorisation']);

	$calendar_type=$_old_bookable[0]['calendar_type'];
	if ((is_null($calendar_type)) && (is_null($GLOBALS['SITE_DB']->query_value_null_ok('calendar_types','id',array('id'=>$calendar_type)))) && ($GLOBALS['SITE_DB']->query_value('calendar_events','COUNT(*)',array('e_type'=>$calendar_type))==0))
	{
		require_code('calendar2');
		delete_event_type($calendar_type));
	}

	$GLOBALS['SITE_DB']->query_delete('bookables',array('id'=>$bookable_id),'',1);

	$blacked=$GLOBALS['SITE_DB']->query_select('bookable_blacked',array('black_explanation'),array('bookable_id'=>$bookable_id));
	foreach ($blacked as $black)
	{
		delete_lang($black['black_explanation']);
	}
	$GLOBALS['SITE_DB']->query_delete('bookable_blacked',array('bookable_id'=>$bookable_id));

	$GLOBALS['SITE_DB']->query_delete('bookable_codes',array('bookable_id'=>$bookable_id));

	$GLOBALS['SITE_DB']->query_delete('bookable_supplement_for',array('bookable_id'=>$bookable_id));
	
	log_it('DELETE_BOOKABLE',strval($bookable_id),$title);
}

/**
 * Add a bookable supplement.
 *
 * @param  array		Supplement details.
 * @param  ?array		List of bookables to associate to (NULL: none).
 * @return AUTO_LINK	Supplement ID.
 */
function add_bookable_supplement($details,$bookables=NULL)
{
	if (is_null($bookables)) $bookables=array();

	$title=$details['title'];

	$details['title']=insert_lang($details['title'],1);

	$supplement_id=$GLOBALS['SITE_DB']->query_insert('bookable_supplements',$details,true);

	foreach ($bookables as $bookable_id)
	{
		$GLOBALS['SITE_DB']->query_insert('bookable_supplement_for',array(
			'supplement_id'=>$supplement_id,
			'bookable_id'=>$bookable_id,
		));
	}

	log_it('ADD_BOOKABLE_SUPPLEMENT',strval($supplement_id),$title);

	return $supplement_id;
}

/**
 * Edit a bookable supplement.
 *
 * @param  AUTO_LINK	Supplement ID.
 * @param  array		Supplement details.
 */
function edit_bookable_supplement($supplement_id,$details,$bookables=NULL)
{
	if (is_null($bookables)) $bookables=array();

	$title=$details['title'];

	$_old_supplement=$GLOBALS['SITE_DB']->query_select('bookable_supplements',array('*'),array('id'=>$supplement_id),'',1);
	if (!array_key_exists(0,$_old_supplement)) warn_exit(do_lang_tempcode('MISSING_RESOURCE'));

	$details['title']=update_lang($_old_supplement[0]['title'],$details['title']);

	$GLOBALS['SITE_DB']->query_update('bookable_supplements',$details,array('id'=>$supplement_id),'',1);

	$GLOBALS['SITE_DB']->query_delete('bookable_supplement_for',array('supplement_id'=>$supplement_id));
	foreach ($bookables as $bookable_id)
	{
		$GLOBALS['SITE_DB']->query_insert('bookable_supplement_for',array(
			'supplement_id'=>$supplement_id,
			'bookable_id'=>$bookable_id,
		));
	}

	log_it('EDIT_BOOKABLE_SUPPLEMENT',strval($supplement_id),$title);
}

/**
 * Delete a bookable supplement.
 *
 * @param  AUTO_LINK	Supplement ID.
 */
function delete_bookable_supplement($supplement_id)
{
	$_old_supplement=$GLOBALS['SITE_DB']->query_select('bookable_supplements',array('*'),array('id'=>$supplement_id),'',1);
	if (!array_key_exists(0,$_old_supplement)) warn_exit(do_lang_tempcode('MISSING_RESOURCE'));

	$title=get_translated_text($_old_supplement[0]['title']);

	delete_lang($_old_supplement[0]['title']);

	$GLOBALS['SITE_DB']->query_delete('bookable_supplements',array('id'=>$supplement_id),'',1);

	$GLOBALS['SITE_DB']->query_delete('bookable_supplement_for',array('supplement_id'=>$supplement_id));

	log_it('DELETE_BOOKABLE_SUPPLEMENT',strval($supplement_id),$title);
}
