<?php /*

 ocPortal
 Copyright (c) ocProducts, 2004-2012

 See text/EN/licence.txt for full licencing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license		http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright	ocProducts Ltd
 * @package		gallery_syndicate
 */

function init__gallery_syndicate()
{
	define('SYNDICATION_ORPHANS__LEAVE',1);
	define('SYNDICATION_ORPHANS__UNVALIDATE',2);
	define('SYNDICATION_ORPHANS__DELETE',3);

	$filter=get_option('gallery_sync_ocfilter',true);
	if (is_null($filter))
	{
		add_config_option('GALLERY_SYNC_OCFILTER','gallery_sync_ocfilter','line','return \'\';','FEATURE','VIDEO_SYNCHRONISATION');
		add_config_option('GALLERY_SYNC_ORPHANED_HANDLING','gallery_sync_orphaned_handling','line','return \'\';','FEATURE','VIDEO_SYNCHRONISATION');
	}
}

function get_local_videos()
{
	$videos=array();

	$filter=get_option('gallery_sync_ocfilter');

	if ($filter=='')
	{
		$where='1=1';
	} else
	{
		require_code('ocfiltering');
		$where=ocfilter_to_sqlfragment($filter,'id','galleries','parent_id','cat','name',true,false);
	}

	$tree=collapse_2d_complexity('cat','parent_id',$GLOBALS['SITE_DB']->query_select('galleries',array('cat','parent_id')));

	$rows=$GLOBALS['SITE_DB']->query('SELECT * FROM '.get_table_prefix().'videos WHERE '.$where);
	foreach ($rows as $row)
	{
		$categories=array($row['cat']);
		$parent_id=$row['parent_id'];
		while (!is_null($parent_id))
		{
			array_push($categories,$parent_id);
			$parent_id=$tree[$parent_id];
		}
		array_pop($categories); // We don't need root category on there

		$videos[$row['id']]=array(
			'id'=>$row['id'],
			'title'=>get_translated_text($row['title']),
			'description'=>comcode_to_clean_text(get_translated_text($row['description'])),
			'mtime'=>is_null($row['edit_date'])?$row['add_date']:$row['edit_date'],
			'tags'=>array_reverse($categories),
		);
	}

	return $videos;
}

function sync_video_syndication()
{
	$orphaned_handling=get_option('gallery_sync_orphaned_handling');

	$hooks=find_all_hooks('modules','gallery_syndication');

	$local_videos=get_local_videos();

	// What is already on remote server
	foreach (array_keys($hooks) as $hook)
	{
		$exists_remote=array();

		require_code('hooks/modules/video_syndication');
		$ob=object_factory('video_syndication_'.filter_naughty($hook));
		if ($ob->is_active())
		{
			$remote_videos=$ob->get_remote_videos();
			foreach ($remote_videos as $video)
			{
				if (!is_null($video['id']))
				{
					_resync_remote_video($ob,$video,$local_videos,$orphaned_handling);
					$exists_remote[$video['id']]=true;
				}
			}
		}

		// What is there locally
		foreach ($local_videos as $video)
		{
			if (!array_key_exists($video['id'],$exists_remote))
			{
				_sync_local_video($ob,$video);
			}
		}
	}
}

function _resync_remote_video($ob,$video,$local_videos,$orphaned_handling)
{
	if (array_key_exists($video['id'],$local_videos))
	{
		$local_video=$local_videos[$video['id']];

		// Handle changes
		foreach (array('title','description','tags') as $property)
		{
			if ($video[$property]!=$local_video[$property])
			{
				$ob->change_remote_video($video,$property,$local_video[$property]);
			}
		}
	} else
	{
		// Orphaned remotes
		switch ($orphaned_handling)
		{
			case SYNDICATION_ORPHANS__LEAVE:
				$ob->unbind_remote_video($video);
				break;

			case SYNDICATION_ORPHANS__UNVALIDATE:
				$ob->unbind_remote_video($video);
				$ob->unvalidate_remote_video($video);
				break;

			case SYNDICATION_ORPHANS__DELETE:
				$ob->delete_remote_video($video);
				break;
		}
	}
}

function _sync_local_video($ob,$video)
{
	$ob->upload_video($video);
}
